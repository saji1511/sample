<?php

namespace AppBundle\Controller;

use AppBundle\Controller\GeneralFunctionController;
use AppBundle\Service\AmazonS3Service;
use AppBundle\Service\CheckoutService;
use AppBundle\Service\DeviceDetect;
use AppBundle\Service\GeneralService;
use AppBundle\Service\sfPoShoppingCart;
use CatalogueBundle\Entity\Brand;
use CatalogueBundle\Entity\Category;
use CatalogueBundle\Entity\Product;
use CatalogueBundle\Entity\ProductCategory;
use CatalogueBundle\Entity\ReviewRating;
use CatalogueBundle\Entity\Wishlist;
use ContentcmsBundle\Entity\Blog;
use ContentcmsBundle\Entity\News;
use ContentcmsBundle\Entity\CmsPage;
use ContentcmsBundle\Entity\FaqCategory;
use ContentcmsBundle\Entity\Faqs;
use ContentcmsBundle\Entity\Slider;
use ContentcmsBundle\Entity\Ecircular;
use ContentcmsBundle\Entity\EcircularLang;
use DealersBundle\Entity\UserType;
use Dompdf\Dompdf;
use LocalizationBundle\Entity\Language;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\Cookie;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

//use Symfony\Component\Cache\Adapter\MemcachedAdapter;
use Symfony\Component\HttpFoundation\Session\Session;
use SystemBundle\Entity\Installment;
use SystemBundle\Entity\InstallmentSetting;
use SystemBundle\Entity\Logs;
use SystemBundle\Entity\Module;
use SystemBundle\Entity\Notifications;
use SystemBundle\Entity\TaxRates;
use SystemBundle\Entity\TaxZipcode;
use SystemBundle\Entity\UserGroupAccess;
use SystemBundle\Entity\UserModuleAccess;
use USPS\RatePackage;
use AppBundle\Service\MyFrontService;
use CatalogueBundle\CatalogueBundle;
use CatalogueBundle\Entity\ManufacturerCollection;
use CatalogueBundle\Entity\ProductPricing;
use Exception;
use ShoppingCartBundle\sfShoppingCart;
use Symfony\Component\Security\Csrf\CsrfToken;
use AppBundle\Service\ProductService;
use SystemBundle\Entity\SalesCommission;
use CatalogueBundle\Entity\MarkingLang;

//use Symfony\Component\Translation\Loader\XliffFileLoader;

class CommonController extends Controller
{

    public $AdminUserId;
    public $commonData;
    public $fedex_service_options = array(array('id' => 'FIRST_OVERNIGHT', 'name' => 'First Over Night'), array('id' => 'PRIORITY_OVERNIGHT', 'name' => 'Priority Over Night'), array('id' => 'STANDARD_OVERNIGHT', 'name' => 'Standard Over Night'), array('id' => 'FEDEX_2_DAY_AM', 'name' => '2 Days AM'), array('id' => 'FEDEX_2_DAY', 'name' => '2 Days'), array('id' => 'FEDEX_EXPRESS_SAVER', 'name' => 'Express Saver'), array('id' => 'GROUND_HOME_DELIVERY', 'name' => 'Home Delivery'), array('id' => 'FEDEX_GROUND', 'name' => 'Fedex Ground'), array('id' => 'INTERNATIONAL_FIRST', 'name' => 'International First'), array('id' => 'INTERNATIONAL_PRIORITY', 'name' => 'International Priority'), array('id' => 'INTERNATIONAL_ECONOMY', 'name' => 'International Economy'), array('id' => 'INTERNATIONAL_ECONOMY_FREIGHT', 'name' => 'International Economy Freight'), array('id' => 'INTERNATIONAL_PRIORITY_FREIGHT', 'name' => 'International Priority Freight'), array('id' => 'EUROPE_FIRST_INTERNATIONAL_PRIORITY', 'name' => 'Europe First International Priority'));
    public $usps_service_options  = array(array('id' => 'USPS_0', 'name' => 'Priority Mail Express 1-Day'), array('id' => 'USPS_1', 'name' => 'Priority Mail Express 1-Day Hold For Pickup'), array('id' => 'USPS_2', 'name' => 'Priority Mail Express 1-Day Flat Rate Boxes'), array('id' => 'USPS_3', 'name' => 'Priority Mail Express 1-Day Flat Rate Boxes Hold For Pickup'), array('id' => 'USPS_4', 'name' => 'Priority Mail Express 1-Day Flat Rate Envelope'), array('id' => 'USPS_5', 'name' => 'Priority Mail Express 1-Day Flat Rate Envelope Hold For Pickup'), array('id' => 'USPS_6', 'name' => 'Priority Mail Express 1-Day Legal Flat Rate Envelope'), array('id' => 'USPS_7', 'name' => 'Priority Mail Express 1-Day Legal Flat Rate Envelope Hold For Pickup'), array('id' => 'USPS_8', 'name' => 'Priority Mail Express 1-Day Padded Flat Rate Envelope'), array('id' => 'USPS_9', 'name' => 'Priority Mail Express 1-Day Padded Flat Rate Envelope Hold For Pickup'), array('id' => 'USPS_10', 'name' => 'Priority Mail 1-Day'), array('id' => 'USPS_11', 'name' => 'Priority Mail 1-Day Large Flat Rate Box'), array('id' => 'USPS_12', 'name' => 'Priority Mail 1-Day Medium Flat Rate Box'), array('id' => 'USPS_13', 'name' => 'Priority Mail 1-Day Small Flat Rate Box'), array('id' => 'USPS_14', 'name' => 'Priority Mail 1-Day Flat Rate Envelope'), array('id' => 'USPS_15', 'name' => 'Priority Mail 1-Day Legal Flat Rate Envelope'));
    public $shippingChargesArray  = array();
    public $ups_service_options   = array();
    public $memcached   = false;
    public $memcached_key   = false;
    public $cachingtime = 10800;
    public $Server = '127.0.0.1';

    public function __construct()
    {
       
        $this->memcached = new \Memcached();
        $this->memcached->addServer($this->Server, 11211);
      //  echo "asd";die;
        //$loader = new XliffFileLoader();
        //$translations = $loader->load(__DIR__ . '/translations/messages.en.xlf' , 'en');
    }
//        $memcached->addServer('172.31.65.197', 11211);
    public function commonGlobalData()
    {
       
        $GeneralFunction = new GeneralFunctionController;
        $GeneralService  = $this->get(GeneralService::class);
        $AdminUserId     = $GeneralService->getAdminUserSession();
        $this->memcached = new \Memcached();
        $this->memcached->addServer($this->Server, 11211);
        $memcached = $this->memcached;       
        $memcached_key = $this->container->getParameter('database_name');
        $time = $this->cachingtime;
        if (!empty($AdminUserId)) {
            //Get User Admin Session Details
            $AdminDetails = $GeneralService->getAdminSessionDetails();
            
            if ($memcached->get($memcached_key.'_commonGlobalData')){

                $SiteSetting = $memcached->get($memcached_key.'_commonFrontData_SiteSetting');
                $StoreImgSetting = $memcached->get($memcached_key.'_commonFrontData_StoreImgSetting');
                $LayoutSetting = $memcached->get($memcached_key.'_commonFrontData_LayoutSetting');
            //Get Store Main Configuration
            }else{
                $SiteSetting = $GeneralService->getStoreMainConfig();
                $timezone    = $GeneralService->getTimeZonebyId($SiteSetting['timezone']);
                date_default_timezone_set($timezone);
                $LayoutSetting            = $GeneralService->getStoreLayoutConfig();
                $SiteSetting['themename'] = $LayoutSetting['themename'];
                //$StoreImgSetting = json_decode($SiteSetting['storeLogoSetting']);
                $StoreImgSetting = json_decode($SiteSetting['storeLogoSetting'], true);
                if (!empty($StoreImgSetting)) {
                    $params = array();
                    if (!empty($StoreImgSetting['store_main_logo'])) {
                        $params['option_type']   = 'common';
                        $params['option_value']  = $StoreImgSetting['store_main_logo'];
                        $params['option_folder'] = 'storelogo';

                        $StoreImgSetting['store_main_logo'] = $GeneralService->getAWSUploadImages($params);
                    }
                    if (!empty($StoreImgSetting['store_sticky_logo'])) {
                        $params['option_type']   = 'common';
                        $params['option_value']  = $StoreImgSetting['store_sticky_logo'];
                        $params['option_folder'] = 'storelogo';

                        $StoreImgSetting['store_sticky_logo'] = $GeneralService->getAWSUploadImages($params);
                    }
                    if (!empty($StoreImgSetting['store_favicon'])) {
                        $params['option_type']   = 'common';
                        $params['option_value']  = $StoreImgSetting['store_favicon'];
                        $params['option_folder'] = 'storelogo';

                        $StoreImgSetting['store_favicon'] = $GeneralService->getAWSUploadImages($params);
                    }
                }
                (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";

                $memcached->set($memcached_key.'_commonFrontData_SiteSetting',$SiteSetting,$time);
                $memcached->set($memcached_key.'_commonFrontData_StoreImgSetting',$StoreImgSetting,$time);
                $memcached->set($memcached_key.'_commonFrontData_LayoutSetting',$LayoutSetting,$time);
                $memcached->set($memcached_key.'_commonGlobalData','set',$time);
            }
            //Get Admin User Sidebar and access module
            $AdminSideBar     = $GeneralService->getAdminUserSidebar($AdminDetails);
            $this->commonData = array($SiteSetting, $AdminDetails, $StoreImgSetting, $AdminSideBar, $LayoutSetting, $GeneralService, $GeneralFunction);

        } else {
            if(!empty($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], '/admin/purchaseorders?Qrparams=') !== false && $_SERVER['REQUEST_METHOD'] == 'GET'){
                $session = new Session();
                $this->get('session')->set('Scan_QR_url', $_SERVER['REQUEST_URI']);
            }
            header("Location:/admin");
            exit;
        }

         return $this->commonData;
    }

    public function getFrontLanguage($SiteSetting)
    {
        $session       = new Session();
        $langCode      = "";
        $front_lang_id = $session->get('front_lang_id');
        $langCode      = $session->get('front_lang_code');
        $request       = Request::createFromGlobals();
        $request->cookies->get('front-site-language');
        if (empty($front_lang_id) || empty($langCode)) {
            if (!empty($request->cookies->get('front-site-language'))) {
                $langCode = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(array('code' => $_COOKIE['front-site-language'], 'status' => 1, 'isDeleted' => 0));
                if ($langCode) {
                    $this->get('session')->set('front_lang_id', $langCode->getId());
                    $this->get('session')->set('front_lang_name', $langCode->getName());
                    $this->get('session')->set('front_lang_code', $langCode->getCode());
                    $this->get('session')->set('front_lang_ref_id', $langCode->getCtbRefId());
                    $langCode = $langCode->getCode();
                    $cookie   = new Cookie('front-site-language', $langCode, time() + (10 * 365 * 24 * 60 * 60));
                    $response = new Response();
                    $response->headers->setCookie($cookie);
                    $response->send();
                } else {
                    $langCode = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(array('id' => $SiteSetting['langId'], 'status' => 1, 'isDeleted' => 0));
                    if ($langCode) {
                        $this->get('session')->set('front_lang_id', $SiteSetting['langId']);
                        $this->get('session')->set('front_lang_name', $langCode->getName());
                        $this->get('session')->set('front_lang_code', $langCode->getCode());
                        $this->get('session')->set('front_lang_ref_id', $langCode->getCtbRefId());
                        $langCode = $langCode->getCode();
                        $cookie   = new Cookie('front-site-language', $langCode, time() + (10 * 365 * 24 * 60 * 60));
                        $response = new Response();
                        $response->headers->setCookie($cookie);
                        $response->send();
                    }
                }
            } else if (!empty($SiteSetting['langId']) && isset($SiteSetting['langId'])) {
                $langCode = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(array('id'=> $SiteSetting['langId'], 'status' => 1, 'isDeleted' => 0));
                if ($langCode) {
                    $this->get('session')->set('front_lang_id', $SiteSetting['langId']);
                    $this->get('session')->set('front_lang_name', $langCode->getName());
                    $this->get('session')->set('front_lang_code', $langCode->getCode());
                    $this->get('session')->set('front_lang_ref_id', $langCode->getCtbRefId());
                    $langCode = $langCode->getCode();
                    $cookie   = new Cookie('front-site-language', $langCode, time() + (10 * 365 * 24 * 60 * 60));
                    $response = new Response();
                    $response->headers->setCookie($cookie);
                    $response->send();
                }
            }
            return $langCode;
        } else {
            return $langCode;
        }
    }

    public function getFrontCurrency($SiteSetting)
    {
        $session           = new Session();
        $currencyCode      = "";
        $front_currency_id = $session->get('front_currency_id');
        $currencyCode      = $session->get('front_currency_code');
        if (empty($front_currency_id) || empty($currencyCode)) {
            if ($this->container->hasParameter('store_base_currency') == 1 && !empty($this->container->getParameter('store_base_currency'))) {
                $currencyCode = $this->getParameter('store_base_currency');
                $currencyData = $this->getDoctrine()->getRepository('LocalizationBundle:Currency')->findBy(array('status' => 1, 'isDeleted' => 0, 'isoCode' => $currencyCode));
                if (!empty($currencyData)) {
                    $currencyData = $currencyData[0];
                    $this->get('session')->set('front_currency_id', $currencyData->getId());
                    $this->get('session')->set('front_currency_code', $currencyData->getIsoCode());
                    $this->get('session')->set('front_currency_symbol', $currencyData->getSymbol());
                    $this->get('session')->set('front_currency_iso_code_num', $currencyData->getIsoCodeNum());
                    $this->get('session')->set('front_currency_conversion_rate', 1);
                    $this->get('session')->set('front_currency_setting', $currencyData->getCurrencySetting());
                }
            } else {
                if (!empty($SiteSetting['curId']) && isset($SiteSetting['curId'])) {
                    $currencyData = $this->getDoctrine()->getRepository('LocalizationBundle:Currency')->findBy(array('id' => $SiteSetting['curId'], 'status' => 1, 'isDeleted' => 0));
                    $currencyData = $currencyData[0];
                    $this->get('session')->set('front_currency_id', $SiteSetting['curId']);
                    $this->get('session')->set('front_currency_code', $currencyData->getIsoCode());
                    $this->get('session')->set('front_currency_symbol', $currencyData->getSymbol());
                    $this->get('session')->set('front_currency_conversion_rate', 1);
                    $this->get('session')->set('front_currency_iso_code_num', $currencyData->getIsoCodeNum());
                    $this->get('session')->set('front_currency_setting', $currencyData->getCurrencySetting());
                    $currencyCode = $currencyData->getIsoCode();
                }
            }
            return $currencyCode;
        } else {
            return $currencyCode;
        }
    }

     public function commonFrontData()
    {

        $this->setSessionBySlug();
        $memcached = new \Memcached();
        $memcached->addServer($this->Server, 11211);
        
        $memcached_key = $this->container->getParameter('database_name');
        $lang_id = $this->get('session')->get('front_lang_id');
        $memcached_key = $memcached_key.'_'.$lang_id;
        //$memcached->flush(0);
        $time = $this->cachingtime;
        $GeneralService = $this->get(GeneralService::class);
        $session = new Session();
            $GeneralFunction = new GeneralFunctionController;
            $DeviceDetect = $this->get(DeviceDetect::class);
            $deviceType = ($DeviceDetect->isMobile() ? ($DeviceDetect->isTablet() ? 'tablet' : 'phone') : 'computer');
            
            //getStoreMainConfig value will be same for all session and 
            if ($memcached->get($memcached_key.'_commonFrontData_SiteSetting')){
                    $SiteSetting = $memcached->get($memcached_key.'_commonFrontData_SiteSetting');
                }else{
                    $SiteSetting = $GeneralService->getStoreMainConfig();
                    $memcached->set($memcached_key.'_commonFrontData_SiteSetting',$SiteSetting,$time);
            }
            
            $CheckoutService = $this->get(CheckoutService::class);
            $CommonVariable = array();
             
            if ($memcached->get($memcached_key.'_commonFrontData_show_zipcode')){
                    $CommonVariable = $memcached->get($memcached_key.'_commonFrontData_show_zipcode');
                }else{
                    $CommonVariable['show_zipcode'] = $this->checkZipcodeExistShippingZone();
                    $memcached->set($memcached_key.'_commonFrontData_show_zipcode',$CommonVariable,$time);
            }

            // not in memcached as it is based on session
            if (!$session->has('CheckoutService')) {
                $showZip = $CommonVariable['show_zipcode'];
                $session->set('CheckoutService', $CheckoutService);
                $checkoutData = array();
                $checkoutData['shipCountry'] = $checkoutData['bilCountry'] = $SiteSetting['countryId'];
                $checkoutData['shipState'] = $checkoutData['bilState'] = $SiteSetting['state'];
                $checkoutData['shipCity'] = $checkoutData['bilCity'] = $SiteSetting['city'];
                $checkoutData['shipZip'] = $checkoutData['bilZip'] = ($showZip == 1) ? $SiteSetting['zipcode'] : 0;
                $this->updateCheckoutData($checkoutData);
            }
            (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";
            (isset($StoreOtherapiSetting->awsDirroot) && $StoreOtherapiSetting->awsDirroot!='') ? $CommonVariable['awsRoot']=$StoreOtherapiSetting->awsDirroot : $CommonVariable['awsRoot'] ="";

            $em = $this->getDoctrine()->getManager();

          //  $CommonVariable['BaseUrl'] = '';
            //$CommonVariable['LangCode'] = '';
           

            $CommonAvailableData = array();
            $CommonAvailableData['CmsPageData'] = array();
            $CommonAvailableData['CategoryData'] = array();
            $CommonAvailableData['BrandData'] = array();
            $CommonAvailableData['CustomerData'] = array();
            $CommonAvailableData['UserData'] = array();
            $CommonAvailableData['CollectionCategoryData'] = array();

            //This Translator is Used to Set User Chosen    Language in Whole Site

            $BaseUrl = $GeneralService->getBaseUrl();
            $langCode = $this->getFrontLanguage($SiteSetting);
            $currencyCode = $this->getFrontCurrency($SiteSetting);

            $this->get('translator')->setLocale($langCode);
            $lang_id = $this->get('session')->get('front_lang_id');
            
            // REN08 :start - hidezipcode

            //This Translator is Used to Set User Chosen Currency in Whole Site

            if ($memcached->get($memcached_key.'_commonFrontData_socialLinkArray')){
                $socialLinkArray = $memcached->get($memcached_key.'_commonFrontData_socialLinkArray');
                $timezone = $memcached->get($memcached_key.'_commonFrontData_timezone');
            }else{
                 $socialLinkArray = $this->getDoctrine()->getRepository('SystemBundle:SocialAccountSetting')->findBy(array('status' => 1, 'isDeleted' => 0), array('sortOrder' => 'ASC', 'mediaName' => 'ASC'));
                 $timezone = $GeneralService->getTimeZonebyId($SiteSetting['timezone']);

                $memcached->set($memcached_key.'_commonFrontData_socialLinkArray',$socialLinkArray,$time);
                $memcached->set($memcached_key.'_commonFrontData_timezone',$timezone,$time);
            }

           
            //Note - As per discussion with @Chirayu commented this timezone setting.
            date_default_timezone_set($timezone);
            $PrimaryMenu = array();
            $SecondaryMenu = array();
           
            if ($memcached->get($memcached_key.'_commonFrontData_LayoutSetting')){
                $LayoutSetting = $memcached->get($memcached_key.'_commonFrontData_LayoutSetting');
            }else{
                $LayoutSetting = $GeneralService->getStoreLayoutConfig();
                $memcached->set($memcached_key.'_commonFrontData_LayoutSetting',$LayoutSetting,$time);
            }
           
            $footer_html = $this->getfooterPortion($LayoutSetting);
            $html_footer_data = '';
            if ($memcached->get($memcached_key.'_commonFrontData_LayoutSetting1')){
                $LayoutSetting = $memcached->get($memcached_key.'_commonFrontData_LayoutSetting1');
                $SiteSetting = $memcached->get($memcached_key.'_commonFrontData_SiteSetting1');
                
            }else{

                    switch ($LayoutSetting['theme_setting']->general_option->footer->footer_column) {
                        case 1:
                            $start_div = '';
                            break;
                        case 2:
                            $start_div = '<div class="col-md-6 col-sm-6 col-xs-12">';
                            break;
                        case 3:
                            $start_div = '<div class="col-md-4 col-sm-4 col-xs-12">';
                            break;
                        case 6:
                            $start_div = '<div class="col-md-2 col-sm-4 col-xs-12">';
                            break;
                        default:
                            $start_div = '<div class="col-md-3 col-sm-6 col-xs-12">';
                            break;
                    }
                    $closing_div = '';
                    if (!empty($start_div)) {
                        $closing_div = '</div>';
                    }
                    foreach ($footer_html as $ftr => $ftr_val) {
                        $html_footer_data .= $start_div;
                        for ($i = 0; $i < count($ftr_val); $i++) {
                            $html_footer_data .= $ftr_val[$i];
                        }
                        $html_footer_data .= $closing_div;
                    }
                    $CurCode = "";
                    $LayoutSetting['footer_html'] = $html_footer_data;
                    $LayoutSetting['bootom_primary_text'] = htmlspecialchars_decode($LayoutSetting['theme_setting']->general_option->footer->bootom_primary_text);
                    $LayoutSetting['bootom_secondary_text'] = htmlspecialchars_decode($LayoutSetting['theme_setting']->general_option->footer->bootom_secondary_text);
                    $LayoutSetting['befor_footer_html'] = htmlspecialchars_decode($LayoutSetting['theme_setting']->general_option->footer->befor_footer_html);
                    $LayoutSetting['after_footer_html'] = htmlspecialchars_decode($LayoutSetting['theme_setting']->general_option->footer->after_footer_html);
                    $defaultCurrency = json_decode($SiteSetting['currencySetting']);
                    $CurSymbole = $this->getDoctrine()->getRepository('LocalizationBundle:Currency')->findBy(array('id' => $SiteSetting['curId'], 'status' => 1, 'isDeleted' => 0));
                    if (!empty($CurSymbole)) {
                        $CurSymbole = $CurSymbole[0];
                        $CurSymbol = $CurSymbole->getSymbol();
                        $SiteSetting['curSymbol'] = $CurSymbol;
                        $CurCode = $CurSymbole->getIsoCode();
                        $SiteSetting['curCode'] = $CurCode;
                    } else {
                        $SiteSetting['curSymbol'] = '$';
                        $SiteSetting['curCode'] = 'USD';
                    }
                $SiteSetting['themename'] = $LayoutSetting['themename'];

                $memcached->set($memcached_key.'_commonFrontData_LayoutSetting1',$LayoutSetting,$time);
                $memcached->set($memcached_key.'_commonFrontData_SiteSetting1',$SiteSetting,$time);
            }
            
            // updating CommonVariable for 2nd time into memcached
            if ($memcached->get($memcached_key.'_commonFrontData_CommonVariable1')){
                $CommonVariable = $memcached->get($memcached_key.'_commonFrontData_CommonVariable1');
                $SiteSetting = $memcached->get($memcached_key.'_commonFrontData_SiteSetting2');
                
            }else{
                $CommonVariable['BaseUrl'] = $BaseUrl;
                $module_slug = array('findaretailer' => "'findaretailer'");
                $special_module_data = array("findaretailer" => '');
                $enabled_modules = $this->getModuleDetailsByCommaseparatedSlug($module_slug);
                if (!empty($enabled_modules)) {
                    foreach ($enabled_modules as $module_val) {
                        $slg = $module_val['slug'];
                        $special_module_data[$slg] = $module_val;
                    }
                }
                $SiteSetting['special_module_data'] = $special_module_data;

                $widget_data = $this->getWidgetHtml($SiteSetting, '17,18,19,20,21,22,23,24,25,26,27,28,29,32,44,45,48,52,53', 0);
                //REB12  Widget above tobar
                $CommonVariable['AboveTopbar'] = '';
                if (!empty($widget_data['abovetopbar']['html'])) {
                    $CommonVariable['AboveTopbar'] = $widget_data['abovetopbar']['html'];
                }
                //REB01  Widget above breadcrumb
                $CommonVariable['AboveBreadcrumbs'] = '';
                if (!empty($widget_data['bannerabovebreadcrumbs']['html'])) {
                   $CommonVariable['AboveBreadcrumbs'] = $widget_data['bannerabovebreadcrumbs']['html'];
                }

                $memcached->set($memcached_key.'_commonFrontData_CommonVariable1',$CommonVariable,$time);
                $memcached->set($memcached_key.'_commonFrontData_SiteSetting2',$SiteSetting,$time);
            }

            // not to add into memcached as it based on session
            $CommonVariable['DeviceType'] = $deviceType;
            $CommonVariable['LangCode'] = $langCode;
            $CommonVariable['CurrencyCode'] = $currencyCode;
            $CommonVariable['LangId'] = $this->get('session')->get('front_lang_id');
            $CommonVariable['LangName'] = $this->get('session')->get('front_lang_name');
            $CommonVariable['LangRefId'] = $this->get('session')->get('front_lang_ref_id');
            

            /* end Widget */
            // widget Area 17 is topbar left
            // updating LayoutSetting for 3nd time into memcached

            if($memcached->get($memcached_key.'_commonFrontData_LayoutSetting2')){
                $LayoutSetting = $memcached->get($memcached_key.'_commonFrontData_LayoutSetting2');
            }else{

                $LayoutSetting['topbarleft'] = '';
                if (!empty($widget_data['topbarleftcolumn']['html'])) {
                    $LayoutSetting['topbarleft'] = $widget_data['topbarleftcolumn']['html'];
                }
                // widget Area 18 is topbar center
                $LayoutSetting['topbarcenter'] = '';
                if (!empty($widget_data['topbarcentercolumn']['html'])) {
                    $LayoutSetting['topbarcenter'] = $widget_data['topbarcentercolumn']['html'];
                }
                // widget Area 19 is topbar right
                $LayoutSetting['topbarright'] = '';
                if (!empty($widget_data['topbarrightcolumn']['html'])) {
                    $LayoutSetting['topbarright'] = $widget_data['topbarrightcolumn']['html'];
                }
                // widget Area 20 is header promotion
                $LayoutSetting['headercolumnone'] = '';
                if (!empty($widget_data['headercolumnone']['html'])) {
                    $LayoutSetting['headercolumnone'] = $widget_data['headercolumnone']['html'];
                }

                $LayoutSetting['headercolumntwo'] = '';
                if (!empty($widget_data['headercolumntwo']['html'])) {
                    $LayoutSetting['headercolumntwo'] = $widget_data['headercolumntwo']['html'];
                }

                $LayoutSetting['headercolumnthree'] = '';
                if (!empty($widget_data['headercolumnthree']['html'])) {
                    $LayoutSetting['headercolumnthree'] = $widget_data['headercolumnthree']['html'];
                }

                $LayoutSetting['headercolumnfour'] = '';
                if (!empty($widget_data['headercolumnfour']['html'])) {
                    $LayoutSetting['headercolumnfour'] = $widget_data['headercolumnfour']['html'];
                }

                $LayoutSetting['headerpromotion'] = '';
                if (!empty($widget_data['headerpromotion']['html'])) {
                    $LayoutSetting['headerpromotion'] = $widget_data['headerpromotion']['html']; //$headercolumnone;
                }
                // widget Area 24 is Before Footer Right Column
                $LayoutSetting['beforefooterrightcolumn'] = '';
                if (!empty($widget_data['beforefooterrightcolumn']['html'])) {
                    $LayoutSetting['beforefooterrightcolumn'] = $widget_data['beforefooterrightcolumn']['html']; // $beforefooterrightcolumn;
                }
                // widget Area 25 is Before Footer Left Column
                $LayoutSetting['afterfooterrightcolumn'] = '';
                if (!empty($widget_data['afterfooterrightcolumn']['html'])) {
                    $LayoutSetting['afterfooterrightcolumn'] = $widget_data['afterfooterrightcolumn']['html']; //$beforefooterleftcolumn;
                }
                // widget Area 26 is After Footer Right Column
                $LayoutSetting['beforefooterleftcolumn'] = '';
                if (!empty($widget_data['beforefooterleftcolumn']['html'])) {
                    $LayoutSetting['beforefooterleftcolumn'] = $widget_data['beforefooterleftcolumn']['html']; //$afterfooterrightcolumn;
                }
                // widget Area 27 is After Footer Left Column
                $LayoutSetting['afterfooterleftcolumn'] = '';
                if (!empty($widget_data['afterfooterleftcolumn']['html'])) {
                    $LayoutSetting['afterfooterleftcolumn'] = $widget_data['afterfooterleftcolumn']['html']; //$afterfooterleftcolumn;
                }
                // widget Area 28 is Footer Sticky
                $LayoutSetting['footersticky'] = '';
                if (!empty($widget_data['footersticky']['html'])) {
                    $LayoutSetting['footersticky'] = $widget_data['footersticky']['html'];
                }
                // widget Area 29 is Secondary Footer
                $LayoutSetting['secondaryfooter'] = '';
                if (!empty($widget_data['secondaryfooter']['html'])) {
                    $LayoutSetting['secondaryfooter'] = $widget_data['secondaryfooter']['html']; //$secondaryfooter;
                }
                $LayoutSetting['afterheader'] = '';
                if (!empty($widget_data['afterheader']['html'])) {
                    $LayoutSetting['afterheader'] = $widget_data['afterheader']['html']; //$afterheader;
                }
                $LayoutSetting['afterfooterstart'] = '';
                if (!empty($widget_data['afterfooterstart']['html'])) {
                    $LayoutSetting['afterfooterstart'] = $widget_data['afterfooterstart']['html']; //$afterfooterstart;
                }
                $LayoutSetting['aftermenuallpage'] = '';
                if (!empty($widget_data['aftermenuallpage']['html'])) {
                    $LayoutSetting['aftermenuallpage'] = $widget_data['aftermenuallpage']['html']; //$afterfooterstart;
                }
                $LayoutSetting['beforefooterallpage'] = '';
                if (!empty($widget_data['beforefooterallpage']['html'])) {
                    $LayoutSetting['beforefooterallpage'] = $widget_data['beforefooterallpage']['html']; //$beforefooterallpage;
                }

                $memcached->set($memcached_key.'_commonFrontData_LayoutSetting2',$LayoutSetting,$time);
            }
            /* widget Head Tag Home Page Only End */
            $SiteSetting['theme_layout_setting'] = $LayoutSetting;
            $SiteSetting['locationTaxData'] = $this->locationTaxData(array('taxSetting' => $SiteSetting['taxSetting'], 'allotherSetting' => $SiteSetting['allotherSetting'], 'taxSettingLocationPopup' => $SiteSetting['taxSettingLocationPopup']));
            if($memcached->get($memcached_key.'_commonFrontData_Language')){
                $StoreImgSetting = $memcached->get($memcached_key.'_commonFrontData_StoreImgSetting');
                $Language = $memcached->get($memcached_key.'_commonFrontData_Language');
                $Country = $memcached->get($memcached_key.'_commonFrontData_Country');

            }else{
            $StoreImgSetting = json_decode($SiteSetting['storeLogoSetting'], true);
            if (!empty($StoreImgSetting)) {
                $params = array();
                if (!empty($StoreImgSetting['store_main_logo'])) {
                    $params['option_type'] = 'common';
                    $params['option_value'] = $StoreImgSetting['store_main_logo'];
                    $params['option_folder'] = 'storelogo';

                    $StoreImgSetting['store_main_logo'] = $GeneralService->getAWSUploadImages($params);
                }
                if (!empty($StoreImgSetting['store_sticky_logo'])) {
                    $params['option_type'] = 'common';
                    $params['option_value'] = $StoreImgSetting['store_sticky_logo'];
                    $params['option_folder'] = 'storelogo';

                    $StoreImgSetting['store_sticky_logo'] = $GeneralService->getAWSUploadImages($params);
                }
                if (!empty($StoreImgSetting['store_favicon'])) {
                    $params['option_type'] = 'common';
                    $params['option_value'] = $StoreImgSetting['store_favicon'];
                    $params['option_folder'] = 'storelogo';

                    $StoreImgSetting['store_favicon'] = $GeneralService->getAWSUploadImages($params);
                }
            }
            $Language = $em->getRepository(Language::class)->findBy(array('status' => 1, 'isDeleted' => 0));
            $Country = $em->getRepository('LocalizationBundle:Country')->findBy(array('status' => 1, 'isDeleted' => 0), array('countryName' => 'ASC'));

             $memcached->set($memcached_key.'_commonFrontData_StoreImgSetting',$StoreImgSetting,$time);
             $memcached->set($memcached_key.'_commonFrontData_Language',$Language,$time);
             $memcached->set($memcached_key.'_commonFrontData_Country',$Country,$time);
             
        }
            $themename = $SiteSetting['themename'];

            $defaultLangCode = $GeneralService->getDefaultLangCode();

            // GET TOP HEADER MENU BUILDER START
            $topbar_menu_id = $LayoutSetting['theme_setting']->general_option->topbar->menu_id->$defaultLangCode;
            if (isset($LayoutSetting['theme_setting']->general_option->topbar->menu_id->$langCode)
                && $LayoutSetting['theme_setting']->general_option->topbar->menu_id->$langCode != 0) {
                $topbar_menu_id = $LayoutSetting['theme_setting']->general_option->topbar->menu_id->$langCode;
            }
            if ($topbar_menu_id != '' && $topbar_menu_id != 0) {
                
                if($memcached->get($memcached_key.'_commonFrontData_menuData')){
                    $menuData = $memcached->get($memcached_key.'_commonFrontData_menuData');
            
                }else{
                    $condition_array = array('m.status' => 1, 'm.isDeleted' => 0, /* 'm.lang' => $lang_id, */
                        'm.id' => $topbar_menu_id);
                    $menuData = $GeneralService->selectDataByCondition($tableclass = 'AppearanceBundle:Menu', $allies = "m", $condition_array, $operator_array = array(), $data = 'm.id,m.menuItem,m.type,m.name', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);
                     $memcached->set($memcached_key.'_commonFrontData_menuData',$menuData,$time);
                }
                if (!empty($menuData)) {
                    $menuName = json_decode($menuData[0]['name'], true);
                    $menuData[0]['name'] = isset($menuName[$langCode]) && !empty($menuName[$langCode])
                        ? $menuName[$langCode] : $menuName[$defaultLangCode];
                    //$menuData[0]['menuItem'] = json_decode($menuData[0]['menuItem'], true);
                    // Menu Lang Changes -----
                    $menuItem = json_decode($menuData[0]['menuItem'], true);
                    $menuItemLang = $this->getMenuItemLang($menuItem, $this->get('session')->get('front_lang_code'));
                    $menuData[0]['menuItem'] = $menuItemLang;
                    $SecondaryMenu = $menuData[0];
                }
            }
            // GET TOP HEADER MENU BUILDER END
            // GET HEADER MENU BUILDER
            $header_menu_id = $LayoutSetting['theme_setting']->general_option->header->menu_id->$defaultLangCode;
            if (isset($LayoutSetting['theme_setting']->general_option->header->menu_id->$langCode)
                && $LayoutSetting['theme_setting']->general_option->header->menu_id->$langCode != 0) {
                $header_menu_id = $LayoutSetting['theme_setting']->general_option->header->menu_id->$langCode;
            }

            if ($header_menu_id != '' && $header_menu_id != 0) {
              
                if($memcached->get($memcached_key.'_commonFrontData_menuData1')){
                    $menuData = $memcached->get($memcached_key.'_commonFrontData_menuData1');
            
                }else{
                     $condition_array = array('m.status' => 1, 'm.isDeleted' => 0, /* 'm.lang' => $lang_id,  */
                        'm.id' => $header_menu_id);
                    $menuData = $GeneralService->selectDataByCondition($tableclass = 'AppearanceBundle:Menu', $allies = "m", $condition_array, $operator_array = array(), $data = 'm.id,m.menuItem,m.type', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);
                    $memcached->set($memcached_key.'_commonFrontData_menuData1',$menuData,$time);
                }
                if (!empty($menuData)) {
                    //$menuData[0]['menuItem'] = json_decode($menuData[0]['menuItem'], true);
                    // Menu Lang Changes -----
                    $menuItem = json_decode($menuData[0]['menuItem'], true);
                    $menuItemLang = $this->getMenuItemLang($menuItem, $this->get('session')->get('front_lang_code'));
                    $menuData[0]['menuItem'] = $menuItemLang;
                    $PrimaryMenu = $menuData[0];
                }
            }

            
            // GET MENU BUILDER
            //CATEGORY AVAILABLE DATA
            
            if($memcached->get($memcached_key.'_commonFrontData_CommonAvailableData')){
                $CommonAvailableData = $memcached->get($memcached_key.'_commonFrontData_CommonAvailableData');
            
            }else{
            $condition_array = array('c.status' => 1, 'c.isDeleted' => 0, 'cl.langRefId' => $CommonVariable['LangRefId']);
            $join_array = [];
            $join_array[0]['type'] = 'left';
            $join_array[0]['join_from'] = 'c.ctbRefId';
            $join_array[0]['join_to'] = 'cl.catRefId';
            $join_array[0]['join_allies'] = 'cl';
            $join_array[0]['join_class'] = 'CatalogueBundle:CategoryLang';
            $join_array[0]['join_condition'] = " ";
            $categoryData = $GeneralService->selectDataByCondition($tableclass = 'CatalogueBundle:Category', $allies = "c", $condition_array, $operator_array = array(), $data = 'c.id,c.slug', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false);
            $CategoryId = array();
            $CategorySlug = array();
            foreach ($categoryData as $category) {
                $CategoryId[] = $category['id'];
                $CategorySlug[$category['id']] = $category['slug'];
            }
            $CommonAvailableData['CategoryData'] = array('CategoryId' => $CategoryId, 'CategorySlug' => $CategorySlug);

            //COLLECTION CATEGORY AVAILABLE DATA

            //$condition_array = array('c.status' => 1, 'c.isDeleted' => 0, 'c.lang' => $lang_id);
            $condition_array = array('mcc.status' => 1, 'mcc.isDeleted' => 0, 'mccl.langRefId' => $CommonVariable['LangRefId']);
            $join_array = [];
            $join_array[0]['type'] = 'left';
            $join_array[0]['join_from'] = 'mcc.ctbRefId';
            $join_array[0]['join_to'] = 'mccl.collectionCatRefId';
            $join_array[0]['join_allies'] = 'mccl';
            $join_array[0]['join_class'] = 'CatalogueBundle:ManufacturerCollectionCategoryLang';
            $join_array[0]['join_condition'] = " ";
            $CollectionCategoryData = $GeneralService->selectDataByCondition($tableclass = 'CatalogueBundle:ManufacturerCollectionCategory', $allies = "mcc", $condition_array, $operator_array = array(), $data = 'mcc.id,mcc.slug', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false);
            $CollectionCategoryId = array();
            $CollectionCategorySlug = array();
            foreach ($CollectionCategoryData as $CollectionCategory) {
                $CollectionCategoryId[] = $CollectionCategory['id'];
                $CollectionCategorySlug[$CollectionCategory['id']] = $CollectionCategory['slug'];
            }
            $CommonAvailableData['CollectionCategoryData'] = array('CollectionCategoryId' => $CollectionCategoryId, 'CollectionCategorySlug' => $CollectionCategorySlug);

            //BRAND AVAILABLE DATA
            $condition_array = array('b.status' => 1, 'b.isDeleted' => 0, 'bl.langRefId' => $CommonVariable['LangRefId']);
            $join_array = [];
            $join_array[0]['type'] = 'left';
            $join_array[0]['join_from'] = 'b.ctbRefId';
            $join_array[0]['join_to'] = 'bl.brandRefId';
            $join_array[0]['join_allies'] = 'bl';
            $join_array[0]['join_class'] = 'CatalogueBundle:BrandLang';
            $join_array[0]['join_condition'] = " ";
            $brandData = $GeneralService->selectDataByCondition($tableclass = 'CatalogueBundle:Brand', $allies = "b", $condition_array, $operator_array = array(), $data = 'b.id,b.slug', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false);

            $BrandId = array();
            $BrandSlug = array();
            foreach ($brandData as $brand) {
                $BrandId[] = $brand['id'];
                $BrandSlug[$brand['id']] = $brand['slug'];
            }
            $CommonAvailableData['BrandData'] = array('BrandId' => $BrandId, 'BrandSlug' => $BrandSlug);

            //CMS PAGE AVAILABLE DATA
            //$condition_array = array('cp.status' => 1, 'cp.isDeleted' => 0, 'cp.langId' => $lang_id);
            $condition_array = array('cp.status' => 1, 'cp.isDeleted' => 0);
            $join_array = []; 
            $join_array[0]['type'] = 'left';
            $join_array[0]['join_from'] = 'cp.uuId';
            $join_array[0]['join_to'] = 'cpl.pageRefId';
            $join_array[0]['join_allies'] = 'cpl';
            $join_array[0]['join_class'] = 'CatalogueBundle:CmsPageLang';
            $join_array[0]['join_condition'] = " AND cpl.langRefId = '" . $CommonVariable['LangRefId'] . "'";
            $cmsData = $GeneralService->selectDataByCondition($tableclass = 'ContentcmsBundle:CmsPage', $allies = "cp", $condition_array, $operator_array = array(), $data = 'cp.id,cp.slug', $groupby = 'cp.id', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);

            $CmsPageId = array();
            $CmsPageSlug = array();
            foreach ($cmsData as $cms) {
                $CmsPageId[] = $cms['id'];
                $CmsPageSlug[$cms['id']] = $cms['slug'];
            }

            $CommonAvailableData['CmsPageData'] = array('CmsPageId' => $CmsPageId, 'CmsPageSlug' => $CmsPageSlug);
            $memcached->set($memcached_key.'_commonFrontData_CommonAvailableData',$CommonAvailableData,$time);
             
        }

            //LOGIN CUSTOMER DATA
            $CustomerId = $GeneralService->getCustomerSession();
            $UserId = $GeneralService->getUserSession();             
            $CustomerName = '';
            $CustomerPic = '';
            $CustomerEmail = '';
            $CustomerPhone = '';
            $CustomerFax = '';
            $UserName = '';
            $UserPic = '';
            $UserEmail = '';
            $UserPhone = '';            
            if (!empty($CustomerId))
            {                 
                $condition_array = array('c.status' => 1, 'c.isDeleted' => 0, 'c.id' => $CustomerId);
                $customerData = $GeneralService->selectDataByCondition($tableclass = 'SalesBundle:Customer', $allies = "c", $condition_array, $operator_array = array(), $data = 'c.id, c.firstName, c.lastName,c.middleName, c.profilePic, c.emailid, c.contact, c.fax', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);
                foreach ($customerData as $cust) {
                    $middleName = (!empty($cust['middleName']) ? $cust['middleName'] . ' ' : '');
                    $CustomerId = $cust['id'];
                    $CustomerName = $cust['firstName'] . ' ' . $middleName . $cust['lastName'];
                    $CustomerPic = $cust['profilePic'];
                    $CustomerEmail = $cust['emailid'];
                    $CustomerPhone = $cust['contact'];
                    $CustomerFax = $cust['fax'];
                }
                $CommonAvailableData['CustomerData'] = array('CustomerId' => $CustomerId, 'CustomerName' => $CustomerName, 'CustomerPic' => $CustomerPic, 'CustomerEmail' => $CustomerEmail, 'CustomerPhone' => $CustomerPhone, 'CustomerFax' => $CustomerFax);
            }
            elseif(!empty($UserId))
            {                
                $condition_array = array('u.status' => 1, 'u.isDeleted' => 0, 'u.id' => $UserId);
                $UserData = $GeneralService->selectDataByCondition($tableclass = 'SystemBundle:User', $allies = "u", $condition_array, $operator_array = array(), $data = 'u.id, u.name,u.profilePic, u.email,u.usertype,u.userformFieldValue', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);               
                foreach ($UserData as $User) {
                    //$middleName = (!empty($User['middleName']) ? $User['middleName'] . ' ' : '');
                    $UserId = $User['id'];
                    $UserName = $User['name'];
                    $UserPic = $User['profilePic'];
                    $UserEmail = $User['email'];
                    $UserPhone = $User['contact'];
                    $formfieldValues = json_decode($User['userformFieldValue']);
                    $phoneNumber = $formfieldValues->phone_number;                    
                }                                
                $CommonAvailableData['UserData'] = array('UserId' => $UserId, 'UserName' => $UserName, 'UserPic' => $UserPic, 'UserEmail' => $UserEmail, 'UserPhone' => $phoneNumber);

            }

            //CURRENCY AVAILABLE DATA
            $condition_array = array('c.status' => 1, 'c.isDeleted' => 0, 'c.conversionRate >' => 0);
            $currencyData = $GeneralService->selectDataByCondition($tableclass = 'LocalizationBundle:Currency', $allies = "c", $condition_array, $operator_array = array(), $data = 'c.id, c.name, c.symbol, c.isoCode, c.conversionRate', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false);
            $CommonAvailableData['CurrencyData'] = $currencyData;

            $ShoppingCartData = array();
            $CountCartItem = 0;
            $ShoppingCart = $GeneralService->getShoppingCart($SiteSetting);
            //echo "<pre>";print_r($ShoppingCart);exit;
            if (!empty($ShoppingCart)) {
                $ShoppingCartData['ShoppingCart'] = $ShoppingCart;
                $ShoppingCartData['CountCartItem'] = $CountCartItem = $ShoppingCart['totalitem'];
            }
            if (!empty($SiteSetting['webmasterSetting'])) {
                $SiteSetting['webmasterSettingDecode'] = json_decode($SiteSetting['webmasterSetting'], true);
            }
            $SiteSetting['landingipage_html'] = '';
            if (!empty($SiteSetting['is_landingipage'])) {
                $marker_image = '';
                $landing_page_template = 'landingpagepopup_custommap.html.twig';
                $landingPageSetting = $SiteSetting['landingPageSetting'];
                $address_data = array();
                if ($SiteSetting['landingPageSetting']->map_type == 'googlemap') {
                    $landing_page_template = 'landingpagepopup_googlemap.html.twig';
                    $google_maptype_address_data = json_decode($landingPageSetting->address_data, true);

                    foreach ($google_maptype_address_data as $val) {
                        $latitude = $val['lat'];
                        $longitude = $val['lng'];
                        $latlong = $latitude . ',' . $longitude;
                        $address_data[] = array('name' => $val['title'], 'address' => $val['address'], 'latitude' => $latitude, 'longitude' => $longitude, 'latlong' => $latlong, 'url' => $val['url']);
                    }
                    $address_data = json_encode($address_data);
                }
                $googlelocation_key = '';
                if (!empty($SiteSetting['landingPageSetting']->marker_image)) {
                    $marker_image = $SiteSetting['landingPageSetting']->marker_image;
                }
                $googlelocation_key = $SiteSetting['webmasterSettingDecode']['google_apikey'];

                $Template = 'ContentcmsBundle:' . $themename . ':' . $landing_page_template;
                if (!$this->get('templating')->exists($Template)) {
                    $Template = 'ContentcmsBundle:default:' . $landing_page_template;
                }
                $landingipage_html = $this->renderView($Template, array('landingPageSetting' => $landingPageSetting, 'themename' => $themename, 'is_landingipage' => $SiteSetting['is_landingipage'], 'map_type' => $SiteSetting['landingPageSetting']->map_type, 'googlelocation_key' => $googlelocation_key, 'address_data' => $address_data, 'marker_image' => $marker_image));
                $SiteSetting['landingipage_html'] = $landingipage_html;
            }
            $data = array($SiteSetting, $StoreImgSetting, $Language, $PrimaryMenu, $SecondaryMenu, $Country, $GeneralService, $GeneralFunction, $LayoutSetting, $socialLinkArray, $CommonVariable, $CommonAvailableData, $ShoppingCartData);
           
          

        $this->commonData = $data;
        return $this->commonData;
    }

    /**
     * Get Menu Item based on current language selection
     * @param array $menuItem
     * @param string $langCode
     * @return array
     */
    public function getMenuItemLang($menuItem, $langCode) {
        foreach ($menuItem as $key => $value) {
            if (array_key_exists('navigation_label', $value)) {
                $navigation_label = "";
                if (is_array($value['navigation_label']) && array_key_exists($langCode, $value['navigation_label'])) {
                    $navigation_label = $value['navigation_label'][$langCode];
                }
                $menuItem[$key]['navigation_label'] = $navigation_label;
            }

            if (array_key_exists('special_main_title', $value)) {
                $special_main_title = "";
                if (is_array($value['special_main_title']) && array_key_exists($langCode, $value['special_main_title'])) {
                    $special_main_title = $value['special_main_title'][$langCode];
                }
                $menuItem[$key]['special_main_title'] = $special_main_title;
            }

            if (array_key_exists('special_sub_title', $value)) {
                $special_sub_title = "";
                if (is_array($value['special_sub_title']) && array_key_exists($langCode, $value['special_sub_title'])) {
                    $special_sub_title = $value['special_sub_title'][$langCode];
                }
                $menuItem[$key]['special_sub_title'] = $special_sub_title;
            }

            if (array_key_exists('special_description', $value)) {
                $special_description = "";
                if (is_array($value['special_description']) && array_key_exists($langCode, $value['special_description'])) {
                    $special_description = $value['special_description'][$langCode];
                }
                $menuItem[$key]['special_description'] = $special_description;
            }

            if (array_key_exists('special_image', $value)) {
                $special_image = "";
                if (is_array($value['special_image']) && array_key_exists($langCode, $value['special_image'])) {
                    $special_image = $value['special_image'][$langCode];
                }
                $menuItem[$key]['special_image'] = $special_image;
            }

            if (array_key_exists('menu_name', $value)) {
                $menu_name = "";
                if (is_array($value['menu_name']) && array_key_exists($langCode, $value['menu_name'])) {
                    $menu_name = $value['menu_name'][$langCode];
                }
                $menuItem[$key]['menu_name'] = $menu_name;
            }

            if (array_key_exists('menu_description', $value)) {
                $menu_description = "";
                if (is_array($value['menu_description']) && array_key_exists($langCode, $value['menu_description'])) {
                    $menu_description = $value['menu_description'][$langCode];
                }
                $menuItem[$key]['menu_description'] = $menu_description;
            }

            if (array_key_exists('children', $value)) {
                if (is_array($value['children']) && count($value['children']) > 0) {
                    $menuItem[$key]['children'] = $this->getRecursiveMenuItemLang($value['children'], $langCode);
                } else {
                    $menuItem[$key]['children'] = "";
                }
            }
        }

        return $menuItem;
    }

    /**
     * Get Recursive Menu Item based on current language selection
     * @param array $menuItem
     * @param string $langCode
     * @return array
     */
    public function getRecursiveMenuItemLang($menuItem, $langCode) {
        foreach ($menuItem as $key => $value) {
            if (array_key_exists('navigation_label', $value)) {
                $navigation_label = "";
                if (is_array($value['navigation_label']) && array_key_exists($langCode, $value['navigation_label'])) {
                    $navigation_label = $value['navigation_label'][$langCode];
                }
                $menuItem[$key]['navigation_label'] = $navigation_label;
            }

            if (array_key_exists('special_main_title', $value)) {
                $special_main_title = "";
                if (is_array($value['special_main_title']) && array_key_exists($langCode, $value['special_main_title'])) {
                    $special_main_title = $value['special_main_title'][$langCode];
                }
                $menuItem[$key]['special_main_title'] = $special_main_title;
            }

            if (array_key_exists('special_sub_title', $value)) {
                $special_sub_title = "";
                if (is_array($value['special_sub_title']) && array_key_exists($langCode, $value['special_sub_title'])) {
                    $special_sub_title = $value['special_sub_title'][$langCode];
                }
                $menuItem[$key]['special_sub_title'] = $special_sub_title;
            }

            if (array_key_exists('special_description', $value)) {
                $special_description = "";
                if (is_array($value['special_description']) && array_key_exists($langCode, $value['special_description'])) {
                    $special_description = $value['special_description'][$langCode];
                }
                $menuItem[$key]['special_description'] = $special_description;
            }

            if (array_key_exists('special_image', $value)) {
                $special_image = "";
                if (is_array($value['special_image']) && array_key_exists($langCode, $value['special_image'])) {
                    $special_image = $value['special_image'][$langCode];
                }
                $menuItem[$key]['special_image'] = $special_image;
            }

            if (array_key_exists('menu_name', $value)) {
                $menu_name = "";
                if (is_array($value['menu_name']) && array_key_exists($langCode, $value['menu_name'])) {
                    $menu_name = $value['menu_name'][$langCode];
                }
                $menuItem[$key]['menu_name'] = $menu_name;
            }

            if (array_key_exists('menu_description', $value)) {
                $menu_description = "";
                if (is_array($value['menu_description']) && array_key_exists($langCode, $value['menu_description'])) {
                    $menu_description = $value['menu_description'][$langCode];
                }
                $menuItem[$key]['menu_description'] = $menu_description;
            }

            if (array_key_exists('children', $value)) {
                if (is_array($value['children']) && count($value['children']) > 0) {
                    $menuItem[$key]['children'] = $this->getRecursiveMenuItemLang($value['children'], $langCode);
                } else {
                    $menuItem[$key]['children'] = "";
                }
            }
        }

        return $menuItem;
    }

    public function _headerLayoutAction($SiteSetting = array(), $StoreImgSetting = array(), $LayoutSetting = array(), $CommonVariable = array(), $CommonAvailableData = array(), $UserGreetings = array())
    {
        $themename      = $SiteSetting['themename'];
        $topbarTemplate = $themename . '/header.html.twig';
        if (!$this->get('templating')->exists($topbarTemplate)) {
            $topbarTemplate = 'default/header.html.twig';
        }
        return $this->render($topbarTemplate, array('SiteSetting' => $SiteSetting, 'StoreImgSetting' => $StoreImgSetting, 'LayoutSetting' => $LayoutSetting, 'CommonVariable' => $CommonVariable, 'CommonAvailableData' => $CommonAvailableData, 'UserGreetings' => $UserGreetings));
    }

    public function recursiveDefaultSimpleMenu($menu_array = array(), $recursion = 1)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if ($recursion == 1) {
            $is_multilevel = 'multi-level';
        } elseif ($recursion == 2) {
            $is_multilevel = 'second-level';
        } elseif ($recursion == 3) {
            $is_multilevel = 'third-level';
        } elseif ($recursion == 4) {
            $is_multilevel = 'fourth-level';
        } elseif ($recursion == 5) {
            $is_multilevel = 'fifth-level';
        }
        $pcMenu = '';
        $pcMenu .= '<ul class="dropdown-menu ' . $is_multilevel . ' ">';
        foreach ($menu_array as $children) {
            $no_of_subsubmenu = 0;
            if (!empty($children['children'])) {
                $no_of_subsubmenu = count($children['children']);
            }
            $dropdown_submenu = '';
            $data_toggle      = '';
            $c_arrow          = '';
            if ($no_of_subsubmenu == 0) {
                $dropdown_submenu = '';
                $data_toggle      = '';
                $c_arrow          = '';
                $dropdown_toggle  = '';
            } else {
                $dropdown_submenu = 'dropdown-submenu';
                $data_toggle      = 'data-toggle="dropdown"';
                $c_arrow          = '<span class="c-arrow"></span>';
                $dropdown_toggle  = 'class="dropdown-toggle"';
            }
            $pcMenu .= '<li class="' . $dropdown_submenu . '"> ';
            if ($children['table'] == 'custom_link') {
                if ($children['menu_url'] == 'http://' || $children['menu_url'] == 'https://' || $children['menu_url'] == '') {
                    $pcMenu .= '<a ' . $dropdown_toggle . ' href="javascript:void(0);" title="' . $children['menu_name'] . '" ' . $data_toggle . '>' . $children['menu_name'] . $c_arrow . '</a>';
                } else {
                    $pcMenu .= '<a ' . $dropdown_toggle . ' href="' . $children['menu_url'] . '" title="' . $children['menu_name'] . '" ' . $data_toggle . '>' . $children['menu_name'] . $c_arrow . '</a>';
                }
            } elseif ($children['table'] == 'cms_page') {
                $cmsData = $em->getRepository(CmsPage::class)->findOneBy(array('id' => $children['table_id'], 'status' => 1, 'isDeleted' => 0));
                if (!empty($cmsData)) {
                    $pcMenu .= '<a ' . $dropdown_toggle . ' href="' . $BaseUrl . 'page/' . $cmsData->getSlug() . '" title="' . $children['original_name'] . '" ' . $data_toggle . '>' . $children['navigation_label'] . $c_arrow . '</a>';
                }
            } elseif ($children['table'] == 'category') {
                $categoryData = $em->getRepository(Category::class)->findOneBy(array('id' => $children['table_id'], 'status' => 1, 'isDeleted' => 0));
                if (!empty($categoryData)) {
                    $pcMenu .= '<a ' . $dropdown_toggle . ' href="' . $BaseUrl . 'c/' . $categoryData->getSlug() . '" title="' . $children['original_name'] . '" ' . $data_toggle . '>' . $children['navigation_label'] . $c_arrow . '</a>';
                }
            } elseif ($children['table'] == 'brand') {
                $brandData = $em->getRepository(Brand::class)->findOneBy(array('id' => $children['table_id'], 'status' => 1, 'isDeleted' => 0));
                if (!empty($brandData)) {
                    $pcMenu .= '<a ' . $dropdown_toggle . ' href="' . $BaseUrl . 'b/' . $brandData->getSlug() . '" title="' . $children['original_name'] . '" ' . $data_toggle . '>' . $children['navigation_label'] . $c_arrow . '</a>';
                }
            }
            if ($no_of_subsubmenu > 0) {
                $pcMenu .= $this->recursiveDefaultSimpleMenu($children['children'], $recursion + 1);
            }
            $pcMenu .= '</li> ';
        }
        $pcMenu .= '</ul>';
        return $pcMenu;
    }

    public function sendEmail($toData, $emailData, $fromData, $ccbccData = array(), $attachments = array())
    {
        $GeneralService = $this->get(GeneralService::class);
        $smtpData       = $GeneralService->getStoreMainConfig()['smtpSetting'];
        $allotherData   = $GeneralService->getStoreMainConfig()['allotherSetting'];
        $flag           = false;
        if (!empty($smtpData)) {
            $smtpSettingData = json_decode($smtpData);
            if (!empty($smtpSettingData)) {
                // Create the Transport
                $transport = (new \Swift_SmtpTransport($smtpSettingData->smtp_host, $smtpSettingData->smtp_port, $smtpSettingData->smtp_encryption))
                    ->setUsername($smtpSettingData->smtp_username)
                    ->setPassword($smtpSettingData->smtp_password);
            }
        }
        if(empty($ccbccData)){
            if (!empty($allotherData)) {
                $allotherSettingData = json_decode($allotherData);
                if (!isset($ccbccData['bcc']) && !empty($allotherSettingData->contact_bcc_email)) {
                    $bcc_email        = $allotherSettingData->contact_bcc_email;
                    $ccbccData['bcc'] = explode(",", $bcc_email);
                }
            }
        }
        if (!empty($smtpSettingData)) {
            // Create the Mailer using your created Transport
            $mailer = new \Swift_Mailer($transport);
            // Create a message
            $message = (new \Swift_Message($emailData['subject']));
            $message->setContentType("text/html");
            $message->setFrom([$fromData['email'] => $fromData['name']])
            //->setTo([$toData])
                ->setBody($emailData['body']);
            if (!empty($toData)) {
                $toData = explode(",", $toData);
                for ($c = 0; $c < count($toData); $c++) {
                    $message->addTo($toData[$c]);
                }
            }

            if (!empty($ccbccData)) {
                if (!empty($ccbccData['cc'])) {
                    $message->setCc($ccbccData['cc']);
                }
                if (!empty($ccbccData['bcc'])) {
                    $message->setBcc($ccbccData['bcc']);
                }
            }
            if (!empty($attachments)) {
                foreach ($attachments as $attachment) {
                    $attachFile = $attachment['file_path'] . $attachment['file_name'];
                    $message->attach(
                        \Swift_Attachment::fromPath($attachFile)->setFilename($attachment['file_name'], 'application/pdf')
                    );
                }
            }
            // Send the message
            try {
                $result = $mailer->send($message);
            } catch (\Swift_TransportException $e) {
                return $e->getMessage();
            }

            if (!empty($result)) {
                $flag = true;
            }
        } else {
            // Create the Mailer using your created Transport
            $mailer = new \Swift_Mailer(new \Swift_SmtpTransport());
            // Create a message
            $message = (new \Swift_Message($emailData['subject']));
            $message->setContentType("text/html");
            $message->setFrom([$fromData['email'] => $fromData['name']])
            //->setTo([$toData])
                ->setBody($emailData['body']);
            if (!empty($toData)) {
                $toData = explode(",", $toData);
                for ($c = 0; $c < count($toData); $c++) {
                    $message->addTo($toData[$c]);
                }
            }
            if (!empty($ccbccData)) {
                if (!empty($ccbccData['cc'])) {
                    $message->setCc($ccbccData['cc']);
                }
                if (!empty($ccbccData['bcc'])) {
                    $message->setBcc($ccbccData['bcc']);
                }
            }
            if (!empty($attachments)) {
                foreach ($attachments as $attachment) {
                    $attachFile = $attachment['file_path'] . $attachment['file_name'];
                    $message->attach(
                        \Swift_Attachment::fromPath($attachFile)->setFilename($attachment['file_name'], 'application/pdf')
                    );
                }
            }
            // Send the message
            try {
                $result = $mailer->send($message);
            } catch (\Swift_TransportException $e) {
                return $e->getMessage();
            }

            if (!empty($result)) {
                $flag = true;
            }
        }
        return $flag;
    }

    /* Get LanguageNamebyId */

    public function getLanguageNamebyId($id = "")
    {
        $langname = "";
        $langname = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneById($id);
        if (!empty($langname)) {
            $langname = $langname->getName();
        }
        return $langname;
    }
    
    public function getLanguageNamebyRefId($refId = "")
    {
        $langname = "";
        $langname = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(['ctbRefId' => $refId]);
        if (!empty($langname)) {
            $langname = $langname->getName();
        }
        return $langname;
    }

    /* Get LanguageNamebyCode */

    public function getLanguageNamebyCode($id = "")
    {
        $langname = "";
        $langname = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneByCode($id);
        if (!empty($langname)) {
            $langname = $langname->getName();
        }
        return $langname;
    }

    /* getPaymentMethod function used to get PaymentMethod by OrderId as param */

    public function getPaymentMethod($orderid = 0)
    {
        if (!empty($orderid)) {
            $orderPayment  = $this->getDoctrine()->getRepository('SalesBundle:OrderPayment')->findByOrder($orderid);
            $paymentMethod = $orderPayment[0]->getPayment()->getName();
            return $paymentMethod;
        }
        return false;
    }

    public function getStateAbbrById($stateid = '', $lnCode = '')
    {
        if (!empty($stateid)) {
            if (is_numeric($stateid)) {
                $Data = $this->getDoctrine()->getRepository('LocalizationBundle:State')->find($stateid);
                if (!empty($Data)) {
                    if (!empty($lnCode)) {
                        $stateCode     = $Data->getIsoCode();
                    } else {
                        $stateCode = $Data->getIsoCode();
                    }
                    return $stateCode;
                }
            }
        }
        return $stateid;
    }

    public function getStateNameById($stateid = '', $lnCode = '')
    {
        if (!empty($stateid)) {
            if (is_numeric($stateid)) {
                $Data = $this->getDoctrine()->getRepository('LocalizationBundle:State')->find($stateid);
                if (!empty($Data)) {
                    $stateName = $Data->getStateName();
                    if (!empty($lnCode)) {
                        $stateLanguage = json_decode($Data->getStateLanguage());
                        $stateName     = $this->getLocationListLang($lnCode, $stateLanguage, $Data->getStateName());
                    }
                    return $stateName;
                }
            }
        }
        return $stateid;
    }

    public function getCityNameById($cityid = '', $lnCode = '')
    {
        if (!empty($cityid)) {
            if (is_numeric($cityid)) {
                $Data = $this->getDoctrine()->getRepository('LocalizationBundle:Cities')->find($cityid);
                if (!empty($Data)) {
                    $cityName = $Data->getCityName();
                    if (!empty($lnCode)) {
                        $cityLanguage = json_decode($Data->getCityLanguage());
                        $cityName     = $this->getLocationListLang($lnCode, $cityLanguage, $Data->getCityName());
                    }
                    return $cityName;
                }
            }
        }
        return $cityid;
    }

    public function getCountryNameById($countryid = '', $lnCode = '')
    {
        if (!empty($countryid)) {
            if (is_numeric($countryid)) {
                $Data        = $this->getDoctrine()->getRepository('LocalizationBundle:Country')->find($countryid);
                $countryName = $Data->getCountryName();
                if (!empty($lnCode)) {
                    $countryLanguage = json_decode($Data->getCountryLanguage());
                    $countryName     = $this->getLocationListLang($lnCode, $countryLanguage, $Data->getCountryName());
                }
                return $countryName;
            }
        }
        return $countryid;
    }

    public function getCurrencyData($table = '', $where = '')
    {
        $id_name_pair = array();
        $em           = $this->getDoctrine()->getManager();
        $sql          = "SELECT id,name,symbol FROM $table WHERE is_deleted='0' AND status=1 $where  ORDER BY name ASC";
        $statement    = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        if (!empty($result)) {
            foreach ($result as $val) {
                $id_name_pair[] = array('id' => $val['id'], 'name' => $val['name'], 'symbol' => $val['symbol']);
            }
        }
        return $id_name_pair;
    }

    public function getState($where = '', $langCode = '')
    {
        $id_name_pair = array();
        $em           = $this->getDoctrine()->getManager();
        if ($where) {
            $sql = "SELECT id,state_name,state_language,iso_code FROM state WHERE is_deleted='0' AND status=1  AND country_id=$where  ORDER BY state_name ASC";
        } else {
            $sql = "SELECT id,state_name,state_language,iso_code FROM state WHERE is_deleted='0' AND status=1  $where  ORDER BY state_name ASC";
        }
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        if (!empty($result)) {
            foreach ($result as $val) {
                if (!empty($langCode)) {
                    $stateLanguage = json_decode($val['state_language']);
                    $stateName     = $this->getLocationListLang($langCode, $stateLanguage, $val['state_name']);
                }
                $stateName      = $val['state_name'];
                $id_name_pair[] = array('id' => $val['id'], 'langCode' => $val['state_language'], 'name' => $stateName, 'iso_code' => $val['iso_code']);
            }
        }
        return $id_name_pair;
    }

    public function getCountry($where = '', $langCode = '')
    {
        $id_name_pair = array();
        $em           = $this->getDoctrine()->getManager();
        $sql          = "SELECT id,country_name,country_language FROM country WHERE is_deleted='0' AND status=1 $where  ORDER BY country_name ASC";
        $statement    = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        if (!empty($result)) {
            foreach ($result as $val) {
                $countryLanguage = json_decode($val['country_language']);
                $countryName     = $this->getLocationListLang($langCode, $countryLanguage, $val['country_name']);
                $id_name_pair[]  = array('id' => $val['id'], 'name' => $countryName);
            }
        }
        return $id_name_pair;
    }

    //Get City Name & Id
    public function getCity($where = '', $langCode = '')
    {
        $id_name_pair = array();
        $em           = $this->getDoctrine()->getManager();
        if ($where) {
            $sql = "SELECT id,city_name ,city_language FROM cities WHERE is_deleted='0' AND status=1  AND state_id=$where  ORDER BY city_name ASC";
        } else {
            $sql = "SELECT id,city_name,city_language FROM cities WHERE is_deleted='0' AND status=1  $where  ORDER BY city_name ASC";
        }

        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        if (!empty($result)) {
            foreach ($result as $val) {
                if (!empty($langCode)) {
                    $cityLanguage = json_decode($val['city_language']);
                    $cityName     = $this->getLocationListLang($langCode, $cityLanguage, $val['city_name']);
                }
                $id_name_pair[] = array('id' => $val['id'], 'name' => $cityName);
            }
        }
        return $id_name_pair;
    }

    public function getCustomerCounterData($customerId = 0, $userTypeSlug = '')
    {
        $counterData           = array('addresses', 'orders', 'wishlist','emi_orders');
        $addresses             = 0;
        $orders                = 0;
        $wishlist              = 0;
        $emi_orders            = 0;
        $dealers               = 0;
        $em                    = $this->getDoctrine()->getManager();
        $CustomerAddressesData = $this->getDoctrine()->getRepository('SalesBundle:CustomerAddress')->findBy(array('customer' => $customerId, 'isDeleted' => 0, 'status' => 1));
        if (!empty($CustomerAddressesData)) {
            $addresses = count($CustomerAddressesData);
        }

        if ($userTypeSlug && $userTypeSlug == 'sales-representative') {
            $orderData = $this->getDoctrine()->getRepository('SalesBundle:OrderSalesRepresentative')->findBy(array('customer' => $customerId));
        } else {
            $orderData = $this->getDoctrine()->getRepository('SalesBundle:Orders')->findBy(array('customer' => $customerId, 'isDeleted' => 0, 'status' => 1));
        }
        if (!empty($orderData)) {
            $orders = count($orderData);
        }
        $wishListData = $this->getDoctrine()->getRepository('CatalogueBundle:Wishlist')->findBy(array('customerId' => $customerId, 'isDeleted' => 0, 'status' => 1));
        if (!empty($wishListData)) {
            $wishlist = count($wishListData);
        }
        $sql = "SELECT id,order_number,emi_details FROM orders WHERE customer_id=" . $customerId . " AND remaining_number_emi > 0 AND payment_status = 0 ORDER BY id DESC";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $emiOrdersListData = $statement->fetchAll();        
        if (!empty($emiOrdersListData)) {
            $emi_orders = count($emiOrdersListData);
        }
        if($userTypeSlug && $userTypeSlug == 'region') {
            $dealerList = $this->getDoctrine()->getRepository('SalesBundle:Customer')->findByManagerRegionId($customerId);
            $dealers = count($dealerList);
        }
        return $counterData = array('addresses' => $addresses, 'orders' => $orders, 'wishlist' => $wishlist, 'emi_orders' => $emi_orders, 'dealers' => $dealers );
    }

    public function getBestSellerData($ShownumberOfProudcts = 4)
    {
        $em             = $this->getDoctrine()->getManager();
        $bestseller     = array();
        $top_products   = array();
        $GeneralService = $this->get(GeneralService::class);
        $lang_id        = $this->get('session')->get('front_lang_id');
        $lang_ref_id        = $this->get('session')->get('front_lang_ref_id');
        
        if (empty($lang_id)) {
            $SiteSetting = $GeneralService->getStoreMainConfig();
            $lang_id     = $SiteSetting['langId'];
            $lang_ref_id     = $SiteSetting['langRefId'];
        }
        
        $sql = "SELECT p.id as productid , pl.name,pl.short_description as description, p.main_image as media,"
                . " p.slug, sum(od.product_qty) as qty,cl.name as category_name,c.slug as category_slug FROM product p"
                . " INNER JOIN product_lang as pl ON p.ctb_ref_id = pl.product_ref_id "
                . " INNER JOIN order_details od ON p.id = od.product_id"
                . " INNER JOIN orders o ON o.id=od.order_id"
                . " INNER JOIN order_payment op ON o.id=op.order_id"
                . " INNER JOIN product_category pc ON p.id=pc.product_id"
                . " INNER JOIN category c ON c.id=pc.category_id"
                . " INNER JOIN category_lang as cl ON c.ctb_ref_id=cl.cat_ref_id "
                . " WHERE op.payment_status=1 AND o.status=1 "
                . " AND cl.lang_ref_id = '".$lang_ref_id."' "
                //. " AND p.lang_id=$lang_id "
                . " AND pl.lang_ref_id = '".$lang_ref_id."' "
                . " GROUP BY c.id ORDER BY o.id,qty DESC"
                . " LIMIT $ShownumberOfProudcts";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $bestseller = $result;
        }
        return $bestseller;
    }

    public function getCustomerReviewData($ShownumberOfReviews = 5)
    {
        $em               = $this->getDoctrine()->getManager();
        $customer_reviews = array();
        $sql              = "SELECT rr.* FROM review_rating rr
                INNER JOIN orders o ON o.id=rr.order_id
                WHERE rr.status=1 AND rr.is_deleted=0
                ORDER BY o.id DESC
                LIMIT $ShownumberOfReviews";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $customer_reviews = $result;
        }
        return $customer_reviews;
    }

    public function getTestimonialData($ShownumberOfRecords = 5)
    {
        $em             = $this->getDoctrine()->getManager();
        $lang_id        = $this->get('session')->get('front_lang_id');
        $GeneralService = $this->get(GeneralService::class);
        if (empty($lang_id)) {
            $SiteSetting = $GeneralService->getStoreMainConfig();
            $lang_id     = $SiteSetting['langId'];
        }
        $customer_reviews = array();
        $sql              = "SELECT t.* FROM testimonial t
                WHERE t.status=1 AND t.is_deleted=0 AND t.lang_id=$lang_id
                ORDER BY t.id DESC
                LIMIT $ShownumberOfRecords";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $customer_reviews = $result;
        }
        return $customer_reviews;
    }

    public function getTopSlider($ShownumberOfRecords = 5)
    {
        $gallery_data = $this->getDoctrine()->getRepository('ContentcmsBundle:MediaGallery')->findBy(array('mediaType' => 'IMAGE', 'isDeleted' => 0, 'status' => 1), array('sortOrder' => 'ASC'));
        return $gallery_data;
    }

    public function getFeaturedProduct($ShownumberOfRecords = 4)
    {
        $featured_product_data = array();
        $lang_id               = $this->get('session')->get('front_lang_id');
        $lang_ref_id        = $this->get('session')->get('front_lang_ref_id');
        $GeneralService        = $this->get(GeneralService::class);
        if (empty($lang_id)) {
            $SiteSetting = $GeneralService->getStoreMainConfig();
            $lang_id     = $SiteSetting['langId'];
            $lang_ref_id     = $SiteSetting['langRefId'];
        }
        
        $em  = $this->getDoctrine()->getManager();
        // Changed by Gayatri on 18.07.2023 due to changes in Marking Module.
        $sql = "SELECT p.*,pl.* FROM product p "
                . " INNER JOIN product_lang as pl ON p.ctb_ref_id = pl.product_ref_id "
                . " INNER JOIN product_marking pm ON p.id = pm.product_id "
                . " INNER JOIN marking m ON m.id = pm.marking_id  "
                . " INNER JOIN marking_lang ml on ml.uuId = m.uuId "
                . " WHERE p.status = 1 AND p.is_deleted = 0 AND ml.lang_ref_id = $lang_id "
                . " AND pl.lang_ref_id = '".$lang_ref_id."' "
                . " AND ml.marking_code='FTRD' "
                . " GROUP by p.id ORDER BY p.id DESC LIMIT $ShownumberOfRecords ";
        // End by Gayatri
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $featured_product_data = $result;
        }
        return $featured_product_data;
    }

    public function getCommaseparatedEnabledLanguages()
    {
        $languages              = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findBy(array('status' => 1, 'isDeleted' => 0));
        $commasepareted_lang_id = array();
        if (!empty($languages)) {
            foreach ($languages as $language) {
                $commasepareted_lang_id[] = $language->getId();
            }
            if (!empty($commasepareted_lang_id)) {
                $commasepareted_lang_id = implode(',', $commasepareted_lang_id);
            }
        }
        return $commasepareted_lang_id;
    }

    public function getCommaseparatedEnabledBlogCategory()
    {
        $blogs                    = $this->getDoctrine()->getRepository('ContentcmsBundle:BlogCategory')->findBy(array('status' => 1, 'isDeleted' => 0));
        $commasepareted_bloCat_id = array();
        if (!empty($blogs)) {
            foreach ($blogs as $blog) {
                $commasepareted_bloCat_id[] = $blog->getId();
            }
            if (!empty($commasepareted_bloCat_id)) {
                $commasepareted_bloCat_id = implode(',', $commasepareted_bloCat_id);
            }
        }
        return $commasepareted_bloCat_id;
    }

    public function getSubcateoryCommaseparatedIds($categoryId = 0, $lang_id = 1)
    {
        $commaseparated_category_id = '';
        if (!empty($categoryId)) {
            /*$data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $commaseparated_category_id .= $value->getId() . ',';
                }
                if (!empty($commaseparated_category_id)) {
                    $commaseparated_category_id = trim($commaseparated_category_id, ',');
                }
            }*/
            $GeneralService = $this->get(GeneralService::class);
            $langRefId = $GeneralService->getLangRefIdById($lang_id);
            $em = $this->getDoctrine()->getManager();
            $sql = "SELECT c.id FROM category c "
                    . " INNER JOIN category_lang as cl ON c.ctb_ref_id=cl.cat_ref_id "
                    . " WHERE c.parent_id = $categoryId "
                    . " AND cl.lang_ref_id = '" . $langRefId . "' "
                    . " AND c.status=1 and c.is_deleted=0 "
                    . " ORDER BY c.sort_order ASC";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            
            if (!empty($result)) {
                foreach ($result as $key => $value) {
                   $commaseparated_category_id .= $value['id'] . ',';     
                }
                if (!empty($commaseparated_category_id)) {
                    $commaseparated_category_id = trim($commaseparated_category_id, ',');
                }
            }
        }
        return $commaseparated_category_id;
    }

    public function getBrandBasedCategories($brandId = 0, $lang_id = 1, $offset = 0, $limit = 16)
    {
        $category_data = array();
        $em            = $this->getDoctrine()->getManager();
        /*$sql           = "SELECT c.* FROM category c WHERE id IN
            ( SELECT pc.category_id FROM product_category pc WHERE pc.product_id IN (SELECT p.id FROM product p INNER JOIN brand b ON p.brand_id=b.id WHERE p.lang_id=" . $lang_id . " and p.brand_id = " . $brandId . " and p.status='1' and p.is_deleted='0')) and c.status='1' and c.is_deleted='0' ORDER BY c.sort_order, c.name, c.id ASC LIMIT $offset,$limit ";*/
        $GeneralService = $this->get(GeneralService::class);
        $langRefId = $GeneralService->getLangRefIdById($lang_id);
        $sql = "SELECT c.*,cl.name,cl.description,cl.meta_title,cl.meta_description,cl.meta_keyword ,cl.ctb_master_data 
            FROM category c 
            INNER JOIN category_lang as cl ON c.ctb_ref_id=cl.cat_ref_id 
            WHERE c.id IN
            ( SELECT pc.category_id FROM product_category pc 
                WHERE pc.product_id IN (
                    SELECT p.id FROM product p 
                    INNER JOIN product_lang as pl ON p.ctb_ref_id=pl.product_ref_id 
                    INNER JOIN brand b ON p.brand_id= b.id 
                    WHERE pl.lang_ref_id= '" . $langRefId . "'  
                    AND p.brand_id = " . $brandId . " 
                    AND p.status='1' and p.is_deleted='0'
            )) 
            AND c.status='1' and c.is_deleted='0' AND cl.lang_ref_id= '" . $langRefId . "' 
             ORDER BY c.sort_order, cl.name, c.id ASC LIMIT $offset,$limit ";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            foreach ($result as $key => $value) {
                $number_products = $this->getTotalCategoryProductCount($value['id'], $brandId);
                $langId = $GeneralService->getLangObjByUUID($value['lang_ref_id'])->getId();
                $category_data[] = array(
                    'id' => $value['id'], 
                    'ctb_ref_id' => $value['ctb_ref_id'], 
                    'ctb_master_data' => $value['ctb_master_data'], 
                    'lang_id' => $langId, 
                    'lang_ref_id' => $value['lang_ref_id'], 
                    'parent_id' => $value['parent_id'], 
                    'name' => $value['name'], 'slug' => $value['slug'], 
                    'description' => $value['description'], 'media' => $value['media'], 
                    'category_template' => $value['category_template'], 
                    'gallery_id' => $value['gallery_id'], 'ads' => $value['ads'], 
                    'ads_link' => $value['ads_link'], 
                    'target' => $value['target'], 
                    'show_style' => $value['show_style'], 
                    'preferred_product' => $value['id'], 
                    'bottom_content' => $value['id'], 
                    'meta_title' => $value['meta_title'], 
                    'meta_description' => $value['meta_description'], 
                    'meta_keyword' => $value['meta_keyword'], 
                    'level_depth' => $value['level_depth'], 
                    'is_default' => $value['is_default'], 'sort_order' => $value['sort_order'], 
                    'place_from' => $value['place_from'], 'status' => $value['status'], 
                    'is_deleted' => $value['is_deleted'], 'created_date' => $value['created_date'], 
                    'updated_date' => $value['updated_date'], 'totalproduct' => $number_products);
            }
        }

        return $category_data;
    }

    public function getBrandBasedCategoriesCount($brandId = 0, $lang_id = 1)
    {
        $total_records = 0;
        $em            = $this->getDoctrine()->getManager();
        $sql           = "SELECT c.* FROM category c WHERE id IN
            ( SELECT pc.category_id FROM product_category pc WHERE pc.product_id IN (SELECT p.id FROM product p INNER JOIN brand b ON p.brand_id=b.id WHERE p.lang_id=" . $lang_id . " and p.brand_id = " . $brandId . " and p.status='1' and p.is_deleted='0')) and c.status='1' and c.is_deleted='0'";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $total_records = count($result);
        }
        return $total_records;
    }

    public function getBrandList($param = array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'lang_id' => ''))
    {
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        if (!empty($param['lang_id'])) {
            $front_lang_id = $param['lang_id'];
        } else {
            $front_lang_id = $session->get('front_lang_id');
        }
        $sessionLangRefId = $GeneralService->getLangRefIdById($front_lang_id);
        $operator_array = array();
        $sortby         = 'ASC';
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id'] = explode(',', $param['commaseparated_id']);
            sort($param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 'b.slug';
            $operator_array[0]['op_allies'] = 'miarray';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        (!empty($param['orderby'])) ? $orderby = " b." . $param['orderby'] : $orderby = 'b.sortOrder, bl.name, b.id';
        //$field_data                            = 'b';
        $field_data     = 'b.id,bl.name,b.ctbRefId,b.preferredProduct,b.showStyle,b.galleryId,b.galleryRefId,b.ads,b.adsLink,b.target,b.folderName,b.slug,b.ctbMasterData,b.media,b.headerCode,b.brandTemplate,
            b.buttonSetting,b.hideShowButtons,b.sortOrder,b.placeFrom,b.syncFlag,b.fullSyncFlag,b.manufacturerId,b.manufacturerRefId,b.priceBasedOn,b.status,b.isDeleted,b.createdDate,b.updatedDate';
        $join_array                            = array();
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'b.ctbRefId';
        $join_array[0]['join_to'] = 'bl.brandRefId';
        $join_array[0]['join_allies'] = 'bl';
        $join_array[0]['join_class'] = 'CatalogueBundle:BrandLang';
        $join_array[0]['join_condition'] = "AND bl.langRefId = '".$sessionLangRefId."' ";
        /*if (!empty($front_lang_id)) {
            $condition_array = array('b.status' => 1, 'b.isDeleted' => 0, 'IDENTITY(b.lang)' => $front_lang_id);
        } else {
            $condition_array = array('b.status' => 1, 'b.isDeleted' => 0);
        }*/
        $condition_array = array('b.status' => 1, 'b.isDeleted' => 0);
        $groupby = 'b.id';
        $result  = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Brand", $allies = 'b', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = $param['limit'], $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function getCategoryList($param = array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = [];
        if ($param['onlyparents'] == true) {
            $where_condition[]= "c.parent_id=0";
        }
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id'] = explode(',', $param['commaseparated_id']);
            sort($param['commaseparated_id']);
            $commaseparated_id = implode("','", $param['commaseparated_id']);
            $where_condition[]= "c.slug IN ('" . $commaseparated_id . "') ";
            //$where_condition .= " AND c.id IN (" . $param['commaseparated_id'] . ")";
        }
        (!empty($param['orderby'])) ? $common_condition .= " c." . $param['orderby'] : $common_condition .= 'c.sort_order, cl.name, c.id';
        $common_condition .= " " . $param['sort'];
        if ($param['limit']) {
            $common_condition .= " LIMIT " . $param['limit'];
        }
        $where_condition[] = "cl.lang_ref_id= '" . $sessionLangRefId."'";
        $where_condition[] = "c.status=1";
        $where_condition[] = "c.is_deleted=0";

        $sql = "SELECT c.id as id,cl.name as text,cl.name as name,c.parent_id as parent_id,c.slug 
                FROM category c 
                INNER JOIN category_lang as cl ON c.ctb_ref_id=cl.cat_ref_id  
                where ".implode(' and ', $where_condition)."
                GROUP BY c.id  ORDER BY $common_condition ";

        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        // widget lang change --
        /*if(!empty($result)) {            
            $defaultLangId = $GeneralService->getDefaultLangId();
            $sql = "SELECT c.id as id,c.name as text,c.name as name,c.parent_id as parent_id,c.slug FROM category c WHERE
                c.status=1 AND c.is_deleted=0
                AND lang_id=$defaultLangId $where_condition
                ORDER BY $common_condition ";

            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $categoryDataByDefaultLang = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $defaultCatData = [];
            
            if(!empty($categoryDataByDefaultLang)) {
                foreach ($categoryDataByDefaultLang as $k => $v) {
                    $defaultCatData[$v['id']]['name'] = $v['name'];
                    //$defaultCatData[$v['id']]['description'] = $v['description'];
                }
            }
            
            foreach ($result as $key => $value) {
                if($value['name'] == null || empty($value['name'])) {
                    $result[$key]['name'] = $result[$key]['text'] = $defaultCatData[$value['id']]['name'];
                }
            }
        }*/
        // -- widget lang change
        
        return $result;
    }

    public function getCmsPageList($param = array('orderby' => 'Cp.sortOrder', 'sort' => 'ASC', 'limit' => '', 'commaseparated_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $langRefId = $GeneralService->getLangRefIdById($front_lang_id);
        $operator_array   = array();
        $sortby           = 'ASC';
        $field_data       = 'cp.id,cp.slug,cpl.pageName as name';
        //$condition_array  = array('cp.status' => 1, 'cp.isDeleted' => 0, 'cp.langId' => $front_lang_id);
        $condition_array  = array('cp.status' => 1, 'cp.isDeleted' => 0);
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id'] = explode(',', $param['commaseparated_id']);
            sort($param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 'cp.slug';
            $operator_array[0]['op_allies'] = 'miarray0';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        $orderby    = $param['orderby'];
        $join_array = array();
        $join_array[0]['type'] = 'left';
        $join_array[0]['join_from'] = 'cp.uuId';
        $join_array[0]['join_to'] = 'cpl.pageRefId';
        $join_array[0]['join_allies'] = 'cpl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:CmsPageLang';
        $join_array[0]['join_condition'] = " AND cpl.langRefId = '$langRefId'";
        $groupby    = 'cp.id';
        $result     = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:CmsPage", $allies = 'cp', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function getSubcateoryData($categoryId = 0, $lang_id = 1, $is_json = 1)
    {
        $commaseparated_category_id = '';
        $category_data              = array();
        if (!empty($categoryId)) {
            $data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $parent = "#";
                    if ($value->getParentId()) {
                        $parent = $value->getParentId();
                    }
                    $category_data[] = array('id' => $value->getId(), 'text' => $value->getName(), 'children' => [$value->getName()]);
                    $this->getSubcateoryData($value->getId());
                }
            }
        }
        return $category_data;
    }

    public function getCategoryTreeViewList($param = array('orderby' => 'c.id', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false, 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = '';
        $operator_array   = array();
        $sortby           = 'ASC';
        $field_data       = ' c.id as id,cl.name as text,cl.name as name,c.parentId as parent_id,c.slug';
        $condition_array  = array();
        if ($param['onlyparents']) {
            $condition_array['c.status']    = 1;
            $condition_array['c.isDeleted'] = 0;
            $condition_array['c.parentId']  = 0;
        } else {
            $condition_array['c.status']    = 1;
            $condition_array['c.isDeleted'] = 0;
        }
        if (!empty($param['lang_id'])) {
            $front_lang_id = $param['lang_id'];
        } else {
            $front_lang_id = $session->get('front_lang_id');
        }
        $front_lang_ref_id = $GeneralService->getLangRefIdById($front_lang_id);
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id']     = explode(',', $param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 'c.id';
            $operator_array[0]['op_allies'] = 'miarray';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        $orderby    = $param['orderby'];
        $join_array = array();
        
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'c.ctbRefId';
        $join_array[0]['join_to'] = 'cl.catRefId';
        $join_array[0]['join_allies'] = 'cl';
        $join_array[0]['join_class'] = 'CatalogueBundle:CategoryLang';
        $join_array[0]['join_condition'] = "AND cl.langRefId = '".$front_lang_ref_id."' ";
                        
        $groupby    = 'c.id';
        $result     = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Category", $allies = 'c', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = $param['limit'], $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function getSliderList($param = array('orderby' => 's.id', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $SiteSetting      = $GeneralService->getStoreMainConfig();
        //echo '<pre>';print_r($SiteSetting);exit;
        if (!empty($session->get('front_lang_id'))) {
            $front_lang_id = $session->get('front_lang_id');
        } else {
            $front_lang_id = $SiteSetting['langId'];
        }
        $lang_ref_id = $GeneralService->getLangRefIdById($front_lang_id);        
        $operator_array = array();
        $sortby         = $param['sort'];
        $field_data     = 's.id as id,s.name,s.sliderType as slider_type,s.fromDate as from_date,s.toDate as to_date,s.alwaysShow as always_show,s.status,s.isDeleted as is_deleted,s.createdDate as created_date,s.updatedDate as updated_date';
        if (!empty($param['lang_id'])) {
            //$condition_array = array('s.status' => 1, 's.isDeleted' => 0, 'IDENTITY(c.lang)' => $param['lang_id']);
            // widget lang change --
            $langObj = $this->getDoctrine()->getRepository(Language::class)->find($param['lang_id']);
            $lang_ref_id = $langObj->getCtbRefId();
            $condition_array = array('s.status' => 1, 's.isDeleted' => 0, 'si.langRefId' => $lang_ref_id);
            // -- widget lang change
        } else {
            $condition_array = array('s.status' => 1, 's.isDeleted' => 0);
        }
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id']     = explode(',', $param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 's.id';
            $operator_array[0]['op_allies'] = 'miarray';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        $orderby    = $param['orderby'];
        $join_array = array();
        // widget lang change --
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'si.sliderRefId';
        $join_array[0]['join_to'] = 's.uuId';
        $join_array[0]['join_allies'] = 'si';
        $join_array[0]['join_class'] = 'ContentcmsBundle:SliderImage';
        //$groupby    = '';
        $groupby = 's.id';
        // -- widget lang change
        $result     = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:Slider", $allies = 's', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function getfooterPortion($LayoutSetting)
    {
        $number_of_columns = $LayoutSetting['theme_setting']->general_option->footer->footer_column;
        $themename         = $LayoutSetting['themename'];
        $em                = $this->getDoctrine()->getManager();

        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $session        = new Session();
        if (!empty($session->get('front_lang_id'))) {
            $lang_id = $session->get('front_lang_id');
        } else {
            $lang_id = $SiteSetting['langId'];
        }
        //$where_condition = 'status=1 AND is_deleted=0 AND widget_area_id IN (11,12,13,14,15,16) AND lang_id =' . $lang_id;        
        //$sql             = "SELECT * FROM widget_setting WHERE $where_condition ORDER BY widget_area_id, sort_order ASC";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (11,12,13,14,15,16) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        
        $statement       = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result                   = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $footer_html_columns      = array(11 => 'column_one', 12 => 'column_two', 13 => 'column_three', 14 => 'column_four', 15 => 'column_five', 16 => 'column_six');
        $footer_html_columns_data = array();
        $footer_columns_id        = array(11, 12, 13, 14, 15, 16);
        $needed_columns           = array();
        for ($i = 0; $i < $number_of_columns; $i++) {
            $needed_columns[$footer_columns_id[$i]] = $footer_html_columns[$footer_columns_id[$i]];
        }
        if (!empty($result)) {
//            unset($result[1]);
            foreach ($result as $val) {
                if (array_key_exists($val['widget_area_id'], $needed_columns)) {
                    $widget_content                                                      = $this->getWidgetContent($val, $themename);
                    $footer_html_columns_data[$needed_columns[$val['widget_area_id']]][] = $widget_content;
                }
            }
        }
        return $footer_html_columns_data;
    }

    public function getBrandLeftPortion($themename)
    {
        $session        = new Session();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        if (!empty($session->get('front_lang_id'))) {
            $lang_id = $session->get('front_lang_id');
        } else {
            $lang_id = $SiteSetting['langId'];
        }
        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (1) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (1) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(1); // this is widget area id for brand left
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getBrandRightPortion($themename)
    {
        $session           = new Session();
        $lang_id           = $session->get('front_lang_id');
        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (2) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (2) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(2); // this is widget area id for brand right
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCMSPageLeftPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (7) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (7) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(7); // this is widget area id for Category left
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCMSPageRightPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (8) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (8) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(8); // this is widget area id for Category right
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCMSLeftViewHtml($themename)
    {
        $widgets_content = $this->getCMSPageLeftPortion($themename);
        $leftview        = '';
        $leftview .= '<div class="col-md-2">';
        if (!empty($widgets_content)) {
            $leftview .= ' <div class="c-layout-sidebar-menu">
                    <div class="c-sidebar-menu-toggler">
                        <a href="javascript:void(0);" class="c-content-toggler" data-toggle="collapse" data-target="#sidebar-menu-1"> <span class="c-line"></span> <span class="c-line"></span> <span class="c-line"></span> </a>
                    </div><div class="c-sidebar-menu collapse" id="sidebar-menu-1">' . $widgets_content;
            $leftview .= '</div></div>';
        }
        $leftview .= '</div>';
        return $leftview;
    }

    public function getCMSRightViewHtml($themename)
    {
        $widgets_content = $this->getCMSPageRightPortion($themename);
        $rightview       = '';
        $rightview .= '<div class="col-md-2">';
        if (!empty($widgets_content)) {
            $rightview .= '<div class="c-layout-sidebar-menu">
                    <div class="c-sidebar-menu-toggler">
                        <a href="javascript:void(0);" class="c-content-toggler" data-toggle="collapse" data-target="#sidebar-menu-1"> <span class="c-line"></span> <span class="c-line"></span> <span class="c-line"></span> </a>
                    </div><div class="c-sidebar-menu collapse" id="sidebar-menu-1">' . $widgets_content;
            $rightview .= '</div></div>';
        }
        $rightview .= '</div>';
        return $rightview;
    }

    public function getProductLeftPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (5) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (5) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(5); // this is widget area id for Product left
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getProductRightPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (6) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (6) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(6); // this is widget area id for Product right
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getBlogLeftPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (9) AND ws.lang_id = ' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (9) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(9); // this is widget area id for Product left
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }

        return $html;
    }

    public function getBlogRightPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (10) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (10) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $html_data        = array();
        $brand_columns_id = array(10); // this is widget area id for Product right
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCategoryLeftPortion($themename)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (3) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (3) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(3); // this is widget area id for Category left
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCategoryRightPortion($themename)
    {
        $lang_id = $session->get('front_lang_id');
        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (4) AND ws.lang =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (4) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result           = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data        = array();
        $brand_columns_id = array(4); // this is widget area id for Category right
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val, $themename);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            $number_of_widgets = count($html_data);
            for ($i = 0; $i < $number_of_widgets; $i++) {
                $html .= $html_data[$i];
            }
        }
        return $html;
    }

    public function getWidgetContent($widgetTypeData, $themename)
    {
        $show_widget = $this->isShowWidgets($widgetTypeData);
        $content     = '';
        if ($show_widget == true) {
            if ($widgetTypeData['place_from'] == 'I') {
                $widget_type_id = $widgetTypeData['widget_type_id'];
                switch ($widget_type_id) {
                    case 1:
                        $content = $this->getBrandListHtml($widgetTypeData, $themename);
                        break;
                    case 2:
                        $content = $this->getMainParentCategoryListHtml($widgetTypeData, $themename); // Main Parent Category
                        break;
                    case 3:
                        $content = $this->getCategoryListHtml($widgetTypeData, $themename); // All Category
                        break;
                    case 4:
                        $content = $this->getBodyContentHtml($widgetTypeData, $themename);
                        break;
                    case 5:
                        $content = $this->getCmsPageListHtml($widgetTypeData, $themename);
                        break;
                    case 6:
                        $content = $this->getSliderHtml($widgetTypeData, $themename);
                        break;
                    case 7:
                        $content = $this->getBlogCategoryListHtml($widgetTypeData, $themename);
                        break;
                    case 9:
                        $content = $this->getStoreAddressHtml($widgetTypeData, $themename);
                        break;
                    case 10:
                        $content = $this->getRequestConsultantFormHtml($widgetTypeData, $themename);
                        break;
                    case 12:
                        $content = $this->getEcircularFormHtml($widgetTypeData, $themename);
                        break;
                    case 13:
                        $content = $this->getNewsLetterFormHtml($widgetTypeData, $themename);
                        break;
                    case 14:
                        $content = $this->getBlogArchivesListHtml($widgetTypeData, $themename);
                        break;
                    case 15:
                        $content = $this->getNewsCategoryListHtml($widgetTypeData, $themename);
                        break;
                    case 16:
                        $content = $this->getNewsArchivesListHtml($widgetTypeData, $themename);
                        break;
                    case 17:
                        $content = $this->getNewsLetterSubscribeHtml($widgetTypeData, $themename);
                        break;
                    case 21:
                        $content = $this->getGoogleTranslateCodeHtml($widgetTypeData, $themename);
                        break;
                    default:
                        break;
                }
            } else if ($widgetTypeData['place_from'] == 'M') {
                $ctb_master_data = $widgetTypeData['ctb_master_data'];
                if (!empty($ctb_master_data)) {
                    $json_decode_ctb_master_data = (array) (json_decode($ctb_master_data));
                    $widget_type_id              = $json_decode_ctb_master_data['widget_type_id'];
                    switch ($widget_type_id) {
                        case 1:
                            $content = $this->getBrandListHtml($json_decode_ctb_master_data, $themename);
                            break;
                        case 2:
                            $content = $this->getMainParentCategoryListHtml($json_decode_ctb_master_data, $themename); // Main Parent Category
                            break;
                        case 3:
                            $content = $this->getCategoryListHtml($json_decode_ctb_master_data, $themename); // All Category
                            break;
                        case 4:
                            $content = $this->getBodyContentHtml($json_decode_ctb_master_data, $themename);
                            break;
                        case 5:
                            $content = $this->getCmsPageListHtml($json_decode_ctb_master_data, $themename);
                            break;
                        case 6:
                            $content = $this->getSliderHtml($json_decode_ctb_master_data, $themename);
                            break;
                        case 7:
                            $content = $this->getBlogCategoryListHtml($json_decode_ctb_master_data, $themename);
                            break;
                        case 9:
                            $content = $this->getStoreAddressHtml($widgetTypeData, $themename);
                            break;
                        case 10:
                            $content = $this->getRequestConsultantFormHtml($widgetTypeData, $themename);
                            break;
                        case 12:
                            $content = $this->getEcircularFormHtml($widgetTypeData, $themename);
                            break;
                        case 13:
                            $content = $this->getNewsLetterFormHtml($widgetTypeData, $themename);
                            break;
                        case 14:
                            $content = $this->getBlogArchivesListHtml($widgetTypeData, $themename);
                            break;
                        case 15:
                            $content = $this->getNewsCategoryListHtml($widgetTypeData, $themename);
                            break;
                        case 16:
                            $content = $this->getNewsArchivesListHtml($widgetTypeData, $themename);
                            break;
                        case 17:
                            $content = $this->getNewsLetterSubscribeHtml($widgetTypeData, $themename);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        return $content;
    }

    public function isShowWidgets($widgetTypeData)
    {
        if ($widgetTypeData['always_show'] == 1) {
            return true;
        }
        $from_date             = $widgetTypeData['from_date'];
        $to_date               = $widgetTypeData['to_date'];
        $todays_date           = date('Y-m-d H:i:s');
        $todays_date_timestamp = @strtotime($todays_date);
        if (!empty($from_date) && !empty($to_date)) {
            $from_date_timestamp = @strtotime($from_date);
            $to_date_timestamp   = @strtotime($to_date);
            if ($to_date_timestamp >= $todays_date_timestamp && $from_date_timestamp <= $todays_date_timestamp) {
                return true;
            }
        }
        return false;
    }

    public function getBrandListHtml($widgetTypeData, $themename)
    {
        $url_charater      = 'b';
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getBrandList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id));
        } else {
            $data = $this->getBrandList();
        }
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if (!empty($data)) {
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html       = $this->getLiHtml($data, $extra_data);
        }
        return $html;
    }

    public function getMainParentCategoryListHtml($widgetTypeData, $themename)
    {
        $url_charater      = 'c';
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getCategoryList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id, 'onlyparents' => true)); // Main Parent categories
        } else {
            $data = $this->getCategoryList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => true)); // Main Parent categories
        }
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if (!empty($data)) {
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html       = $this->getLiHtml($data, $extra_data);
        }
        return $html;
    }

    public function getCategoryListHtml($widgetTypeData, $themename)
    {
        $url_charater      = 'c';
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getCategoryList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id, 'onlyparents' => false));
        } else {
            $data = $this->getCategoryList(); // all categories
        }
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if (!empty($data)) {
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html       = $this->getLiHtml($data, $extra_data);
        }
        return $html;
    }

    public function getCmsPageListHtml($widgetTypeData, $themename)
    {
        $commaseparated_id = '';
        $url_charater      = 'page';
        $title             = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getCmsPageList(array('orderby' => 'cp.sortOrder', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id)); // Main Parent categories
        } else {
            $data = $this->getCmsPageList(); // all Pages
        }
        $html           = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        $currentUri     = $_SERVER['REQUEST_URI'];
        $pageSlug       = explode('/', $currentUri);
        $pageSlug       = end($pageSlug);
        if (!empty($data)) {
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html       = $this->getLiHtml($data, $extra_data);
        }
        return $html;
    }

    public function getLiHtml($data, $extra_data)
    {
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        $html           = '';
        if (!empty($data)) {
            $themename = $extra_data['themename'];

            $Template = 'ContentcmsBundle:' . $themename . ':widgetlistingdata.html.twig';
            if (!$this->get('templating')->exists($Template)) {
                $Template = 'ContentcmsBundle:default:widgetlistingdata.html.twig';
            }
            $html = $this->renderView($Template, array('data' => $data, 'extra_data' => $extra_data));
        }
        return $html;
    }

    public function getBodyContentHtml($widgetTypeData, $themename){
        $html = '';
        if (!empty($widgetTypeData)) {
            // widget lang change --
            $GeneralService = $this->get(GeneralService::class);
            $defaultLangRefId = $GeneralService->getDefaultLangRefId();
            $widgetSettingService = $this->get(\AppBundle\Service\WidgetSettingService::class);
            $widgetId = $widgetTypeData['id'];
            $widgetDataByDefaultLang = $widgetSettingService->findWidgetDataByLang($widgetId,$defaultLangRefId);
            $defaultLangTitle = $defaultLangBodyText = "";
            if(!empty($widgetDataByDefaultLang)) {
                $defaultLangTitle = $widgetDataByDefaultLang[0]['title'];
                $defaultLangBodyText = $widgetDataByDefaultLang[0]['bodyText'];
            }
            if($widgetTypeData['title'] == null || empty($widgetTypeData['title'])) {
                $widgetTypeData['title'] = $defaultLangTitle;
            }
            if($widgetTypeData['body_text'] == null || empty($widgetTypeData['body_text'])) {
                $widgetTypeData['body_text'] = $defaultLangBodyText;
            }
            // -- widget lang change            
            
            if ($widgetTypeData['widget_area_id'] < 11 || $widgetTypeData['widget_area_id'] > 16) {
                if (!empty($widgetTypeData['title'])) {
                    $html .= '<span class="c-title">' . $widgetTypeData['title'] . '</span>';
                }
                $html .= $widgetTypeData['body_text'];
            } else {
                $html .= '<div class="c-links dropdown">';
                if (!empty($widgetTypeData['title'])) {
                    $html .= '<strong data-toggle="dropdown" class="dropdown-toggle">' . $widgetTypeData['title'] . '</strong>';
                }
                $html .= '<ul class="c-theme-ul acc-content dropdown-menu">';
                $html .= '<li>' . $widgetTypeData['body_text'] . '</li>';
                $html .= '</ul>';
                $html .= '</div>';
            }
        }
        return $html;
    }

    public function getSliderHtml($widgetTypeData, $themename)
    {
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        $GeneralService    = $this->get(GeneralService::class);
        $BaseUrl           = $GeneralService->getBaseUrl();
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        $param = array('orderby' => 'id', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id);
        $data  = $this->getSliderList($param);
        if (!empty($widgetTypeData)) {
            if (!empty($data)) {
                $show_widget = $this->isShowWidgets($data[0]);
                $sliderId    = $data[0]['id'];
                if ($show_widget == true) {
                    $common_condition = ' si.sort_order ASC';
                    $session          = new Session();
                    $GeneralService   = $this->get(GeneralService::class);
                    $front_lang_id    = $session->get('front_lang_id');
                    $where_condition  = '';

                    /*$slider_sql = "SELECT s.* FROM slider s WHERE
                    s.is_deleted=0 AND s.id=" . $sliderId;
                    $statement = $em->getConnection()->prepare($slider_sql);
                    $statement->execute();
                    $slider_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

                    $sliderMethod = $slider_data[0]['slider_method'];
                    $slider_data = $em->createQuery(
                    "SELECT S.alwaysShow as sliderAlwaysShow,S.fromDate as sliderFromDate,S.toDate as sliderToDate,SI.imgName,SI.title,SI.link,SI.linkTarget,SI.alwaysShow as sliderImageAlwaysShow,SI.fromDate as sliderImageFromDate,SI.toDate as sliderImageToDate,S.sliderType as sliderType
                    FROM ContentcmsBundle:Slider S
                    INNER JOIN ContentcmsBundle:SliderImage SI WITH SI.slider=S.id AND SI.isDeleted=0
                    WHERE S.id=$sliderId AND S.isDeleted=0  AND S.status=1
                    ORDER BY SI.sortOrder ASC")->getResult();

                    if (!empty($slider_data)) {
                    $LayoutSetting = $GeneralService->getStoreLayoutConfig();
                    // BEGIN: Slider Effect
                    if ($sliderMethod == Slider::WOW_SLIDER || $sliderMethod == Slider::NIVO_SLIDER) {
                    $sliderOption = $slider_data[0]['slider_option'];
                    $sliderOptionAttr = json_decode($sliderOption, true);
                    $sliderEffect = Slider::getSliderTypeWiseEffect($sliderMethod, $sliderOptionAttr['slider_effect']);
                    }

                    //$themename = $SiteSetting['themename'];
                    $sliderType = Slider::$sliderTypeArr[$sliderMethod];
                    $sliderType = str_replace("Slider", "", trim($sliderType));
                    $template_suffix = strtolower(str_replace(" ", "_", trim($sliderType)));
                    $params = array('themename' => $themename, 'slidermethod' => $sliderMethod, 'LayoutSetting' => $LayoutSetting, 'template_suffix' => $template_suffix);
                    $html = $this->getCmsPageSliderHtml($slider_data, $params);
                    }*/
                    // BEGIN: Slider Effect 1
                    $LayoutSetting = $GeneralService->getStoreLayoutConfig();
                    $sliderParam   = [
                        'slider_id'     => $sliderId,
                        'themename'     => $themename,
                        'LayoutSetting' => $LayoutSetting,
                    ];
                    $sliderMethodWiseData = $GeneralService->getSliderMethodWiseData($sliderParam);
                    $html                 = $sliderMethodWiseData['sliderImage'];
                    // END: Slider Effect 1
                }
            }
        }
        return $html;
    }

    public function getfilterRecursiveSubcateoryData($categoryId = 0, $lang_id = 1, $category_data = '', $productCommaValue = '', $brandId = '')
    {
        $commaseparated_category_id = '';
        if (!is_array($category_data)) {
            $category_data = array();
        }

        $data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
        if (!empty($data)) {
            foreach ($data as $key => $value) {
                if (!empty($categoryId)) {
                    $ProtCount = $this->getTotalCategoryProductCount($value->getId(), $brandId);
                    if (!empty($ProtCount)) {
                        $category_data[] = array('id' => $value->getId(), 'name' => $value->getName(), 'slug' => $value->getSlug(), 'media' => $value->getMedia(), 'description' => $value->getDescription(), 'ProductCount' => $ProtCount);
                        $category_data   = $this->getfilterRecursiveSubcateoryData($value->getId(), $lang_id, $category_data, $brandId);
                    }
                }
            }
        }
        return $category_data;
    }

    public function getRecursiveSubcateoryData($categoryId = 0, $lang_id = 1, $category_data = '', $productCommaValue = '')
    {
        $commaseparated_category_id = '';
        if (!is_array($category_data)) {
            $category_data = array();
        }

        // $data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
        // if (!empty($data)) {
        //     foreach ($data as $key => $value) {
        //         if (!empty($categoryId)) {
        //             $category_data[] = array('id' => $value->getId(), 'name' => $value->getName(), 'slug' => $value->getSlug(), 'media' => $value->getMedia(), 'description' => $value->getDescription(), 'ProductCount' => 0);
        //             $category_data   = $this->getRecursiveSubcateoryData($value->getId(), $lang_id, $category_data);
        //         }
        //     }
        // }

        $GeneralService = $this->get(GeneralService::class);
        $defaultLangRefId = $GeneralService->getDefaultLangRefId();
        $categoryService = $this->get(\AppBundle\Service\CategoryService::class);
        $data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
        if (!empty($data)) {
            foreach ($data as $key => $value) {
                if (!empty($categoryId)) {
                    $catLangdata = $categoryService->findByCatNLang($categoryId,$defaultLangRefId);
                    $catName = $catDesc = "";
                    if(!empty($catLangdata)) {
                        $catName = $catLangdata['name'];
                        $catDesc = $catLangdata['description'];
                    }
                    $category_data[] = array('id' => $value->getId(), 'name' => $catName, 'slug' => $value->getSlug(), 'media' => $value->getMedia(), 'description' => $catDesc, 'ProductCount' => 0);
                    $category_data   = $this->getRecursiveSubcateoryData($value->getId(), $lang_id, $category_data);
                }
            }
        }
        return $category_data;
    }

    public function getCommaseparatedIds($array = array())
    {
        $commaseparated_id = '';
        if (!empty($array)) {
            foreach ($array as $val) {
                $commaseparated_id .= $val['id'] . ',';
            }
            $commaseparated_id = trim($commaseparated_id, ',');
        }
        return $commaseparated_id;
    }

    public function getSingleLevelSubcateoryData($categoryId = 0, $lang_id = 1)
    {
        $em                         = $this->getDoctrine()->getManager();
        $commaseparated_category_id = '';
        $category_data              = array();
        if (!empty($categoryId)) {
            $data = $em->createQueryBuilder()
                ->select('c')
                ->from('CatalogueBundle:Category', 'c')
                ->andWhere('c.parentId = :parentId', 'c.lang = :lang_id', 'c.isDeleted=0', 'c.status = 1')
                ->setParameters(['lang_id' => $lang_id, 'parentId' => $categoryId])
                ->orderBy('c.sortOrder,c.name,c.id', 'ASC')
                ->getQuery()->getResult();
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $number_products = $this->getTotalCategoryProductCount($value->getId());
                    $category_data[] = array('id' => $value->getId(), 'name' => $value->getName(), 'slug' => $value->getSlug(), 'media' => $value->getMedia(), 'description' => $value->getDescription(), 'totalproduct' => $number_products, 'place_from' => $value->getPlaceFrom());
                }
            }
        }
        return $category_data;
    }

    public function getHomePageOfferWidgesPortion($id)
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (' . $id . ') AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (" . $id . ") AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = "";
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data = $widget_content;
            }
        }
        return $html_data;
    }

    public function getHomePageBannerOneWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (20) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (20) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageBannerTwoWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (21) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (21) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageBannerThreeWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (22) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (22) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageBannerFourWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (23) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (23) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageBannerFiveWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (24) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (24) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageBannerSixWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = 'ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (25) AND ws.lang_id=' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (25) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $tags_to_strip  = array("p");
                foreach ($tags_to_strip as $tag) {
                    $widget_content = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $widget_content);
                }
                $html_data[] = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getHomePageContentWidgesPortion()
    {
        $session = new Session();
        $lang_id = $session->get('front_lang_id');

        $number_of_columns = 1;
        $html              = '';
        $em                = $this->getDoctrine()->getManager();
        //$where_condition   = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (26) AND ws.lang_id =' . $lang_id;
        //$sql               = "SELECT ws.* FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $where_condition   = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (26) AND wsl.lang_ref_id = '$lang_ref_id'";
        $sql = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
            . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
            . " WHERE $where_condition "
            . " ORDER BY ws.widget_area_id,ws.sort_order ASC ";
        // -- widget lang change 
        
        $statement         = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result    = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $html_data = array();
        if (!empty($result)) {
            foreach ($result as $val) {
                $widget_content = $this->getWidgetContent($val);
                $html_data[]    = $widget_content;
            }
        }
        if (!empty($html_data)) {
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
        }
        return $html;
    }

    public function getCmsPageSliderHtml($sliderData = array(), $param = array())
    {
        $GeneralService  = $this->get(GeneralService::class);
        $baseUrl         = $GeneralService->getBaseUrl();
        $themename       = $param['themename'];
        $template_suffix = $param['template_suffix'];
        $slidermethod    = $param['slidermethod'];
        $LayoutSetting   = $param['LayoutSetting'];
        $sdData          = $sliderImageData          = array();
        $slider_html     = '';

        $flag = 0;
        foreach ($sliderData as $key => $value) {
            /* First Check Slider Show Status */
            $slider_param_array = $param_array = array();
            $slider_from_date   = $slider_to_date   = $from_date   = $to_date   = '';
            $slider_always_show = $value['sliderAlwaysShow'];

            if (!empty($value['sliderFromDate'])) {
                $slider_from_date = $value['sliderFromDate']->format('Y-m-d H:i:s');
            }
            if (!empty($value['sliderToDate'])) {
                $slider_to_date = $value['sliderToDate']->format('Y-m-d H:i:s');
            }
            $slider_param_array  = array('always_show' => $slider_always_show, 'from_date' => $slider_from_date, 'to_date' => $slider_to_date);
            $isSliderShowWidgets = $this->isShowWidgets($slider_param_array);
            if ($isSliderShowWidgets == true) {
                $link       = $value['link'];
                $linkTarget = $value['linkTarget'];
                // if($slidermethod == 2){
                //        $imagePath = $value['imgName'];
                // }else{
                //         $imagePath = $baseUrl . $value['imgName'];
                // }
                $imagePath   = $value['imgName'];
                $title       = $value['title'];
                $always_show = $value['sliderImageAlwaysShow'];
                $slider_type = $value['sliderType'];

                if (!empty($value['sliderImageFromDate'])) {
                    $from_date = $value['sliderImageFromDate']->format('Y-m-d H:i:s');
                }
                if (!empty($value['sliderImageToDate'])) {
                    $to_date = $value['sliderImageToDate']->format('Y-m-d H:i:s');
                }
                $param_array   = array('always_show' => $always_show, 'from_date' => $from_date, 'to_date' => $to_date);
                $isShowWidgets = $this->isShowWidgets($param_array);
                $active        = '';
                /* Second Check Slider Image Show Status */
                if ($isShowWidgets == true) {
                    if ($flag == 0) {
                        $flag   = 1;
                        $active = 'active';
                    }
                    $sliderImageData['active']     = $active;
                    $sliderImageData['link']       = $link;
                    $sliderImageData['linkTarget'] = $linkTarget;
                    $sliderImageData['imagePath']  = $imagePath;
                    $sliderImageData['title']      = $title;
                    $sliderImageData['sliderType'] = $slider_type;
                    $sdData[]                      = $sliderImageData;
                }
            }
        }

        if (!empty($sdData)) {
            $Template = 'ContentcmsBundle:' . $themename . ':slider_' . $template_suffix . '.html.twig';
            if (!$this->get('templating')->exists($Template)) {
                $Template = 'ContentcmsBundle:default:slider_' . $template_suffix . '.html.twig';
            }
            $slider_html = $this->renderView($Template, array('sdData' => $sdData, 'LayoutSetting' => $LayoutSetting));
        }
        return $slider_html;
    }

    public function getLandingPageSliderHtml($sliderData = array(), $slidermethod = 1)
    {
        $slider_html    = '';
        $GeneralService = $this->get(GeneralService::class);
        $baseUrl        = $GeneralService->getBaseUrl();

        if ($slidermethod == 2) {
            $slider_html .= '<div class="owl-carousel owl-theme c-theme owl-bordered1 c-owl-nav-center" data-items="6" data-desktop-items="4" data-desktop-small-items="3" data-tablet-items="3" data-mobile-small-items="2" data-slide-speed="5000" data-rtl="false">';
            foreach ($sliderData as $key => $value) {
                $image_path    = $baseUrl;
                $image_path    = $image_path . $value->getImgName();
                $link          = $value->getLink();
                $title         = $value->getTitle();
                $linkTarget    = $value->getLinkTarget();
                $image_name    = $value->getImgName();
                $always_show   = $value->getAlwaysShow();
                $from_date     = $value->getFromDate();
                $to_date       = $value->getToDate();
                $param_array   = array('always_show' => $always_show, 'from_date' => $from_date, 'to_date' => $to_date);
                $isShowWidgets = $this->isShowWidgets($param_array);
                if ($isShowWidgets == true) {
                    if (!empty($link)) {
                        $slider_html .= '<div class="item"> <a href="' . $link . '"><img src="' . $image_path . '" alt="' . $title . '"/></a> </div>';
                    } else {
                        $slider_html .= '<div class="item"> <a href="javascript:void(0);"><img src="' . $image_path . '" alt="' . $title . '"/></a> </div>';
                    }
                    $slider_html .= '</div>';
                }
            }
            $slider_html .= '</div>';
        } else {
            $slider_html  = '<div class="carousel fade-carousel slide" data-ride="carousel" data-interval="4000" id="bs-carousel">';
            $slides_count = count($sliderData);
            $slider_html .= '<ol class="carousel-indicators">';
            foreach ($sliderData as $key => $value) {
                $always_show   = $value->getAlwaysShow();
                $from_date     = $value->getFromDate();
                $to_date       = $value->getToDate();
                $param_array   = array('always_show' => $always_show, 'from_date' => $from_date, 'to_date' => $to_date);
                $isShowWidgets = $this->isShowWidgets($param_array);
                if ($isShowWidgets == true) {
                    if ($slides_count > 1) {
                        $slider_html .= '<li data-target="#bs-carousel" data-slide-to="' . $key . '">
                        </li>';
                    }
                }
            }
            $slider_html .= '</ol>';
            $slider_html .= '<div class="carousel-inner">';
            $flag = 0;
            foreach ($sliderData as $key => $value) {
                $image_path    = $baseUrl;
                $image_path    = $image_path . $value->getImgName();
                $link          = $value->getLink();
                $title         = $value->getTitle();
                $linkTarget    = $value->getLinkTarget();
                $image_name    = $value->getImgName();
                $always_show   = $value->getAlwaysShow();
                $from_date     = $value->getFromDate();
                $to_date       = $value->getToDate();
                $param_array   = array('always_show' => $always_show, 'from_date' => $from_date, 'to_date' => $to_date);
                $isShowWidgets = $this->isShowWidgets($param_array);
                $active        = '';
                if ($isShowWidgets == true) {
                    if ($flag == 0) {
                        $flag   = 1;
                        $active = ' active ';
                    }
                    $slider_html .= '<div class="item slides ' . $active . '">';
                    if (!empty($link)) {
                        $slider_html .= '<a href="' . $link . '" target="' . $linkTarget . '"><img src="' . $image_path . '" class="img-responsive" title="' . $title . '" alt="' . $title . '"></a>';
                    } else {
                        $slider_html .= '<img src="' . $image_path . '" class="img-responsive" title="' . $title . '" alt="' . $title . '">';
                    }
                    $slider_html .= '</div>';
                }
            }
            $slider_html .= '</div></div>';
        }
        return $slider_html;
    }

    public function getRecursiveSubcateoryDataChildToGrandParents($categoryId = 0, $langRefId = '', $category_data = '')
    {
        $commaseparated_category_id = '';
        if (!is_array($category_data)) {
            $category_data = array();
        }

        if (!empty($categoryId)) {
            /*$data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'id' => $categoryId), array('sortOrder' => 'ASC'));
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $category_data['parent_cat'][] = array('id' => $value->getId(), 'name' => $value->getName(), 'slug' => $value->getSlug(), 'media' => $value->getMedia(), 'description' => $value->getDescription());
                    $category_data                 = $this->getRecursiveSubcateoryDataChildToGrandParents($value->getParentId(), $lang_id, $category_data);
                }
            }*/
            
            $categoryService = $this->get(\AppBundle\Service\CategoryService::class);
            $data = $categoryService->findByCatNLang($categoryId,$langRefId);
            if (!empty($data)) {
                //foreach ($data as $key => $value) {
                    $category_data['parent_cat'][] = [
                        'id' => $data['id'], 
                        'name' => $data['name'], 
                        'slug' => $data['slug'], 
                        'media' => $data['media'], 
                        'description' => $data['description']
                    ];
                    $category_data = $this->getRecursiveSubcateoryDataChildToGrandParents($data['parentId'], $langRefId, $category_data);
                //}
            }
            
        }
        return $category_data;
    }

    public function getRecursiveSubcmsDataChildToGrandParents($cmsPageId = 0, $lang_id = 1, $cmspage_data = '')
    {
        if (!is_array($cmspage_data)) {
            $cmspage_data = array();
        }

        if (!empty($cmsPageId)) {
            $data = $this->getDoctrine()->getRepository('ContentcmsBundle:CmsPage')->findBy(array('langId' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'id' => $cmsPageId), array('sortOrder' => 'ASC'));

            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $cmspage_data['parent_cmspage'][] = array('id' => $value->getId(), 'name' => $value->getPageName(), 'slug' => $value->getSlug());
                    $cmspage_data                     = $this->getRecursiveSubcmsDataChildToGrandParents($value->getParentId(), $lang_id, $cmspage_data);
                }
            }
        }
        return $cmspage_data;
    }

    public function getPreviousNextProducts($category_id, $product_id)
    {
        $result = array();
        if (!empty($category_id) && !empty($product_id)) {
            $em  = $this->getDoctrine()->getManager();
            $sql = "SELECT  ( SELECT p.slug from product_category pc
                INNER JOIN product p ON p.id=pc.product_id WHERE pc.id < t.id and pc.category_id=$category_id AND t.product_id=$product_id ORDER BY p.id DESC limit 1 ) as next_slug ,
             ( SELECT p.slug from product_category pc
                INNER JOIN product p ON p.id=pc.product_id WHERE pc.id > t.id and pc.category_id=$category_id AND t.product_id=$product_id ORDER BY p.id ASC limit 1) as prev_slug from product_category as t WHERE t.category_id=$category_id  AND t.product_id=$product_id";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        }
        return $result;
    }

    /**
     * @Route("generatecaptcha", name="generatecaptcha")
     */
    public function createNewCaptchaAction()
    {
        return $this->phpcaptcha('#162453', '#fff', 120, 40, 10, 25);
    }

    public function phptext($text, $textColor, $backgroundColor = '', $fontSize, $imgWidth, $imgHeight, $dir, $fileName)
    {
        /* settings */
        $font = $this->container->getParameter('kernel.root_dir') . '/../web/assets/global/font/calibri.ttf';

        $textColor = $this->hexToRGB($textColor);

        $im        = imagecreatetruecolor($imgWidth, $imgHeight);
        $textColor = imagecolorallocate($im, $textColor['r'], $textColor['g'], $textColor['b']);

        if ($backgroundColor == '') {
            /* select random color */
            $colorCode       = array('#56aad8', '#61c4a8', '#d3ab92');
            $backgroundColor = $this->hexToRGB($colorCode[rand(0, count($colorCode) - 1)]);
            $backgroundColor = imagecolorallocate($im, $backgroundColor['r'], $backgroundColor['g'], $backgroundColor['b']);
        } else {
            /* select background color as provided */
            $backgroundColor = $this->hexToRGB($backgroundColor);
            $backgroundColor = imagecolorallocate($im, $backgroundColor['r'], $backgroundColor['g'], $backgroundColor['b']);
        }
        imagefill($im, 0, 0, $backgroundColor);
        list($x, $y) = $this->ImageTTFCenter($im, $text, $font, $fontSize);
        imagettftext($im, $fontSize, 0, $x, $y, $textColor, $font, $text);
        if (imagejpeg($im, $dir . $fileName, 90)) {
            /* save image as JPG */
            return json_encode(array('status' => true, 'image' => $dir . $fileName));
            imagedestroy($im);
        }
    }

    public function phpcaptcha($textColor, $backgroundColor, $imgWidth, $imgHeight, $noiceLines = 0, $noiceDots = 0, $noiceColor = '#162453')
    {
        $session = new Session();
        /* Settings */
        $text      = $this->random();
        $font      = $this->container->getParameter('kernel.root_dir') . '/../web/assets/global/font/monofont.ttf';
        $textColor = $this->hexToRGB($textColor);
        $fontSize  = $imgHeight * 0.75;

        $im        = imagecreatetruecolor($imgWidth, $imgHeight);
        $textColor = imagecolorallocate($im, $textColor['r'], $textColor['g'], $textColor['b']);

        $backgroundColor = $this->hexToRGB($backgroundColor);
        $backgroundColor = imagecolorallocate($im, $backgroundColor['r'], $backgroundColor['g'], $backgroundColor['b']);

        /* generating lines randomly in background of image */
        if ($noiceLines > 0) {
            $noiceColor = $this->hexToRGB($noiceColor);
            $noiceColor = imagecolorallocate($im, $noiceColor['r'], $noiceColor['g'], $noiceColor['b']);
            for ($i = 0; $i < $noiceLines; $i++) {
                imageline($im, mt_rand(0, $imgWidth), mt_rand(0, $imgHeight), mt_rand(0, $imgWidth), mt_rand(0, $imgHeight), $noiceColor);
            }
        }

        if ($noiceDots > 0) {
            /* generating the dots randomly in background */
            for ($i = 0; $i < $noiceDots; $i++) {
                imagefilledellipse($im, mt_rand(0, $imgWidth), mt_rand(0, $imgHeight), 3, 3, $textColor);
            }
        }

        imagefill($im, 0, 0, $backgroundColor);
        list($x, $y) = $this->ImageTTFCenter($im, $text, $font, $fontSize);
        imagettftext($im, $fontSize, 0, $x, $y, $textColor, $font, $text);

        imagejpeg($im, null, 90); /* Showing image */
        header('Content-Type: image/jpeg'); /* defining the image type to be shown in browser widow */
        imagedestroy($im); /* Destroying image instance */
        $this->get('session')->set('captcha_code', $text);
        die;
    }

    /* for random string */

    protected function random($characters = 6, $letters = '23456789bcdfghjkmnpqrstvwxyz')
    {
        $str = '';
        for ($i = 0; $i < $characters; $i++) {
            $str .= substr($letters, mt_rand(0, strlen($letters) - 1), 1);
        }
        return $str;
    }

    /* function to convert hex value to rgb array */

    protected function hexToRGB($colour)
    {
        if ($colour[0] == '#') {
            $colour = substr($colour, 1);
        }
        if (strlen($colour) == 6) {
            list($r, $g, $b) = array($colour[0] . $colour[1], $colour[2] . $colour[3], $colour[4] . $colour[5]);
        } elseif (strlen($colour) == 3) {
            list($r, $g, $b) = array($colour[0] . $colour[0], $colour[1] . $colour[1], $colour[2] . $colour[2]);
        } else {
            return false;
        }
        $r = hexdec($r);
        $g = hexdec($g);
        $b = hexdec($b);
        return array('r' => $r, 'g' => $g, 'b' => $b);
    }

    /* function to get center position on image */

    protected function ImageTTFCenter($image, $text, $font, $size, $angle = 8)
    {
        $xi  = imagesx($image);
        $yi  = imagesy($image);
        $box = imagettfbbox($size, $angle, $font, $text);
        $xr  = abs(max($box[2], $box[4]));
        $yr  = abs(max($box[5], $box[7]));
        $x   = intval(($xi - $xr) / 2);
        $y   = intval(($yi + $yr) / 2);
        return array($x, $y);
    }

    /* Captcha Code End */

    public function getTotalBrandProductCount($brandId = 0)
    {
        $count = 0;
        if (!empty($brandId)) {
            $em  = $this->getDoctrine()->getManager();
            $sql = "SELECT count(p.id) AS totalProduct from product p
                    INNER JOIN brand b ON p.brand_id=b.id
                    WHERE  b.id=$brandId  AND p.status='1' AND p.is_deleted='0' AND p.sale_price > 0";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY)[0];
            if (!empty($result)) {
                $count = $result['totalProduct'];
            }
        }
        return $count;
    }

    public function getTotalCategoryProductCount($categoryId = 0, $brandId = '')
    {
        $count = 0;
        if (!empty($brandId)) {
            if (!empty($categoryId)) {
                $em = $this->getDoctrine()->getManager();
                $sql = "SELECT p.id from product p
                    INNER JOIN  product_category pc
                    ON p.id=pc.product_id
                    INNER JOIN brand b ON p.brand_id=b.id
                    WHERE pc.category_id=$categoryId AND b.id=$brandId  AND p.status='1' AND p.is_deleted='0' AND p.sale_price > 0 AND p.base_price >0  GROUP BY p.id";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                if (!empty($result)) {
                    $count = count($result);
                }
            }
        } else {
            if (!empty($categoryId)) {
                $em = $this->getDoctrine()->getManager();
                $sql = "SELECT p.id from product p
                            INNER JOIN  product_category pc
                            ON p.id=pc.product_id
                            WHERE pc.category_id=$categoryId  AND p.status='1' AND p.is_deleted='0' AND p.sale_price > 0 AND p.base_price >0  GROUP BY p.id";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                if (!empty($result)) {
                    $count = count($result);
                }
            }
        }
        return $count;
    }

    public function getBlogCategoryList($param = array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false, 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = '';

        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id'] = '"' . str_replace(',', '","', $param['commaseparated_id']) . '"';
            $where_condition .= " AND c.category_slug IN (" . $param['commaseparated_id'] . ")";
        }
        if (!empty($param['lang_id'])) {
            $front_lang_id = $param['lang_id'];
        } else {
            $front_lang_id    = $session->get('front_lang_id');
        }
        $front_lang_ref_id = $GeneralService->getLangRefIdById($front_lang_id);
        $where_condition .= " AND bcl.lang_ref_id= '$front_lang_ref_id'";
        
        (!empty($param['orderby'])) ? $common_condition .= " c." . $param['orderby'] : $common_condition .= 'c.sort_order, bcl.name, c.id';
        $common_condition .= " " . $param['sort'];

        if ($param['limit']) {
            $common_condition .= " LIMIT " . $param['limit'];
        }

        $sql = "SELECT c.id as id,bcl.name as text,bcl.name as name,c.category_slug as slug "
                . " FROM blog_category c "
                . " LEFT JOIN blog_category_lang bcl ON bcl.cat_ref_id = c.uu_id "
                . " WHERE c.status=1 AND "
                . " c.is_deleted=0 $where_condition "
                . " ORDER BY $common_condition ";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // widget lang change --
        if(!empty($result)) {            
            $defaultLangCode = $GeneralService->getDefaultLangCode();
            $blogService   = $this->get(\AppBundle\Service\BlogService::class);
            $categoryDataByDefaultLang = $blogService->findCategoriesByLangId($defaultLangCode);
            $defaultCatData = [];
            
            if(!empty($categoryDataByDefaultLang)) {
                foreach ($categoryDataByDefaultLang as $k => $v) {
                    $defaultCatData[$v['id']]['name'] = $v['name'];
                    //$defaultCatData[$v['id']]['description'] = $v['description'];
                }
            }
            
            foreach ($result as $key => $value) {
                if($value['name'] == null || empty($value['name'])) {
                    $result[$key]['name'] = $result[$key]['text'] = $defaultCatData[$value['id']]['name'];
                }
            }
        }
        // -- widget lang change
        return $result;
    }

    public function getBlogCategoryListHtml($widgetTypeData, $themename)
    {
        $url_charater      = 'bloglist';
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getBlogCategoryList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id, 'onlyparents' => false));
        } else {
            $data = $this->getBlogCategoryList(); // all categories
        }
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if (!empty($data)) {
            $html = '<ul class="c-links">';
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html .= $this->getLiHtml($data, $extra_data);
            $html .= '</ul>';
        }
        return $html;
    }

    public function getBlogArchivesListHtml($widgetTypeData, $themename)
    {
        $url_charater   = 'bloglist';
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        $data           = array(
            '0'  => array('name' => $this->get('translator')->trans('front_Jan'), 'slug' => 'january'),
            '1'  => array('name' => $this->get('translator')->trans('front_feb'), 'slug' => 'february'),
            '2'  => array('name' => $this->get('translator')->trans('front_march'), 'slug' => 'march'),
            '3'  => array('name' => $this->get('translator')->trans('front_april'), 'slug' => 'april'),
            '4'  => array('name' => $this->get('translator')->trans('front_may'), 'slug' => 'may'),
            '5'  => array('name' => $this->get('translator')->trans('front_june'), 'slug' => 'june'),
            '6'  => array('name' => $this->get('translator')->trans('front_july'), 'slug' => 'july'),
            '7'  => array('name' => $this->get('translator')->trans('front_aug'), 'slug' => 'august'),
            '8'  => array('name' => $this->get('translator')->trans('front_sep'), 'slug' => 'september'),
            '9'  => array('name' => $this->get('translator')->trans('front_oct'), 'slug' => 'october'),
            '10' => array('name' => $this->get('translator')->trans('front_nov'), 'slug' => 'november'),
            '11' => array('name' => $this->get('translator')->trans('front_dec'), 'slug' => 'december'),
        );
        if (!empty($data)) {
            $html = '<ul class="c-links">';
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html .= $this->getLiHtml($data, $extra_data);
            $html .= '</ul>';
        }
        return $html;
    }

    public function getCurrentMarking($productId)
    {
        $marking_data   = array();
        $GeneralService = $this->get(GeneralService::class);
        $currentDate = date('Y-m-d H:i:s');
        $em             = $this->getDoctrine()->getManager();
        
        //Changed by Gayatri on 18.07.2023 due to changes in Marking Module.
        $field_data     = 'DISTINCT m.name as marking_name,m.isEffectPrice as is_effect_price,
            m.description as marking_description,ml.markingCode as marking_text,ml.image as marking_img,
                    pm.customPrice as marking_price,m.id as marking_id,
                    pm.startDate as start_date,
                    pm.endDate as end_date,
                    pm.showalways,m.showMsrpPricing as show_msrp_pricing';
        $join_array      = array();
        $condition_array = array('p.status' => 1, 'p.isDeleted' => 0, 'pm.isDeleted' => 0, 'pm.status' => 1, 'pm.product' => $productId);
        $operator_array  = array();

        $join_array[0]['type']        = '';
        $join_array[0]['join_from']   = 'pm.product';
        $join_array[0]['join_to']     = 'p.id';
        $join_array[0]['join_allies'] = 'pm';
        $join_array[0]['join_class']  = 'CatalogueBundle:ProductMarking';
        $join_array[0]['join_condition'] = " AND ('".$currentDate."' >= pm.startDate AND '".$currentDate."' <= pm.endDate) OR pm.showalways = 1";

        $join_array[1]['type']        = '';
        $join_array[1]['join_from']   = 'pm.marking';
        $join_array[1]['join_to']     = 'm.id';
        $join_array[1]['join_allies'] = 'm';
        $join_array[1]['join_class']  = 'CatalogueBundle:Marking';

        $join_array[2]['type']        = '';
        $join_array[2]['join_from']   = 'm.uuId';
        $join_array[2]['join_to']     = 'ml.uuId';
        $join_array[2]['join_allies'] = 'ml';
        $join_array[2]['join_class']  = 'CatalogueBundle:MarkingLang';
        //End by Gayatri

        $groupby = '';
        $result  = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Product", $allies = 'p', $condition_array, $operator_array, $field_data, $groupby, $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);

        if (!empty($result)) {
            $is_always    = 0; // always
            $is_daterange = 0; // Date Range
            $new_array    = array();

            foreach ($result as $key => $value) {
                $price = 0;
                $show_msrp_pricing = 1;
                $data  = array('always_show' => $value['showalways'], 'from_date' => $value['start_date'], 'to_date' => $value['end_date']);
                // if ($this->isShowWidgets($data) == true) {
                    if(isset($value['show_msrp_pricing']) && $value['show_msrp_pricing'] == 0){
                        $show_msrp_pricing = 0;
                    }
                    if ($value['is_effect_price'] == 1 && $value['showalways'] == 1) {
                        $is_always = 1;
                        if (!empty($value['marking_price'])) {
                            $price = $value['marking_price'];
                        }
                        if ($is_daterange == 0) {
                            $marking_data[] = array('name' => $value['marking_name'], 'price' => $price, 'flag' => $is_always, 'is_effect_price' => $value['is_effect_price'], 'marking_text' => $value['marking_text'], 'marking_description' => $value['marking_description'], 'marking_img' => $value['marking_img'], 'marking_id' => $value['marking_id'], 'show_msrp_pricing'=>$show_msrp_pricing);
                        }
                    } else if ($value['is_effect_price'] == 1 && $value['showalways'] == 0) {
                        if (!empty($value['marking_price'])) {
                            $price = $value['marking_price'];
                        }
                        $is_daterange = 1;
                        if ($is_always == 1) {
                            /* Replace data of always show element with effected_price */
                            $is_always = 0;                        
                            foreach ($marking_data as $k => $v) {
                                if ($v['flag'] == 1 && $v['is_effect_price'] == 1) {
                                    $marking_data[$k] = array('name' => $value['marking_name'], 'price' => $price, 'flag' => $is_always, 'is_effect_price' => $value['is_effect_price'], 'marking_text' => $value['marking_text'], 'marking_description' => $value['marking_description'], 'marking_img' => $value['marking_img'], 'marking_id' => $value['marking_id'], 'show_msrp_pricing'=>$show_msrp_pricing);
                                } else {
                                    $marking_data[$k] = $v;
                                }
                            }
                        } else {
                            $marking_data[] = array('name' => $value['marking_name'], 'price' => $price, 'flag' => $is_always, 'is_effect_price' => $value['is_effect_price'], 'marking_text' => $value['marking_text'], 'marking_description' => $value['marking_description'], 'marking_img' => $value['marking_img'], 'marking_id' => $value['marking_id'], 'show_msrp_pricing'=>$show_msrp_pricing);
                        }
                    } else {
                        $marking_data[] = array('name' => $value['marking_name'], 'price' => $price, 'flag' => $is_always, 'is_effect_price' => $value['is_effect_price'], 'marking_text' => $value['marking_text'], 'marking_description' => $value['marking_description'], 'marking_img' => $value['marking_img'], 'marking_id' => $value['marking_id'], 'show_msrp_pricing'=>$show_msrp_pricing);
                    }
                // }
            }
        }
        return $marking_data;
    }

    //Function for Rating star show calculation Start
    public function starWidth($widthcontent = '')
    {
        return round(($widthcontent['cw'] * $widthcontent['productStar']) / 5);
    }

    public function progressBarWidth($widthcontent = '')
    {
        $progressBarWidth = "";
        if (!empty($widthcontent['prodStarVal'])) {
            $width                               = round(($widthcontent['prodStarVal'] * 100) / $widthcontent['avgprdStar']);
            (is_nan($width)) ? $progressBarWidth = '0' : $progressBarWidth = $width;
        }
        return $progressBarWidth;
    }

    //Function for Rating star show calculation End
    //Function for Rating star Average Calculation Start
    public function starAvg($prod_review = array())
    {
        $prod_star = array();
        $average   = 0;
        foreach ($prod_review as $pr) {
            $prod_star[] = $pr->getratingStar();
        }
        //StarWise Count Start
        $IntVal         = array_map('intval', $prod_star);
        $prodStarIntVal = array_count_values($IntVal);
        $arr            = array('1', '2', '3', '4', '5');
        for ($i = 0; $i < 5; $i++) {
            //if not star given then set thet star 0
            if (!empty($prodStarIntVal)) {
                if (!array_key_exists($arr[$i], $prodStarIntVal)) {
                    $prodStarIntVal[$arr[$i]] = 0;
                }
            }
        }
        //StarWise Count End
        //Calculate the average.
        if (!empty($prod_star)) {
            $average = array_sum($prod_star) / count($prod_star);
        }
        $this->AvgData = array('average' => $average, 'cntprdStar' => count($prod_star), 'prodStarIntVal' => $prodStarIntVal);
        return $this->AvgData;
    }

    //Function for Rating star Average Calculation End
    //Function for Rating Star Design Start
    public function starBuild($prdStarData = '')
    {
        $starWidth = $this->starWidth(array('cw' => $prdStarData['cw'], 'productStar' => $prdStarData['productStar']));
        if (is_nan($starWidth)) {
            $starWidth = 0;
        }
        $liStar = '';
        for ($i = 1; $i <= 5; $i++) {
            $liStar .= '<li><a href="javascript:void(0)"><span class="fa fa-star"></span></a></li>';
        }
        $ReviewRating = '';
        $ReviewRating .= '<div data-role="ratingbar" class="star-ctr">
                        <ul class="star-bg">';
        $ReviewRating .= $liStar;
        $ReviewRating .= '</ul><ul class="star-fg" style="width:' . $starWidth . 'px;">';
        $ReviewRating .= $liStar;
        $ReviewRating .= '</ul></div>';
        return $ReviewRating;
    }

    //Function for Rating Star Design End
    public function getShortname($str, $characters = 45)
    {
        $str_len = strlen($str);
        if ($str_len > $characters) {
            return $arra = substr($str, 0, $characters) . '...';
        } else {
            return $str;
        }
    }

    public function taxCalculation($productData = array(), $country_id = '', $state_id = '', $city_id = '', $zipcode = '')
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $MyFrontService = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        //GET SITE TAX SETTINGS
        $taxSettings = $SiteData['tax_setting'];
        $SiteSetting['LangId'] = $SiteData['commonVariable']['LangId'];
        $SiteSetting['LangName'] = $SiteData['commonVariable']['LangName'];
        $SiteSetting['LangCode'] = $SiteData['commonVariable']['LangCode'];
        $language   = $GeneralService->getFrontLangauageSession($SiteSetting);
        $istaxflag = false;
        if ($taxSettings['tax_status'] == 1) {
          
                if (!empty($productData)) {
                    $product_id = $productData['productId'];
                    $taxFlag    = $productData['taxFlag'];
                    $taxId      = $productData['taxId'];
                    if ($taxFlag == 1) {
                        if ($taxId != '') {
                            //tax_rates
                            $totalTaxClassRate = 0;
                            $returnTax         = array();
                            if ($zipcode != '') {
                                $sql       = "SELECT DISTINCT taxrates_id,tax_id FROM tax_zipcode WHERE tax_id = $taxId AND '$zipcode' BETWEEN substring_index(`zipcode`,'-',1) AND substring_index(`zipcode`,'-',-1)";
                                $statement = $em->getConnection()->prepare($sql);
                                $statement->execute();
                                $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                                foreach ($result as $zip) {
                                    if ($taxId == $zip['tax_id']) {
                                        $taxRates = $zip['taxrates_id'];
                                        $taxData  = array();
                                        if ($country_id == '' && $state_id == '') {
                                            // && $city_id == '' //REMOVECITY
                                            $taxData = $em->getRepository(TaxRates::class)->findBy(array('id' => $taxRates, 'isDeleted' => 0));
                                        } elseif ($country_id != '' && $state_id == '') {
                                            // && $city_id == '' //REMOVECITY
                                            $taxData = $em->getRepository(TaxRates::class)->findBy(array('id' => $taxRates, 'countryId' => $country_id, 'isDeleted' => 0));
                                        } elseif ($country_id != '' && $state_id != '') {
                                            // && $city_id == '' //REMOVECITY
                                            $taxData = $em->getRepository(TaxRates::class)->findBy(array('id' => $taxRates, 'countryId' => $country_id, 'stateId' => $state_id, 'isDeleted' => 0));
                                        }
                                        //Ashley Template change,remove city from shipping calculation --REMOVECITY --START
                                        /*elseif ($country_id != '' && $state_id != '' && $city_id != '') {
                                        $taxCity = $em->getRepository(TaxCities::class)->findBy(array('city' => $city_id, 'tax' => $taxId));
                                        if (!empty($taxCity)) {
                                        foreach ($taxCity as $city) {
                                        $taxRates = $city->getTaxrates();
                                        if (($taxId == $taxRates->getTax()->getId()) && $taxRates->getIsDeleted() == '0') {
                                        $cityTaxZip = $em->getRepository(TaxZipcode::class)->findBy(array('taxrates' => $taxRates->getId()));
                                        if (!empty($cityTaxZip)) {
                                        $taxData = $em->getRepository(TaxRates::class)->findBy(array('id' => $taxRates->getId(), 'countryId' => $country_id, 'stateId' => $state_id, 'isDeleted' => 0));
                                        }
                                        }
                                        }
                                        }
                                        }*/
                                        //Ashley Template change,remove city from shipping calculation --REMOVECITY --END
                                        if (!empty($taxData)) {
                                            foreach ($taxData as $txt) {
                                                $return                 = array();
                                                $return['tax_rates_id'] = $txt->getId();
                                                $return['tax_rate']     = $txt->getTaxRate();
                                                //$return['tax_label'] = $txt->getTaxLabel();
                                                $LabelValue = json_decode($txt->getTaxLabel(), true);
                                                if (!empty($LabelValue)) {
                                                    $return['tax_label'] = $LabelValue[$language['LangCode']];
                                                } else {
                                                    $return['tax_label'] = $txt->getTaxLabel();
                                                }
                                                $return['is_compound_tax'] = $txt->getIsCompoundTax();
                                                if( $istaxflag == false){
                                                    array_push($returnTax, $return);
                                                    $istaxflag = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //Ashley Template change,remove city from shipping calculation --REMOVECITY --START
                            /*if ($city_id != '') {
                            $taxCity = $em->getRepository(TaxCities::class)->findBy(array('city' => $city_id));
                            if (!empty($taxCity)) {
                            foreach ($taxCity as $city) {
                            $taxRates = $city->getTaxrates();
                            if (($taxId == $taxRates->getTax()->getId()) && $taxRates->getIsDeleted() == '0') {
                            $cityTaxZip = $em->getRepository(TaxZipcode::class)->findBy(array('taxrates' => $taxRates->getId()));
                            if (empty($cityTaxZip)) {
                            $return = array();
                            $return['tax_rates_id'] = $taxRates->getId();
                            $return['tax_rate'] = $taxRates->getTaxRate();
                            $return['tax_label'] = $taxRates->getTaxLabel();
                            $return['is_compound_tax'] = $taxRates->getIsCompoundTax();
                            array_push($returnTax, $return);
                            }
                            }
                            }
                            }
                            }*/
                            //Ashley Template change,remove city from shipping calculation --REMOVECITY --STOP
                            if ($state_id != '') {
                                $taxData = $em->getRepository(TaxRates::class)->findBy(array('tax' => $taxId, 'stateId' => $state_id, 'isDeleted' => 0));
                                if (!empty($taxData)) {
                                    foreach ($taxData as $txt) {
                                        $stateTaxId = $txt->getId();
                                        //$stateTaxCity = $em->getRepository(TaxCities::class)->findBy(array('taxrates' => $stateTaxId));
                                        $stateTaxZip = $em->getRepository(TaxZipcode::class)->findBy(array('taxrates' => $stateTaxId));
                                        if (empty($stateTaxZip)) {
                                            //empty($stateTaxCity) //REMOVECITY
                                            $return                 = array();
                                            $return['tax_rates_id'] = $txt->getId();
                                            $return['tax_rate']     = $txt->getTaxRate();
                                            //$return['tax_label'] = $txt->getTaxLabel();
                                            $LabelValue = json_decode($txt->getTaxLabel(), true);
                                            if (!empty($LabelValue)) {
                                                $return['tax_label'] = $LabelValue[$language['LangCode']];
                                            } else {
                                                $return['tax_label'] = $txt->getTaxLabel();
                                            }
                                            $return['is_compound_tax'] = $txt->getIsCompoundTax();

                                            if( $istaxflag == false){
                                                    array_push($returnTax, $return);
                                                    $istaxflag = true;
                                                }
                                        }
                                    }
                                }
                            }
                            if ($country_id != '') {
                                $taxData = $em->getRepository(TaxRates::class)->findBy(array('tax' => $taxId, 'countryId' => $country_id, 'stateId' => 0, 'isDeleted' => 0));
                                if (!empty($taxData)) {
                                    foreach ($taxData as $txt) {
                                        $countryTaxId = $txt->getId();
                                        //$countryTaxCity = $em->getRepository(TaxCities::class)->findBy(array('taxrates' => $countryTaxId));
                                        $countryTaxZip = $em->getRepository(TaxZipcode::class)->findBy(array('taxrates' => $countryTaxId));
                                        if (empty($countryTaxZip)) {
                                            //empty($countryTaxCity) //REMOVECITY
                                            $return                 = array();
                                            $return['tax_rates_id'] = $txt->getId();
                                            $return['tax_rate']     = $txt->getTaxRate();
                                            //$return['tax_label'] = $txt->getTaxLabel();
                                            $LabelValue = json_decode($txt->getTaxLabel(), true);
                                            if (!empty($LabelValue)) {
                                                $return['tax_label'] = $LabelValue[$language['LangCode']];
                                            } else {
                                                $return['tax_label'] = $txt->getTaxLabel();
                                            }
                                            $return['is_compound_tax'] = $txt->getIsCompoundTax();
                                            if( $istaxflag == false){
                                                    array_push($returnTax, $return);
                                                    $istaxflag = true;
                                                }
                                        }
                                    }
                                }
                            }
                            $universalTaxData = $em->getRepository(TaxRates::class)->findBy(array('tax' => $taxId, 'countryId' => 0, 'stateId' => 0, 'isDeleted' => 0));
                            if (!empty($universalTaxData)) {
                                foreach ($universalTaxData as $universalTax) {
                                    $universalTaxId = $universalTax->getId();
                                    //$universalTaxCity = $em->getRepository(TaxCities::class)->findBy(array('taxrates' => $universalTaxId));
                                    $universalTaxZip = $em->getRepository(TaxZipcode::class)->findBy(array('taxrates' => $universalTaxId));
                                    if (empty($universalTaxZip)) {
                                        //empty($universalTaxCity) //REMOVECITY
                                        $return                 = array();
                                        $return['tax_rates_id'] = $universalTax->getId();
                                        $return['tax_rate']     = $universalTax->getTaxRate();
                                        //$return['tax_label'] = $universalTax->getTaxLabel();
                                        $LabelValue = json_decode($universalTax->getTaxLabel(), true);
                                        if (!empty($LabelValue)) {
                                            $return['tax_label'] = $LabelValue[$language['LangCode']];
                                        } else {
                                            $return['tax_label'] = $universalTax->getTaxLabel();
                                        }
                                        $return['is_compound_tax'] = $universalTax->getIsCompoundTax();
                                        if( $istaxflag == false){
                                                    array_push($returnTax, $return);
                                                    $istaxflag = true;
                                                }
                                    }
                                }
                            }
                            //TAX SORTING START
                            $new_array = array();
                            foreach ($returnTax as $key => $row) {
                                $new_array[$key] = $row['tax_rates_id'];
                            }
                            array_multisort($new_array, SORT_ASC, $returnTax);

                            foreach ($returnTax as $key => $row) {
                                $new_array[$key] = $row['is_compound_tax'];
                            }
                            array_multisort($new_array, SORT_ASC, $returnTax);
                            //TAX SORTING END
                            $without_compound_rate = 0;
                            foreach ($returnTax as $key => $value) {
                                if ($value['is_compound_tax'] != '1') {
                                    $without_compound_rate += $value['tax_rate'];
                                    $returnTax[$key]['net_tax_rate'] = $value['tax_rate'];
                                }
                            }

                            $with_compound_rate = 0;
                            $common_compond_tax = $without_compound_rate;
                            foreach ($returnTax as $key => $value) {
                                if ($value['is_compound_tax'] == '1') {
                                    $cc_tax = ($common_compond_tax * $value['tax_rate']) / 100;
                                    $common_compond_tax += $value['tax_rate'];
                                    $with_compound_rate += ($value['tax_rate'] + $cc_tax);
                                    $returnTax[$key]['net_tax_rate'] = $value['tax_rate'] + $cc_tax;
                                }
                            }
                            $totalTaxClassRate = $without_compound_rate + $with_compound_rate;
                            if ($taxSettings['price_with_tax'] == 'no_exclusive') {
                                $returnTax[$key]['price_with_tax'] = true;
                                $returnTaxCalc     = array('totalTaxClassRate' => $totalTaxClassRate, 'returnArray' => $returnTax);
                                return $returnTaxCalc;
                           
                            }elseif($taxSettings['price_with_tax'] == 'yes_inclusive' && $taxSettings['price_with_tax_inclusive_show_separate_tax'] == 1){
                                $returnTax[$key]['show_separate_tax'] = true;
                                $returnTaxCalc     = array('totalTaxClassRate' => $totalTaxClassRate, 'returnArray' => $returnTax);
                                return $returnTaxCalc;
                        }
                    }
                }
            }
        }
    }

    public function getMsrpPrice($saleprice = 0, $productData = array(), $isVariation = false, $container = false)
    {
        // $retail_price = $map_price = $promotion_price = $freight_price = 0;
        // $original_sale_price = $saleprice;
        if ($container) {
            $this->container = $container;
        }
        $MyFrontService  = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        // $pricing = array();
        // $em = $this->getDoctrine()->getManager();
        // $sql = "SELECT column_key, column_value FROM product_pricing WHERE product_id =".$productData['productId'] ." AND column_value > 0";
        // $statement = $em->getConnection()->prepare($sql);
        // $statement->execute();
        // $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // if(!empty($result)){
        //     foreach($result as $res){
        //         $pricing[$res['column_key']] = $res['column_value'];
        //     }
        //     if(isset($pricing['retail_price'])){
        //         $retail_price = $pricing['retail_price'];
        //     }
        //     if(isset($pricing['map_price'])){
        //         $map_price = $pricing['map_price'];
        //     }
        //     if(isset($pricing['freight_price'])){
        //         $freight_price = $pricing['freight_price'];
        //     }
        // }
        if (is_array($saleprice)) {
            $msrp  = $saleprice['msrp'];
            $price = $saleprice['sale'];
        } else {
            $msrp = $price = $saleprice;
        }
        // if($isVariation == false){
        //     $ProductPromotion = $MyFrontService->getProductPromotion($productData['productId']);
        //     if(!empty($ProductPromotion)){
        //         foreach($ProductPromotion as $promotion){
        //             if($promotion['is_effect_price'] > 0) {
        //                 $promotion_price += $promotion['custom_price'];
        //             }
        //         }
        //         if($promotion_price) {
        //             $price = $promotion_price;
        //         }
        //     }
        //     if(!empty($pricing)){
        //         if($promotion_price == 0 && isset($pricing['retail_price'])){
        //             $price = $pricing['retail_price'];
        //         }
        //         if(isset($pricing['map_price'])){
        //             if($pricing['map_price'] > $price){
        //                 $price = $pricing['map_price'];
        //             }
        //         }
        //         if (!is_array($saleprice)) {
        //             $msrp = $price;
        //         }
        //     }
        // }
        $GeneralService    = $this->get(GeneralService::class);
        $customerSessionId = $GeneralService->getCustomerSession();

        $sessionCountryId    = '';
        $sessionStateId      = '';
        $sessionCityId       = '';
        $sessionZipcode      = '';
        $msrp_percentage     = 0;
        $totalTaxClassRate   = 0;
        if (!empty($SiteData['msrp'])) {
            $msrp_percentage = $SiteData['msrp'];
        }
        $session         = new Session();
        $CheckoutService = $session->get('CheckoutService');        

        if (!empty($CheckoutService)) {
            $sessionCountryId = !empty($CheckoutService) && !empty($CheckoutService->getInstoreCountry()) ? $CheckoutService->getInstoreCountry() : $CheckoutService->getShipCountry();
            $sessionStateId   = !empty($CheckoutService) &&  !empty($CheckoutService->getInstoreState()) ? $CheckoutService->getInstoreState() : $CheckoutService->getShipState();
            $sessionCityId    = ($CheckoutService->getInstoreCity() != 0) ? $CheckoutService->getInstoreCity() : $CheckoutService->getShipCity();
            $sessionZipcode   = !empty($CheckoutService) && !empty($CheckoutService->getInstoreZip()) ? $CheckoutService->getInstoreZip() : $CheckoutService->getShipZip();
        }
        //GET SITE TAX SETTINGS
        $taxSettings = $SiteData['tax_setting'];
        $msrp_price  = array('msrp_price' => $msrp, 'save_price' => 0, 'sale_price' => $price);

        $totalTaxClass     = $this->taxCalculation($productData, $sessionCountryId, $sessionStateId, $sessionCityId, $sessionZipcode);
        $totalTaxClassRate = 0;
        if (!empty($totalTaxClass)) {
            $totalTaxClassRate = $totalTaxClass['totalTaxClassRate'];
        }
        $msrp_price_p=array();
        if (!empty($price)) {
            if ($msrp != $price) {
                $calculated_price = $msrp;
            } else {
                $calculated_price = $price + (($price * $msrp_percentage) / 100);
            }
            $saved_price = $calculated_price - $price;
            $sale_price  = $price;
           
           
            if ($totalTaxClassRate > 0) {

                    if ($taxSettings['price_with_tax'] == 'yes_inclusive' && $taxSettings['price_with_tax_inclusive_show_separate_tax'] == 1) {
                           
                            $msrp_price_p = $this->getpriceforsdisplay($calculated_price,$saved_price,$sale_price,$totalTaxClassRate);
                            
                            $calculated_price_tax = $GeneralService->inclusiveTaxCalculation($calculated_price , $totalTaxClassRate);
                            $saved_price_tax      = $GeneralService->inclusiveTaxCalculation($saved_price , $totalTaxClassRate);
                            $sale_price_tax       = $GeneralService->inclusiveTaxCalculation($price , $totalTaxClassRate);

                            $calculated_price = $calculated_price - $calculated_price_tax;
                            $saved_price      = $saved_price - $saved_price_tax;
                            $sale_price       = $price - $sale_price_tax;
                    
                     }elseif ($taxSettings['price_with_tax'] == 'yes_inclusive' && $taxSettings['price_with_tax_inclusive_show_separate_tax'] == 0) {
                           //do nothing
                    
                     }elseif ($taxSettings['price_with_tax'] == 'no_exclusive' && $taxSettings['display_shop_price'] == 'including_tax' &&  $taxSettings['display_cart_checkout_price']  == 'including_tax') {
                            $calculated_price_tax = ($calculated_price * $totalTaxClassRate) / 100;
                            $saved_price_tax      = ($saved_price * $totalTaxClassRate) / 100;
                            $sale_price_tax       = ($price * $totalTaxClassRate) / 100;

                            $calculated_price_d = $calculated_price + $calculated_price_tax;
                            $saved_price_d       = $saved_price + $saved_price_tax;
                            $sale_price_d       = $price + $sale_price_tax;
                           
                            $msrp_price_p = $this->getpriceforsdisplay($calculated_price_d, $saved_price_d, $sale_price_d, $totalTaxClassRate);
                   
                     }elseif ($taxSettings['price_with_tax'] == 'no_exclusive' && $taxSettings['display_shop_price'] == 'including_tax' &&  $taxSettings['display_cart_checkout_price']  != 'including_tax') {
                           
                            $calculated_price_tax = ($calculated_price * $totalTaxClassRate) / 100;
                            $saved_price_tax      = ($saved_price * $totalTaxClassRate) / 100;
                            $sale_price_tax       = ($price * $totalTaxClassRate) / 100;

                            $calculated_price_d = $calculated_price + $calculated_price_tax;
                            $saved_price_d       = $saved_price + $saved_price_tax;
                            $sale_price_d       = $price + $sale_price_tax;
                           
                            $msrp_price_p = $this->getpriceforsdisplay($calculated_price_d, $saved_price_d, $sale_price_d, $totalTaxClassRate);
                     
                     }elseif ($taxSettings['price_with_tax'] == 'no_exclusive' && $taxSettings['display_shop_price'] == 'excluding_tax' &&  $taxSettings['display_cart_checkout_price']  == 'including_tax') {
                          
                           // do nothing
                            
                     }
          
            }

            //echo $sale_price;
            $msrp_price_currency = $GeneralService->currencyFormatting($calculated_price);
            $save_price_currency = $GeneralService->currencyFormatting($saved_price);
            $sale_price_currency = $GeneralService->currencyFormatting($sale_price);
            //echo $msrp_price_currency.' '. $save_price_currency.' ' .$sale_price_currency;exit;
            $msrp_price = array(
                'msrp_price' => $calculated_price,
                'save_price' => $saved_price,
                'sale_price' => $sale_price,
                'totalTaxRate' => $totalTaxClassRate,
                //'originalPrice' => $price,
                'msrp_price_currency' => $msrp_price_currency,
                'save_price_currency' => $save_price_currency,
                'sale_price_currency' => $sale_price_currency,

                'msrp_price_p' => $msrp_price_p,

                // 'retail_price' => $retail_price,
                // 'map_price' => $map_price,
                // 'promotion_price' => $promotion_price,
                // 'freight_price' => $freight_price,
                // 'original_sale_price' => $original_sale_price,
            );
        }
        return $msrp_price;
    }

    public function getpriceforsdisplay($calculated_price, $saved_price, $sale_price, $totalTaxClassRate)
    { 
            $GeneralService    = $this->get(GeneralService::class);
            $msrp_price_currency = $GeneralService->currencyFormatting($calculated_price);
            $save_price_currency = $GeneralService->currencyFormatting($saved_price);
            $sale_price_currency = $GeneralService->currencyFormatting($sale_price);
            //echo $msrp_price_currency.' '. $save_price_currency.' ' .$sale_price_currency;exit;
            return array(
                'msrp_price' => $calculated_price,
                'save_price' => $saved_price,
                'sale_price' => $sale_price,
                'totalTaxRate' => $totalTaxClassRate,
                //'originalPrice' => $price,
                'msrp_price_currency' => $msrp_price_currency,
                'save_price_currency' => $save_price_currency,
                'sale_price_currency' => $sale_price_currency,
                'price_with_tax_inclusive_show_separate_tax' => true
                // 'retail_price' => $retail_price,
                // 'map_price' => $map_price,
                // 'promotion_price' => $promotion_price,
                // 'freight_price' => $freight_price,
                // 'original_sale_price' => $original_sale_price,
            );
    }


    /* ORDER MAIL */

    public function ordermail($order_id = '', $order_type = '', $order_language = '')
    {
        $em              = $this->getDoctrine()->getManager();
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting     = $GeneralService->getStoreMainConfig();
        //$StoreImgSetting = json_decode($SiteSetting['storeLogoSetting']);
        $StoreImgSetting = json_decode($SiteSetting['storeLogoSetting'], true);
        if (!empty($StoreImgSetting)) {
            $params = array();
            if (!empty($StoreImgSetting['store_main_logo'])) {
                $params['option_type']   = 'common';
                $params['option_value']  = $StoreImgSetting['store_main_logo'];
                $params['option_folder'] = 'storelogo';

                $StoreImgSetting['store_main_logo'] = $GeneralService->getAWSUploadImages($params);
            }
        }
        $store_setting   = (json_decode($SiteSetting['allotherSetting']));
        $sales_Person    = $store_setting->sales_person;
        $orderData       = $em->getRepository('SalesBundle:Orders')->find($order_id);
        if (!empty($orderData)) {
            $curr_data      = $orderData->getCurrencySymbol();
            $currencySymbol = json_decode($curr_data)->currency_symbol;
            $currencyCode   = json_decode($curr_data)->currency_iso_code;
            $langid         = $orderData->getLang()->getId();
            if (!empty($langid)) {
                $order_language = $langid;
            }
        }
        /* CUSTOMER USER TYPE */
        $customerData = $orderData->getCustomer();
        if ($customerData) {
            $customerUserTypeId = $customerData->getUserTypeId();
        }
        $customerUserTypeSlug = '';
        $orderCustomerData    = array();
        if (!empty($customerUserTypeId) && $customerUserTypeId > 0) {
            $UserTypeData         = $em->getRepository('DealersBundle:UserType')->find($customerUserTypeId);
            $customerUserTypeSlug = $UserTypeData->getSlug();
        }
        if (!empty($customerUserTypeId)) {
            $orderCustomerData['customer_user_type_id']   = $customerUserTypeId;
            $orderCustomerData['customer_user_type_slug'] = $customerUserTypeSlug;
        }
        /* CUSTOMER USER TYPE */

        $shippingFirstName   = $orderData->getShippingFirstName();
        $shippingMiddleName  = $orderData->getShippingMiddleName();
        $shippingLastName    = $orderData->getShippingLastName();
        $shippingCompanyName = $orderData->getShippingCompanyName();
        $shippingAddress1    = $orderData->getShippingAddress1();
        $shippingAddress2    = $orderData->getShippingAddress2();
        $shippingCountryName = $this->getCountryNameById($orderData->getShippingCountryId());
        $shippingStateName   = $this->getStateNameById($orderData->getShippingState());
        $shippingCity        = $this->getCityNameById($orderData->getShippingCity());
        $shippingZipcode     = $orderData->getShippingZipcode();
        $shippingEmailId     = $orderData->getShippingEmail();
        $shippingContact     = $orderData->getShippingPhone();
        $shippingFax         = $orderData->getShippingFax();
        $billingFirstName    = $orderData->getBillingFirstName();
        $billingMiddleName   = $orderData->getBillingMiddleName();
        $billingLastName     = $orderData->getBillingLastName();
        $billingCompanyName  = $orderData->getBillingCompanyName();
        $billingAddress1     = $orderData->getBillingAddress1();
        $billingAddress2     = $orderData->getBillingAddress2();
        $billingCountryName  = $this->getCountryNameById($orderData->getBillingCountryId());
        $billingStateName    = $this->getStateNameById($orderData->getBillingState());
        $billingCity         = $this->getCityNameById($orderData->getBillingCity());
        $billingZipcode      = $orderData->getBillingZipcode();
        $billingEmailId      = $orderData->getBillingEmail();
        $billingContact      = $orderData->getBillingPhone();
        $billingFax          = $orderData->getBillingFax();
        $InvoiceAddData      = json_decode($orderData->getAdditionDetails());

        $orderSubTotal    = $orderData->getSubTotal();
        $orderTotalAmount = $orderData->getTotalAmount();
        $orderNumber      = $orderData->getOrderNumber();
        $orderNotes = $orderData->getOrderNotes();

        /* Shipping Address */
        $shippingDetails = array('firstname' => $shippingFirstName, 'middlename' => $shippingMiddleName, 'lastname' => $shippingLastName, 'companyname' => $shippingCompanyName, 'address1' => $shippingAddress1, 'address2' => $shippingAddress2, 'city' => $shippingCity, 'zipcode' => $shippingZipcode, 'state' => $shippingStateName, 'country' => $shippingCountryName, 'email' => $shippingEmailId, 'phone' => $shippingContact, 'fax' => $shippingFax);

        /* Billing Address */
        $billingDetails = array('firstname' => $billingFirstName, 'middlename' => $billingMiddleName, 'lastname' => $billingLastName, 'companyname' => $billingCompanyName, 'address1' => $billingAddress1, 'address2' => $billingAddress2, 'city' => $billingCity, 'zipcode' => $billingZipcode, 'state' => $billingStateName, 'country' => $billingCountryName, 'email' => $billingEmailId, 'phone' => $billingContact, 'fax' => $billingFax);

        /* Invoice Addtional Details */
        $invoiceAdditonalDetails = array();
        if ($InvoiceAddData) {
            $invoiceAdditonalDetails = array('firstname' => $InvoiceAddData->invoice_first_name, 'lastname' => $InvoiceAddData->invoice_last_name,'businessname' => $InvoiceAddData->invoice_business_name, 'companyname' => $InvoiceAddData->invoice_company_name, 'email' => $InvoiceAddData->invoice_email, 'address1' => $InvoiceAddData->invoice_address1, 'address2' => $InvoiceAddData->invoice_address2, 'zip' => $InvoiceAddData->invoice_zip, 'country' => $InvoiceAddData->invoice_country, 'city' => $InvoiceAddData->invoice_city, 'state' => $InvoiceAddData->invoice_state_id, 'phone' => $InvoiceAddData->invoice_phone, 'tax' => $InvoiceAddData->taxId);
        }
        //Salse Person
        $sales_person = "0";
        if ($sales_Person == "Yes") {
            $salesPerson = $orderData->getSalesPerson();
            if ($salesPerson == "0") {
                $sales_person = "0";
            } else {
                $salesPerson  = json_decode($orderData->getSalesPerson());
                if(!empty($salesPerson)){
                    $sales_person = array('name' => $salesPerson[0]->name, 'email' => $salesPerson[0]->email);
                }
            }
        }

        /* Payment Details */
        $orderDate      = $orderData->getCreatedDate()->format('d M, Y  h:i A');
        $deliveryDate = $orderData->getDeliveryDate()->format('d M, Y  h:i A');
        $paymentDetails = $em->getRepository('SalesBundle:OrderPayment')->findBy(array('order' => $orderData->getId()));

        $totalBalaceDue = $GeneralService->currencyFormatting($orderData->getTotalAmount());
        if (!empty($paymentDetails)) {
            $total_paid_array = [];
            foreach ($paymentDetails as $key2 => $orderPayment) {
                $total_paid_array[] = $orderPayment->getPayAmount();
            }
            $totalPaid         = array_sum($total_paid_array);
            $totalBalaceDue    = $GeneralService->currencyFormatting($orderData->getTotalAmount() - $totalPaid);
        }
        /* Shipping Details */
        $totalShippingChargeVal  = $orderData->getShippingCharge();
        $totalShippingCharge  = $GeneralService->currencyFormatting($totalShippingChargeVal);
        $ShippingData         = (!empty($orderData->getShippingType())) ? json_decode($orderData->getShippingType()) : '';
        $ShippingType         = ''; // Name of Shipping Method
        $shipping_detail_html = '';
        if (!empty($ShippingData)) {
            $ShippingType = str_replace('(Basic Delivery)', '', $ShippingData->shipping_method_name);
            if($totalShippingChargeVal>0){
                    $shipping_detail_html .= '<tr><td colspan="3">&nbsp;</td><td class="font_family_lang" style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;">' . $ShippingType . ': </td><td class="font_family_lang" style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;"><strong>'.$totalShippingCharge.'</strong></td></tr>';
            }
        }
        /* All OrderDetails */
        //$orderDetailsData = array('orderData' => $orderData, 'orderDate' => $orderDate, 'shippingDetails' => $shippingDetails, 'billingDetails' => $billingDetails, 'paymentDetails' => $paymentDetails, 'ShippingType' => $ShippingType, 'shipping_detail_html' => $shipping_detail_html, 'invoiceAdditonalDetails' => $invoiceAdditonalDetails, "salesPerson" => $sales_person);
        $orderDetailsData = array('orderData' => $orderData, 'orderDate' => $orderDate, 'deliveryDate' => $deliveryDate, 'shippingDetails' => $shippingDetails, 'billingDetails' => $billingDetails, 'paymentDetails' => $paymentDetails, 'ShippingType' => $ShippingType, 'shipping_detail_html' => $shipping_detail_html, 'invoiceAdditonalDetails' => $invoiceAdditonalDetails, "salesPerson" => $sales_person, "orderNotes" => $orderNotes);
        /*  Product Data  */
        $shoppingCartData = $this->getDoctrine()->getRepository('SalesBundle:OrderDetails')->findBy(array('order' => $orderData->getId()));
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        foreach ($shoppingCartData as $cartdata) {
            $quantity        = $cartdata->getProductQty();
            $total           = (($cartdata->getProdPackPrice()) * ($cartdata->getProductQty()));
            $total           = $GeneralService->currencyFormatting($total);
            $product         = $em->getRepository(Product::class)->find($cartdata->getProduct());
            $productName = "";
            if (!empty($product)) {
                $productRefId = $product->getCtbRefId();
                $productLangObj = $em->getRepository('CatalogueBundle:ProductLang')->findOneBy([
                    'langRefId' => $sessionLangRefId,
                    'productRefId' => $productRefId
                ]);
                $productName = "";
                if(!empty($productLangObj)) {
                    $productName = $productLangObj->getName();
                }
            }
            $name            = $productName;
            $sku             = $cartdata->getProductSku();
            $attributeName   = $cartdata->getAttributeName();
            $otherDetails    = $cartdata->getOtherDetails();
            $otherDetailsArr = json_decode($otherDetails, true);
            $upcCode         = '';
            if (!empty($otherDetailsArr)) {
                $upcCode = $otherDetailsArr['upc_code'];
            }
            $media  = $product->getMainImage();
            $price  = $GeneralService->currencyFormatting($cartdata->getProdPackPrice());
            $data[] = array('name' => $name, 'sku' => $sku, 'media' => $media, 'quantity' => $quantity, 'price' => $price, 'total' => $total, 'name' => $name, 'attributeName' => $attributeName, 'upcCode' => $upcCode, 'orderCustomerData' => $orderCustomerData);
        }
        foreach ($paymentDetails as &$pay) {
            $pay->setPayAmount($GeneralService->currencyFormatting($pay->getPayAmount()));
            if ($pay->getCardDetails() != "") {
                    $arrTemp = json_decode($pay->getCardDetails(), true);
                    if (!empty($arrTemp)) {
                        $cardNumber = $methodType = "";
                       
                        foreach ($arrTemp as $cardkey => $cardKeyVal) {
                            if (strpos($cardkey, "_type") > 0) {
                                $methodType = $cardKeyVal;
                            }
                            if (strpos($cardkey, "_number") > 0) {
                                $cardNumber = $cardKeyVal;
                            }
                        }
                         if($pay->getPaymentMethod() == 'Paymentez') {
                            $arrTempresponse = json_decode($pay->getPaymentResponse(), true);
                            foreach ($arrTempresponse as $responsekey => $responseKeyVal) {
                                if ($responsekey == "authorization_code") {
                                        $PaymentDetailsHTML .= '<br> Authorization code: '  . $responseKeyVal . "<br>";
                                    }
                                if ($responsekey == "id") {
                                    $PaymentDetailsHTML .= 'Authorization id: '  . $responseKeyVal;
                                }
                             }
                        }
                        if ($methodType != "") {
                            $PaymentDetailsHTML .= " - <br>" . $methodType . "<br>";
                        }
                        if ($cardNumber != "") {
                            $PaymentDetailsHTML .= $cardNumber;
                        }
                    } else {
                        $PaymentDetailsHTML .= $pay->getCardDetails(); 
                    }
                    $pay->setCardDetails($PaymentDetailsHTML);
                }
        }
        //Currency Formatting
        $subTotal        = $GeneralService->currencyFormatting($orderSubTotal);
        $totalPay        = $GeneralService->currencyFormatting($orderTotalAmount);
        $tax_detail      = "";
        $tax_detail_html = ""; 
        $tax_json = json_decode($orderData->getTaxDetails());
         if (!empty($tax_json)) { 
            $tax_detail = $tax_json; 
            if (!empty($tax_detail)) {
                foreach ($tax_detail as $key => $value) {
                    if($value > 0){
                        $tax_detail_html .= '<tr><td colspan="3">&nbsp;</td><td style="padding: 5px 0 5px 10px;border-bottom:solid 1px #eaeaea;" class="font_family_lang"><span class="font_family_lang">' .html_entity_decode($key).':</span></td><td style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;" class="font_family_lang"><strong>' . $GeneralService->currencyFormatting($orderData->getTotalTax()) . '</strong> </td></tr>';

                        //$tax_detail_html .= '<tr><td style=" width: 70%; padding: 5px 0 0 0;"></td><td style="text-align:left; width: 30%; padding: 5px 0 0 0;"><strong  class="font_family_lang"><span class="font_family_lang">'.html_entity_decode($key).': </span></strong><span>'.$GeneralService->currencyFormatting($orderData->getTotalTax()).' </span></td></tr>';
                    }
                }
            }
        }
 
        $discount_detail_html = '';
        if (!empty($orderData->getTotalDiscount())) {
            //Discount Details
            $TotalDiscount = $orderData->getTotalDiscount();
            $TotalDiscount = $GeneralService->currencyFormatting($TotalDiscount);
            //$discount_detail_html .= '<tr><td style="width: 65%;padding: 5px 20px;"></td><td style="width: 30%; text-align:left; padding: 5px 0 0 0;"><strong>' . $this->get('translator')->trans('front_coupon_discount') . '</strong><span> ' . $TotalDiscount . '</span></td></tr>';
            $discount_detail_html .= '<tr><td colspan="3">&nbsp;</td><td style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;" class="font_family_lang">' . $this->get('translator')->trans('front_coupon_discount') . ': </td><td style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;" class="font_family_lang"><strong>' . $TotalDiscount . '</strong></td></tr>';
        }

        $warranty_detail = $warranty_detail_html = "";
        if (!empty($orderData->getWarrantyDetails())) {
            //Warranty Details
            $warranty_detail = json_decode($orderData->getWarrantyDetails(), true);
            $warrantyPrice   = $GeneralService->currencyFormatting($warranty_detail['warranty_price']);
            //$warranty_detail_html .= '<tr><td style="width: 65%;padding: 5px 20px;"></td><td style="text-align:left;width: 65%;padding: 5px 20px;"><strong>' . $this->get('translator')->trans('front_warranty') . ': </strong><span> ' . $warrantyPrice . '</span></td></tr>';
            $warranty_detail_html .= '<tr><td colspan="3">&nbsp;</td><td style="padding: 5px 0 5px 10px; border-bottom:solid 1px #eaeaea;" class="font_family_lang">' . $this->get('translator')->trans('front_warranty') . '</td><td style="padding: 7px 0 7px 10px; border-bottom:solid 1px #eaeaea;" class="font_family_lang"><strong>' . $warrantyPrice . '</strong></td></tr>';
        }

        /* All Productdetails */
        $productDetailsData = array('data' => $data, 'subTotal' => $subTotal, 'totalPay' => $totalPay, 'tax_detail_html' => $tax_detail_html, 'discount_detail_html' => $discount_detail_html, 'warranty_detail_html' => $warranty_detail_html, 'totalBalaceDue' => $totalBalaceDue);

        /* PDF GENERATE */
        // Instantiate and use the dompdf class
        $tokens_order_values = array();
        //Modify by milind dave on 30112023 for resolution of T-0118881
        $EmailTemplate       = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $order_language, 'slug' => 'customer-new-order-self', 'status' => 1, 'isDeleted' => 0));
        if (!empty($EmailTemplate)) {
            $temp_template = $EmailTemplate[0]->getTemplate();
            $tokens_order  = array('[COMPANY_DETAILS]', '[ORDER_DETAILS]', '[ORDER_SHIPPING_ADDRESS]', '[ORDER_BILLING_ADDRESS]', '[SHOPPING_CART_DETAILS]', '[ORDER_INVOICE_DETAILS]', '[SALES_PERSON]','[ORDER_PAYMENT_DETAILS]');
            for ($i = 0; $i < count($tokens_order); $i++) {
                if (stripos($temp_template, $tokens_order[$i]) != false) {
                    $tokens_order_values[] = $tokens_order[$i];
                }
            }
             $baseUrl = $GeneralService->getBaseUrl();
            $body = $this->renderView('SalesBundle:Admin/Order:orderdetail_pdf.html.twig', array(
                'SiteSetting'        => $SiteSetting,
                'langCode'=>$SiteSetting['langCode'],
                'StoreImgSetting'    => $StoreImgSetting,
                'orderDetailsData'   => $orderDetailsData,
                'productDetailsData' => $productDetailsData,
                'currencyCode'       => $currencyCode,
                'sales_Person'       => $sales_Person,
                'baseUrl'            => $baseUrl,
                'tokensOrder'        => $tokens_order_values,
            ));

            $dompdf = new Dompdf();
            // Load HTML content

            $dompdf->loadHtml($body);
            $dompdf->set_option('isRemoteEnabled', TRUE);
            $dompdf->set_option('defaultFont', 'Arial');

            //Need to tell system that access font from this below path 
            $fontDirectory = $this->container->getParameter('kernel.root_dir') . '/../var/cache'; 
          
            if(!is_dir($fontDirectory)) {
               mkdir($fontDirectory,0777,true);
            }
         
            $dompdf->set_option('chroot',$fontDirectory);
            $dompdf->set_option('fontDir', $fontDirectory);
            $dompdf->set_option('fontCache',$fontDirectory);  
            //$dompdf->setPaper('A4', 'portrait');
            $paperSize = [0, 0, 612.00, 792.00];
+           $dompdf->setPaper($paperSize, 'portrait');

            // Render the HTML as PDF
            $dompdf->render();
            // Output the generated PDF to Browser
            $output = $dompdf->output();
            $pdfDir = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/invoice';
            if (!is_dir($pdfDir)) {
                //Directory does not exist, so lets create it.
                mkdir($pdfDir, 0755, true);
            }
            $attachment_name = 'Order-' . $orderNumber . '.pdf';
            file_put_contents('assets/uploads/invoice/' . $attachment_name, $output);
            // email for customer
            $toData                = $shippingEmailId;
            $subject_tokens        = array('[ORDER_NUMBER]', '[SITE_NAME]');
            $subject_tokens_values = array($orderNumber, $SiteSetting['mainName']);
            $customer_subject      = str_replace($subject_tokens, $subject_tokens_values, $EmailTemplate[0]->getSubject());
            $tokens                = array('[CUSTOMER_FULLNAME]', '[SITE_NAME]', '[ORDER_NUMBER]', '[COMPANY_DETAILS] [ORDER_DETAILS] [ORDER_SHIPPING_ADDRESS] [ORDER_BILLING_ADDRESS] [SHOPPING_CART_DETAILS] [ORDER_PAYMENT_DETAILS] [ORDER_INVOICE_DETAILS] [SALES_PERSON]', '[STORE_SUPPORT_EMAIL]', '[STORE_SUPPORT_PHONE]');
            $cutomerFullname       = $shippingFirstName . ' ' . $shippingMiddleName . ' ' . $shippingLastName;

            $body1 = $this->renderView('SalesBundle:Admin/Order:orderdetail_pdf.html.twig', array(
                'SiteSetting'        => $SiteSetting,
                'StoreImgSetting'    => $StoreImgSetting,
                'orderDetailsData'   => $orderDetailsData,
                'productDetailsData' => $productDetailsData,
                'currencyCode'       => $currencyCode,
                'sales_Person'       => $sales_Person,
                'tokensOrder'        => $tokens_order_values,
                'logopath'           => 'rel',
            ));

            $tokens_values = array($cutomerFullname, $SiteSetting['mainName'], $orderNumber, $body1, $SiteSetting['storeSupportEmail'], $SiteSetting['contactPhone']);

            $final_body                  = str_replace($tokens, $tokens_values, $EmailTemplate[0]->getTemplate());
            $emailData                   = array('subject' => $customer_subject, 'body' => $final_body);
            //$fromData                    = array('email' => $SiteSetting['storeSupportEmail'], 'name' => $SiteSetting['mainName']);
            $attachments[0]['file_path'] = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/invoice/';
            $attachments[0]['file_name'] = $attachment_name;
            
            $emailDetails = array('toEmail' => $toData, 'from_email' => $SiteSetting['storeSupportEmail'], 'from_email_name' => $SiteSetting['mainName']);
            $getEmailAddresses=$this->assignEmailAddress($EmailTemplate[0],$emailDetails);
            $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);
            //$this->sendEmail($toData, $emailData, $fromData, $bccData = array(), $attachments);
            if (!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){                                     
                $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid'], $attachments);
            }
        }
        /* Email for admin if new Order Create */
        if ($order_type == 'new') {
            $EmailTemplateAdmin = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $order_language, 'slug' => 'customer-new-order-admin', 'status' => 1, 'isDeleted' => 0));
            if (!empty($EmailTemplateAdmin)) {

                $body2 = $this->renderView('SalesBundle:Admin/Order:orderdetail_pdf.html.twig', array(
                    'SiteSetting'        => $SiteSetting,
                    'StoreImgSetting'    => $StoreImgSetting,
                    'orderDetailsData'   => $orderDetailsData,
                    'productDetailsData' => $productDetailsData,
                    'currencyCode'       => $currencyCode,
                    'sales_Person'       => $sales_Person,
                    'tokensOrder'        => $tokens_order_values,
                    'logopath'           => 'rel',
                    'privatenotes'       => $orderData->getPrivateNote(),
                )); 

                $toData                      = $SiteSetting['contactEmail'];
                $admin_subject_tokens        = array('[ORDER_NUMBER]');
                $admin_subject_tokens_values = array($orderNumber);
                $admin_subject               = str_replace($admin_subject_tokens, $admin_subject_tokens_values, $EmailTemplateAdmin[0]->getSubject());

                $tokens           = array('[ORDER_NUMBER]', '[COMPANY_DETAILS] [ORDER_DETAILS] [ORDER_SHIPPING_ADDRESS] [ORDER_BILLING_ADDRESS] [SHOPPING_CART_DETAILS] [ORDER_PAYMENT_DETAILS] [ORDER_INVOICE_DETAILS] [SALES_PERSON]', '[SITE_NAME]');
                $tokens_values    = array($orderNumber, $body2, $SiteSetting['mainName']);
                $final_body_admin = str_replace($tokens, $tokens_values, $EmailTemplateAdmin[0]->getTemplate());
                $emailData        = array('subject' => $admin_subject, 'body' => $final_body_admin);
                //$this->sendEmail($toData, $emailData, $fromData, $bccData = array(), $attachments);
                $emailDetails = array('toEmail' => $toData, 'from_email' => $SiteSetting['storeSupportEmail'], 'from_email_name' => $SiteSetting['mainName']);
                $getEmailAddresses=$this->assignEmailAddress($EmailTemplateAdmin[0],$emailDetails);
                $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);
                //$this->sendEmail($toData, $emailData, $fromData, $bccData = array(), $attachments);
                if (!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){                                     
                    $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid'], $attachments);
                }
            }
        }
        //End of modified by milind on 30112023 for resolution of T-0118881
        return 1;
    }

    /* INVOICE MAIL */

    public function invoicemail($order_id = '', $order_language = '', $invoice_id = '')
    {
        $em              = $this->getDoctrine()->getManager();
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting     = $GeneralService->getStoreMainConfig();
        //$StoreImgSetting = json_decode($SiteSetting['storeLogoSetting']);
        $StoreImgSetting = json_decode($SiteSetting['storeLogoSetting'], true);
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
                    
        if (!empty($StoreImgSetting)) {
            $params = array();
            if (!empty($StoreImgSetting['store_main_logo'])) {
                $params['option_type']   = 'common';
                $params['option_value']  = $StoreImgSetting['store_main_logo'];
                $params['option_folder'] = 'storelogo';

                $StoreImgSetting['store_main_logo'] = $GeneralService->getAWSUploadImages($params);
            }
        }
        $store_setting   = (json_decode($SiteSetting['allotherSetting']));
        $sales_Person    = $store_setting->sales_person;
        $orderData       = $em->getRepository('SalesBundle:Orders')->find($order_id);
        if (!empty($orderData)) {
            $curr_data      = $orderData->getCurrencySymbol();
            $currencySymbol = json_decode($curr_data)->currency_symbol;
            $currencyCode   = json_decode($curr_data)->currency_iso_code;
            $langid         = $orderData->getLang()->getId();
            if (!empty($langid)) {
                $order_language = $langid;
            }
        }
        $shippingFirstName   = $orderData->getShippingFirstName();
        $shippingMiddleName  = $orderData->getShippingMiddleName();
        $shippingLastName    = $orderData->getShippingLastName();
        $shippingCompanyName = $orderData->getShippingCompanyName();
        $shippingAddress1    = $orderData->getShippingAddress1();
        $shippingAddress2    = $orderData->getShippingAddress2();
        $shippingCountryName = $this->getCountryNameById($orderData->getShippingCountryId());
        $shippingStateName   = $this->getStateNameById($orderData->getShippingState());
        $shippingCity        = $this->getCityNameById($orderData->getShippingCity());
        $shippingZipcode     = $orderData->getShippingZipcode();
        $shippingEmailId     = $orderData->getShippingEmail();
        $shippingContact     = $orderData->getShippingPhone();
        $shippingFax         = $orderData->getShippingFax();
        $billingFirstName    = $orderData->getBillingFirstName();
        $billingMiddleName   = $orderData->getBillingMiddleName();
        $billingLastName     = $orderData->getBillingLastName();
        $billingCompanyName  = $orderData->getBillingCompanyName();
        $billingAddress1     = $orderData->getBillingAddress1();
        $billingAddress2     = $orderData->getBillingAddress2();
        $billingCountryName  = $this->getCountryNameById($orderData->getBillingCountryId());
        $billingStateName    = $this->getStateNameById($orderData->getBillingState());
        $billingCity         = $this->getCityNameById($orderData->getBillingCity());
        $billingZipcode      = $orderData->getBillingZipcode();
        $billingEmailId      = $orderData->getBillingEmail();
        $billingContact      = $orderData->getBillingPhone();
        $billingFax          = $orderData->getBillingFax();
        $InvoiceAddData      = json_decode($orderData->getAdditionDetails());

        $orderSubTotal    = $orderData->getSubTotal();
        $orderTotalAmount = $orderData->getTotalAmount();
        $orderNumber      = $orderData->getOrderNumber();

        /* Shipping Address */
        $shippingDetails = array('firstname' => $shippingFirstName, 'middlename' => $shippingMiddleName, 'lastname' => $shippingLastName, 'companyname' => $shippingCompanyName, 'address1' => $shippingAddress1, 'address2' => $shippingAddress2, 'city' => $shippingCity, 'zipcode' => $shippingZipcode, 'state' => $shippingStateName, 'country' => $shippingCountryName, 'email' => $shippingEmailId, 'phone' => $shippingContact, 'fax' => $shippingFax);

        /* Billing Address */
        $billingDetails = array('firstname' => $billingFirstName, 'middlename' => $billingMiddleName, 'lastname' => $billingLastName, 'companyname' => $billingCompanyName, 'address1' => $billingAddress1, 'address2' => $billingAddress2, 'city' => $billingCity, 'zipcode' => $billingZipcode, 'state' => $billingStateName, 'country' => $billingCountryName, 'email' => $billingEmailId, 'phone' => $billingContact, 'fax' => $billingFax);

        /* Invoice Addtional Details */
        $invoiceAdditonalDetails = array();
        if ($InvoiceAddData > 0) {
            $invoiceAdditonalDetails = array('firstname' => $InvoiceAddData->invoice_first_name, 'lastname' => $InvoiceAddData->invoice_last_name, 'companyname' => $InvoiceAddData->invoice_company_name, 'email' => $InvoiceAddData->invoice_email, 'address1' => $InvoiceAddData->invoice_address1, 'address2' => $InvoiceAddData->invoice_address2, 'zip' => $InvoiceAddData->invoice_zip, 'country' => $InvoiceAddData->invoice_country, 'city' => $InvoiceAddData->invoice_city, 'state' => $InvoiceAddData->invoice_state_id, 'phone' => $InvoiceAddData->invoice_phone, 'tax' => $InvoiceAddData->taxId);
        }
        //Salse Person
        if ($sales_Person == "Yes") {
            $salesPerson = $orderData->getSalesPerson();
            if ($salesPerson == "0") {
                $sales_person = "0";
            } else {
                $salesPerson  = json_decode($orderData->getSalesPerson());
                $sales_person = array('name' => $salesPerson[0]->name, 'email' => $salesPerson[0]->email);
            }
        }

        /* Payment Details */
        $orderDate      = $orderData->getCreatedDate()->format('d M, Y  h:i A');
        $paymentDetails = $em->getRepository('SalesBundle:OrderPayment')->findBy(array('order' => $orderData->getId(), 'id' => $invoice_id));

        /* Shipping Details */
        $totalShippingCharge  = $orderData->getShippingCharge();
        $totalShippingCharge  = $GeneralService->currencyFormatting($totalShippingCharge);
        $ShippingData         = (!empty($orderData->getShippingType())) ? json_decode($orderData->getShippingType()) : '';
        $ShippingType         = ''; // Name of Shipping Method
        $shipping_detail_html = '';
        if (!empty($ShippingData)) {
            $ShippingType = $ShippingData->shipping_method_name;
            $shipping_detail_html .= '<tr><td style=" width: 70%; padding: 5px 0 0 0;">' . $ShippingType . ': </td><td style="width: 30%; text-align:left; padding: 5px 0 0 0;">' . $totalShippingCharge . '</td></tr>';
        }

        /* All OrderDetails */
        $orderDetailsData = array('orderData' => $orderData, 'orderDate' => $orderDate, 'shippingDetails' => $shippingDetails, 'billingDetails' => $billingDetails, 'paymentDetails' => $paymentDetails, 'ShippingType' => $ShippingType, 'shipping_detail_html' => $shipping_detail_html, 'invoiceAdditonalDetails' => $invoiceAdditonalDetails, "salesPerson" => $sales_person);

        /*  Product Data  */
        $shoppingCartData = $this->getDoctrine()->getRepository('SalesBundle:OrderDetails')->findBy(array('order' => $orderData->getId()));
        foreach ($shoppingCartData as $cartdata) {
            $quantity = $cartdata->getProductQty();
            $total    = (($cartdata->getProdPackPrice()) * ($cartdata->getProductQty()));
            $total    = $GeneralService->currencyFormatting($total);
            $product  = $em->getRepository('CatalogueBundle:Product')->find($cartdata->getProduct());
                    $productRefId = $product->getCtbRefId();
                    $productLangObj = $em->getRepository('CatalogueBundle:ProductLang')->findOneBy([
                        'langRefId' => $sessionLangRefId,
                        'productRefId' => $productRefId
                    ]);
                    $productName = "";
                    if(!empty($productLangObj)) {
                        $productName = $productLangObj->getName();
                    }
            $name     = $productName;
            $sku      = $product->getSku();
            $media    = $product->getMainImage();
            $price    = $GeneralService->currencyFormatting($cartdata->getProdPackPrice());
            $data[]   = array('name' => $name, 'sku' => $sku, 'media' => $media, 'quantity' => $quantity, 'price' => $price, 'total' => $total, 'name' => $name);
        }
        foreach ($paymentDetails as &$pay) {
            $pay->setPayAmount($GeneralService->currencyFormatting($pay->getPayAmount()));
                if ($pay->getCardDetails() != "") {
                    $arrTemp = json_decode($pay->getCardDetails(), true);
                    if (!empty($arrTemp)) {
                        $cardNumber = $methodType = "";
                       
                        foreach ($arrTemp as $cardkey => $cardKeyVal) {
                            if (strpos($cardkey, "_type") > 0) {
                                $methodType = $cardKeyVal;
                            }
                            if (strpos($cardkey, "_number") > 0) {
                                $cardNumber = $cardKeyVal;
                            }
                        }
                        if ($methodType != "") {
                            $PaymentDetailsHTML .= " - <br>" . $methodType . "<br>";
                        }
                        if ($cardNumber != "") {
                            $PaymentDetailsHTML .= $cardNumber;
                        }
                    } else {
                        $PaymentDetailsHTML .= $pay->getCardDetails(); 
                    }
                    $pay->setCardDetails($PaymentDetailsHTML);
                }
        }
        //Currency Formatting
        $subTotal        = $GeneralService->currencyFormatting($orderSubTotal);
        $totalPay        = $GeneralService->currencyFormatting($orderTotalAmount);
        $tax_detail      = "";
        $tax_detail_html = "";
        if (!empty($orderData->getTaxDetails())) {
            $tax_detail = json_decode($orderData->getTaxDetails());
            if (!empty($tax_detail)) {
                foreach ($tax_detail as $key => $value) {
                    if($value > 0){
                        $tax_detail_html .= '<tr>
                                                <td style=" width: 70%; padding: 5px 0 0 0;">' . $key . '</td>
                                                <td style="text-align:left; width: 30%; padding: 5px 0 0 0;">' . $GeneralService->currencyFormatting($value) . '</td>
                                            </tr>';
                    }
                }
            }
        }

        $discount_detail_html = '';
        if (!empty($orderData->getTotalDiscount())) {
            //Discount Details
            $TotalDiscount = $orderData->getTotalDiscount();
            $TotalDiscount = $GeneralService->currencyFormatting($TotalDiscount);
            $discount_detail_html .= '<tr>
                                        <td style=" width: 70%; padding: 5px 0 0 0;">' . $this->get('translator')->trans('total_discount_amount') . '</td>
                                        <td style="text-align:left; width: 30%; padding: 5px 0 0 0;">' . $TotalDiscount . '</td>
                                    </tr>';
        }

        $warranty_detail = $warranty_detail_html = "";
        if (!empty($orderData->getWarrantyDetails())) {
            //Warranty Details
            $warranty_detail = json_decode($orderData->getWarrantyDetails(), true);
            $warrantyPrice   = $GeneralService->currencyFormatting($warranty_detail['warranty_price']);
            $warranty_detail_html .= '<tr>
                                        <td style=" width: 70%; padding: 5px 0 0 0;">' . $this->get('translator')->trans('front_warranty') . ': </td>
                                        <td style="text-align:left; width: 30%; padding: 5px 0 0 0;">' . $warrantyPrice . '</td>
                                    </tr>';
        }
        /* All Productdetails */
        $productDetailsData = array('data' => $data, 'subTotal' => $subTotal, 'totalPay' => $totalPay, 'tax_detail_html' => $tax_detail_html, 'discount_detail_html' => $discount_detail_html, 'warranty_detail_html' => $warranty_detail_html);

        /* PDF GENERATE */
        // Instantiate and use the dompdf class
        $tokens_order_values = array();
        //Modify by milind dave on 30112023 for resolution of T-0118881
        $EmailTemplate       = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $order_language, 'slug' => 'order-invoice-email-customer', 'status' => 1, 'isDeleted' => 0));

        if (!empty($EmailTemplate)) {
            $temp_template = $EmailTemplate[0]->getTemplate();
            $tokens_order  = array('[COMPANY_DETAILS]', '[ORDER_DETAILS]', '[ORDER_SHIPPING_ADDRESS]', '[ORDER_BILLING_ADDRESS]', '[SHOPPING_CART_DETAILS]', '[ORDER_PAYMENT_DETAILS]', '[ORDER_INVOICE_DETAILS]', '[SALES_PERSON]');
            for ($i = 0; $i < count($tokens_order); $i++) {
                if (stripos($temp_template, $tokens_order[$i]) != false) {
                    $tokens_order_values[] = $tokens_order[$i];
                }
            }
            $body = $this->renderView('SalesBundle:Admin/Order:invoicedetail_pdf.html.twig', array(
                'SiteSetting'        => $SiteSetting,
                'StoreImgSetting'    => $StoreImgSetting,
                'orderDetailsData'   => $orderDetailsData,
                'productDetailsData' => $productDetailsData,
                'currencyCode'       => $currencyCode,
                'sales_Person'       => $sales_Person,
                'tokensOrder'        => $tokens_order_values,
            ));

            $dompdf = new Dompdf();
            $dompdf->loadHtml($body);
            $dompdf->set_option('isRemoteEnabled', true);
            $dompdf->setPaper('A4', 'portrait');
            // Render the HTML as PDF
            $dompdf->render();
            // Output the generated PDF to Browser
            $output = $dompdf->output();
            $pdfDir = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/invoice';
            if (!is_dir($pdfDir)) {
                //Directory does not exist, so lets create it.
                mkdir($pdfDir, 0755, true);
            }
            $attachment_name = 'Invoice-' . $paymentDetails[0]->getInvoiceNumber() . '.pdf';
            file_put_contents('assets/uploads/invoice/' . $attachment_name, $output);
            // email for customer
            $toData                = $shippingEmailId;
            $subject_tokens        = array('[INVOICE_NUMBER]', '[ORDER_NUMBER]');
            $subject_tokens_values = array($paymentDetails[0]->getInvoiceNumber(), $orderData->getOrderNumber());
            $customer_subject      = str_replace($subject_tokens, $subject_tokens_values, $EmailTemplate[0]->getSubject());
            $tokens                = array('[CUSTOMER_FULLNAME]', '[SITE_NAME]', '[INVOICE_NUMBER]', '[ORDER_NUMBER]', '[COMPANY_DETAILS] [ORDER_DETAILS] [ORDER_SHIPPING_ADDRESS] [ORDER_BILLING_ADDRESS] [SHOPPING_CART_DETAILS] [ORDER_PAYMENT_DETAILS] [ORDER_INVOICE_DETAILS] [SALES_PERSON]', '[STORE_SUPPORT_EMAIL]', '[STORE_SUPPORT_PHONE]');
            $cutomerFullname       = $shippingFirstName . ' ' . $shippingMiddleName . ' ' . $shippingLastName;

            $body1 = $this->renderView('SalesBundle:Admin/Order:invoicedetail_pdf.html.twig', array(
                'SiteSetting'        => $SiteSetting,
                'StoreImgSetting'    => $StoreImgSetting,
                'orderDetailsData'   => $orderDetailsData,
                'productDetailsData' => $productDetailsData,
                'currencyCode'       => $currencyCode,
                'sales_Person'       => $sales_Person,
                'tokensOrder'        => $tokens_order_values,
                'logopath'           => 'rel',
            ));

            $tokens_values = array($cutomerFullname, $SiteSetting['mainName'], $paymentDetails[0]->getInvoiceNumber(), $orderNumber, $body1, $SiteSetting['storeSupportEmail'], $SiteSetting['contactPhone']);
            $final_body    = str_replace($tokens, $tokens_values, $EmailTemplate[0]->getTemplate());

            $emailData = array('subject' => $customer_subject, 'body' => $final_body);

            $emailDetails = array('toEmail' => $toData, 'from_email' => $SiteSetting['contactEmail'], 'from_email_name' => $SiteSetting['mainName']);
            $getEmailAddresses=$this->assignEmailAddress($EmailTemplate[0],$emailDetails);
            
            //$fromData  = array('email' => $SiteSetting['contactEmail'], 'name' => $SiteSetting['mainName']);
            $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);

            $attachments[0]['file_path'] = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/invoice/';
            $attachments[0]['file_name'] = $attachment_name;

            //$this->sendEmail($toData, $emailData, $fromData, $bccData = array(), $attachments);
            if (!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){                                     
                $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid'], $attachments);
            }
        //End of modified by milind dave for resolution of T-0118881
        }
        return 1;
    }

    /* CUSTOMER MAIL */

    public function customermail($customer_id = '', $customer_language = '')
    {
        $em                = $this->getDoctrine()->getManager();
        $GeneralFunction   = new GeneralFunctionController();
        list($SiteSetting) = $this->commonGlobalData();
        $customerData      = $em->getRepository('SalesBundle:Customer')->find($customer_id);
        if (!empty($customerData)) {
            $cutomerFirstname = $customerData->getFirstName();
            $cutomerLastname  = $customerData->getLastName();
            $cutomerFullname  = $cutomerFirstname . ' ' . $cutomerLastname;
            $cutomerEmail     = $customerData->getEmailid();
            $cutomerContact   = $customerData->getContact();
            $cutomerPassword  = $GeneralFunction->decryptString($customerData->getPassword());
        }

        //Email for Customer if New Customer Registered */
        //Modified by milind dave on 30112023 for resolution of T-0118881
        $EmailTemplateCustomer = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $customer_language, 'slug' => 'customer-registration-self', 'status' => 1, 'isDeleted' => 0));
        if (!empty($EmailTemplateCustomer)) {
            $toData                = $cutomerEmail;
            $subject_tokens        = array('[SITE_NAME]');
            $subject_tokens_values = array($SiteSetting['mainName']);
            $customer_subject      = str_replace($subject_tokens, $subject_tokens_values, $EmailTemplateCustomer[0]->getSubject());
            $tokens                = array('[CUSTOMER_FULLNAME]', '[SITE_NAME]', '[CUSTOMER_USERNAME]', '[CUSTOMER_PASSWORD]', '[STORE_SUPPORT_EMAIL]', '[STORE_SUPPORT_PHONE]');

            $tokens_values = array($cutomerFullname, $SiteSetting['mainName'], $cutomerEmail, $cutomerPassword, $SiteSetting['storeSupportEmail'], $SiteSetting['contactPhone']);
            $final_body    = str_replace($tokens, $tokens_values, $EmailTemplateCustomer[0]->getTemplate());

            $emailData = array('subject' => $customer_subject, 'body' => $final_body);

            $emailDetails = array('toEmail' => $toData, 'from_email' => $SiteSetting['storeSupportEmail'], 'from_email_name' => $SiteSetting['mainName']);
            $getEmailAddresses=$this->assignEmailAddress($EmailTemplateCustomer[0],$emailDetails);

            //$fromData  = array('email' => $SiteSetting['storeSupportEmail'], 'name' => $SiteSetting['mainName']);
            $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);

            //$this->sendEmail($toData, $emailData, $fromData);
            if (!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){                                     
                $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid']);
            }
        //End of modified by milind on 30112023 for resolution of T-0118881    
        }
        return 1;
    }

    public function getMinMaxPrice($data = '')
    {
        $price_range = array();
        $min_max     = array();
        if (!empty($data)) {
            foreach ($data as $val) {
                $min_max[] = $val['sale_price'];
            }
            if (!empty($min_max)) {
                $min         = ceil(min($min_max));
                $max         = ceil(max($min_max));
                $price_range = array('min' => $min, 'max' => $max);
            }
        }
        return $price_range;
    }

    public function getAttrbuteGroupAttribute($categoryId = 0)
    {
        $em   = $this->getDoctrine()->getManager();
        $data = array();
        if (!empty($categoryId)) {
            $attr_group_category_query = "SELECT ag.id,ag.group_name FROM attribute_group ag
                                          WHERE  ag.is_deleted=0
                                          AND ag.status=1
                                          AND  FIND_IN_SET ($categoryId,ag.category_id)";
            $statement = $em->getConnection()->prepare($attr_group_category_query);
            $statement->execute();
            $attr_group     = $statement->fetchAll();
            $attr_group_ids = $attr_group;
            if (!empty($attr_group_ids)) {
                foreach ($attr_group_ids as $key => $value) {
                    $group_name    = $value['group_name'];
                    $attr_group_id = $value['id'];
                    $attr_query    = "SELECT a.id,a.attribute_name,a.group_id FROM attribute a
                                       WHERE  a.is_deleted=0 AND a.status=1 AND a.group_id=$attr_group_id";
                    $statement = $em->getConnection()->prepare($attr_query);
                    $statement->execute();
                    $attr_data                                = $statement->fetchAll();
                    $data[$group_name . '_' . $attr_group_id] = $attr_data;
                }
            }
        }
        return $data;
    }

    public function updateProductSalePrice()
    {
        $GeneralService       = $this->get(GeneralService::class);
        $current_date =  date('Y-m-d H:i:s');
        $fileDir = $this->container->getParameter('kernel.root_dir') . '/../web/assets/';
        $my_file = 'PRICE.DONE';
        if (file_exists($fileDir . $my_file)) {
            return;
        }
        $flag      = false;
        $em        = $this->getDoctrine()->getManager();
        $query     = "SELECT pm.product_id,pm.custom_price,pm.start_date,pm.end_date,pm.showalways, m.name FROM product_marking pm INNER JOIN marking m ON pm.marking_id=m.id WHERE ((pm.start_date<= '".$current_date."' AND pm.end_date>= '".$current_date."' AND m.is_effect_price=1 AND pm.custom_price > 0) OR ( pm.showalways=1 AND m.is_effect_price=1 AND pm.custom_price > 0)) AND pm.is_deleted=0 AND pm.status=1  GROUP BY pm.id ";
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $data = $statement->fetchAll();
        if (!empty($data)) {
            $updated_product_ids    = array();
            $allupdated_product_ids = array();
            foreach ($data as $val) {
                $marking_price = $val['custom_price'];
                $product_id    = $val['product_id'];

                if (!empty($val['start_date']) && !empty($val['end_date'])) {
                    $upd_query = "UPDATE product SET sale_price = $marking_price WHERE id=$product_id ";
                    $statement = $em->getConnection()->prepare($upd_query);
                    $statement->execute();
                    $updated_product_ids[]    = $product_id;
                    $allupdated_product_ids[] = $product_id;
                } else {
                    if (!in_array($product_id, $updated_product_ids)) {
                        $upd_query = "UPDATE product SET sale_price = $marking_price WHERE id=$product_id ";
                        $statement = $em->getConnection()->prepare($upd_query);
                        $statement->execute();
                        $allupdated_product_ids[] = $product_id;
                    }
                }
            }
            $flag = true;
        }
        if (!empty($allupdated_product_ids)) {
            $unique_allupdated_product_ids = array_unique($allupdated_product_ids);
            $commaseparated_product_id     = implode(",", $unique_allupdated_product_ids);
            $proudct_ids_query             = "SELECT id,base_price FROM product WHERE  id NOT IN ($commaseparated_product_id)  ";
            $proudct_ids_query_statement   = $em->getConnection()->prepare($proudct_ids_query);
            $proudct_ids_query_statement->execute();
            $prodct_id_data = $proudct_ids_query_statement->fetchAll();
            if (!empty($prodct_id_data)) {
                foreach ($prodct_id_data as $key => $val) {
                    $productId  = $val['id'];
                    $basePrice  = $val['base_price'];
                    $product    = $em->getRepository('CatalogueBundle:Product')->find($productId);
                    $basePrice  = $product->getBasePrice();
                    $sale_price = $GeneralService->getProductCalculatedPrice($productId, $basePrice);
                    $upd_query  = "UPDATE product SET sale_price=$sale_price WHERE id IN ($productId) ";
                    $statement  = $em->getConnection()->prepare($upd_query);
                    $statement->execute();
                }
            }
            $flag = true;
        }
        $handle = fopen($fileDir . $my_file, 'w') or die('Cannot open file:  ' . $my_file);
        return $flag;
    }

    public function getCountProducteffect($marking_data = array())
    {
        $count          = 0;
        $effected_price = 0;
        foreach ($marking_data as $data) {
            if ($data['is_effect_price'] == 1) {
                $count++;
                $effected_price = $data['price'];
            }
        }
        $product_effect_data = array('effectedPrice' => $effected_price, 'count' => $count);
        return $product_effect_data;
    }

    public function getFinalPrdSalePrice($product_id = '', $base_price = '', $type = 'product')
    {
        $finalSalePrice = 0;
        $GeneralService       = $this->get(GeneralService::class);
        //REN02
        //$markingData          = $this->getCurrentMarking($product_id);
        //$count_product_effect = $this->getCountProducteffect($markingData);
        //if ($count_product_effect['count'] == 0) {
            $salePrice      = $GeneralService->getProductCalculatedPrice($product_id, $base_price);
            $finalSalePrice = $GeneralService->getPriceRoundAmount($type, $salePrice);
        /*}
        if ($count_product_effect['count'] == 1) {
            echo $finalSalePrice = $count_product_effect['effectedPrice'];
            
        }*/
        return $finalSalePrice;
    }

    public function getFinalPrdSalePriceNew($product_id = '', $base_price = '', $freight_price = '', $type = 'product')
    {
        $finalSalePrice = 0;
        $GeneralService = $this->get(GeneralService::class);
        $salePrice      = $GeneralService->getProductCalculatedPriceNew($product_id, $base_price, $freight_price);
        $finalSalePrice = $GeneralService->getPriceRoundAmount($type, $salePrice);
        return $finalSalePrice;
    }
   
    public function makeCommaSeperatedValueWithSingleQuote($data = array())
    {
        $new_data = '';
        if (!empty($data)) {
            $related_product_arr = explode(',', $data);
            foreach ($related_product_arr as $key => $value) {
                $new_data .= "'" . $value . "',";
            }
            $new_data = trim($new_data, ',');
        }
        return $new_data;
    }

    public function productSalePriceToBasePrice($productId, $basePrice = '')
    {
        $GeneralService       = $this->get(GeneralService::class);
        $em = $this->getDoctrine()->getManager();
        if (!empty($productId) && !empty($basePrice)) {
            $sale_price = $GeneralService->getProductCalculatedPrice($productId, $basePrice);
            $upd_query  = "UPDATE product SET sale_price=$sale_price WHERE id IN ($productId) ";
            $statement  = $em->getConnection()->prepare($upd_query);
            $statement->execute();
        } else if (!empty($productId) && empty($basePrice)) {
            $productId_arr = explode(',', $productId);
            if (!empty($productId_arr)) {
                foreach ($productId_arr as $val) {
                    $product    = $em->getRepository('CatalogueBundle:Product')->find($val);
                    $basePrice  = $product->getBasePrice();
                    $sale_price = $GeneralService->getProductCalculatedPrice($val, $basePrice);
                    $upd_query  = "UPDATE product SET sale_price=$sale_price WHERE id IN ($productId) ";
                    $statement  = $em->getConnection()->prepare($upd_query);
                    $statement->execute();
                }
            }
        }
    }

    public function singleProductSalePriceUpdate($productId)
    {
        $GeneralService       = $this->get(GeneralService::class);
        $flag      = true;
        $em        = $this->getDoctrine()->getManager();
        $current_date = date('Y-m-d H:i:s');
        $query     = "SELECT pm.product_id,pm.custom_price,pm.start_date,pm.end_date,pm.showalways, m.name FROM product_marking pm INNER JOIN marking m ON pm.marking_id=m.id WHERE ((pm.start_date<= '".$current_date."' AND pm.end_date>= '".$current_date."' AND m.is_effect_price=1 AND pm.custom_price > 0) OR ( pm.showalways=1 AND m.is_effect_price=1 AND pm.custom_price > 0)) AND pm.is_deleted=0 AND pm.status=1  AND pm.product_id=$productId GROUP BY pm.id ";
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $data = $statement->fetchAll();
        if (!empty($data)) {
            $updated_product_ids    = array();
            $allupdated_product_ids = array();
            foreach ($data as $val) {
                $marking_price = $val['custom_price'];
                $product_id    = $val['product_id'];
                if (!empty($val['start_date']) && !empty($val['end_date'])) {
                    $upd_query = "UPDATE product SET sale_price = $marking_price WHERE id=$product_id ";
                    $statement = $em->getConnection()->prepare($upd_query);
                    $statement->execute();
                    $updated_product_ids[]    = $product_id;
                    $allupdated_product_ids[] = $product_id;
                } else {
                    if (!in_array($product_id, $updated_product_ids)) {
                        $upd_query = "UPDATE product SET sale_price = $marking_price WHERE id=$product_id ";
                        $statement = $em->getConnection()->prepare($upd_query);
                        $statement->execute();
                        $allupdated_product_ids[] = $product_id;
                    }
                }
            }
        } else {
            $product    = $em->getRepository('CatalogueBundle:Product')->find($productId);
            $basePrice  = $product->getBasePrice();
            $sale_price = $GeneralService->getProductCalculatedPrice($productId, $basePrice);
            $upd_query  = "UPDATE product SET sale_price=$sale_price WHERE id IN ($productId) ";
            $statement  = $em->getConnection()->prepare($upd_query);
            $statement->execute();
        }
        return $flag;
    }

    public function getProductAttribeData($productData = array(), $SiteSetting)
    {
        $attribute_price_html         = array();
        $session                      = new Session();
        $GeneralService               = $this->get(GeneralService::class);
        $front_lang_id                = $session->get('front_lang_id');
        $sessionLangRefId = $session->get('front_lang_ref_id');
        $attribute_price_html_options = '';

        $productId = $productData['productId'];
        $CurSymbol = $SiteSetting['curSymbol'];
        $em        = $this->getDoctrine()->getManager();
        /*$query     = "SELECT pa.*,p.product_type,p.sale_price,al.attribute_name,a.color_code,a.color_image,"
                . "a.attribute_image,agl.group_name,ag.id as group_id,ag.is_effect_price,ag.group_type,"
                . "pv.id as product_variation_id, pv.attribute_combination, pv.variation_description "
                . " FROM product p "
                . " INNER JOIN product_attribute pa ON p.id=pa.product_id "
                . " INNER JOIN attribute a ON pa.attribute_id=a.id  "
                . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
                . " INNER JOIN attribute_group ag ON a.attribute_group_ref_id = ag.ctb_ref_id "
                . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
                . " AND ag.show_front = 1 AND ag.status=1  "
                . " AND ag.is_deleted=0 AND agl.lang_ref_id= '" . $sessionLangRefId . "' "
                . " LEFT JOIN product_variation pv ON p.id = pv.product_id "
                . " AND pv.status = 1 AND pv.is_deleted = 0 "
                . " WHERE p.is_deleted=0 AND p.status=1  "
                . " AND pa.is_deleted=0 AND pa.status=1 "
                . " AND pa.show_front=1 AND p.sale_price>0 AND pa.product_id=$productId";*/

        $query     = "SELECT pa.*,p.product_type,p.sale_price,al.attribute_name,a.color_code,a.color_image,"
        . " a.attribute_image,agl.group_name,ag.id as group_id,ag.is_effect_price,ag.group_type,"
        . " pv.id as product_variation_id, pv.attribute_combination, pv.variation_description, "
        . " productprice(p.id, p.sale_price, '".$SiteSetting['gmttime']."', "
        . " case when "
        . " rp.column_value IS NOT NULL then rp.column_value else '0.00' "
        . " end, "
        . " case when "
        . " mp.column_value IS NOT NULL then mp.column_value else '0.00' end) as final_price, "
        . " rp.column_value as retail_price, mp.column_value as map_price "
        . " FROM product p INNER JOIN product_attribute pa ON p.id=pa.product_id "
        . " INNER JOIN attribute a ON pa.attribute_id=a.id  "
        . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
        . " INNER JOIN attribute_group ag ON a.attribute_group_ref_id = ag.ctb_ref_id "
        . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
        . " AND ag.show_front = 1 AND ag.status=1 "
        . " AND ag.is_deleted=0 AND agl.lang_ref_id= '" . $sessionLangRefId . "' "
        . " LEFT JOIN product_variation pv ON p.id = pv.product_id AND pv.status = 1 AND pv.is_deleted = 0 "
        . " LEFT JOIN product_pricing rp ON rp.product_id=p.id AND rp.column_key = 'retail_price' "
        . " LEFT JOIN product_pricing mp ON mp.product_id=p.id AND mp.column_key = 'map_price' "
        . " WHERE p.is_deleted=0 AND p.status=1  AND  pa.is_deleted=0 "
        . " AND pa.status=1 AND pa.show_front=1 AND p.sale_price>0 "
        . " AND pa.product_id=".$productId;

        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $data = $statement->fetchAll();
        if (!empty($data)) {
            $counter          = 0;
            $attribute_groups = $attributes = array();
            foreach ($data as $key => $value) {
                if (isset($value['product_type']) && $value['product_type'] == '2' && !empty($value['variation_description'])) {
                    $attribute_combination_json = $value['attribute_combination'];
                    $attribute_combination      = json_decode($attribute_combination_json, true);
                    if (!empty($attribute_combination)) {
                        foreach ($attribute_combination as $key1 => $value1) {
                            $newKey = str_replace('ag_', '', $key1);
                            if (!in_array($newKey, $attribute_groups)) {
                                $attribute_groups[$newKey] = $newKey;
                            }
                        }
                    }
                } else {
                    if (!in_array($value['group_id'], $attribute_groups)) {
                        $attribute_groups[$value['group_id']] = $value['group_id'];
                    }
                }
            }
            foreach ($data as $key => $value) {
                if (isset($value['product_type']) && $value['product_type'] == '2' && !empty($value['variation_description'])) {
                    $attribute_combination_json = $value['attribute_combination'];
                    $attribute_combination      = json_decode($attribute_combination_json, true);

                    $ag = array();
                    if (!empty($attribute_combination)) {
                        foreach ($attribute_combination as $key2 => $value2) {
                            $newKey      = str_replace('ag_', '', $key2);
                            $ag[$newKey] = $newKey;
                        }
                    }
                    if (in_array($value['group_id'], $ag)) {
                        $attributes[$value['group_id']][] = $value;
                    }
                } else {
                    if (in_array($value['group_id'], $attribute_groups)) {
                        $attributes[$value['group_id']][] = $value;
                    }
                }
            }
        }
        if (!empty($attributes)) {
            $counter                     = 0;
            $attribute_groups            = array();
            $session_attr_id             = new Session();
            $commaseparated_attribute_id = $session_attr_id->get('commaseparated_attribute_id');
            $selected_attributes         = array();
            if (!empty($commaseparated_attribute_id)) {
                $selected_attributes = explode(",", $commaseparated_attribute_id);
            }
            foreach ($attributes as $key => $value) {
                if (is_array($value)) {
                    $group_type = $value[0]['group_type'];
                    $attribute_price_html_options .= '<div class="row"><div class="c-input-group c-spinner">';
                    if ($group_type == 'Selectbox') {
                        $attribute_price_html_options .= '<div class="c-product-meta-label  pull-left col-md-12 col-sm-12 col-xs-12 " >' . $value[0]['group_name'] . ':</div>
                        <div class=" col-md-6 col-sm-6 col-xs-12">
                        <select name="product_attribute_group[' . $key . ']" id="product_attribute_group_' . $key . '" class="form-control select2 product_attribute_group_selectbox " style="width:auto" onclick="changeSimpleAttribute(this.options[this.selectedIndex])"><option value="">Select</option>';
                        foreach ($value as $k => $v) {
                            $sale_price                = $v['final_price'] + $v['attribute_price_variation'];
                            $msrp_data                 = $this->getMsrpPrice($sale_price, $productData);
                            $sale_price_with_currensy  = $GeneralService->currencyFormatting($msrp_data['sale_price']);
                            $sale_price                = $msrp_data['sale_price'];
                            $msrp_price                = $GeneralService->currencyFormatting($msrp_data['msrp_price']);
                            $save_price                = $GeneralService->currencyFormatting($msrp_data['save_price']);
                            $attribute_price_variation = ($v['attribute_price_variation'] == '') ? 0 : $v['attribute_price_variation'];
                            $selected                  = '';
                            if (in_array($v['id'], $selected_attributes)) {
                                $selected = ' selected=selected ';
                            }
                            $plus_minus = '+';
                            if ($attribute_price_variation < 0) {
                                $plus_minus    = '-';
                                $abs_variation = number_format(abs($attribute_price_variation), 2);
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $abs_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            } else {
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $attribute_price_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            }
                            $attribute_price_html_options .= '<option ' . $selected . ' value="' . $v['id'] . '" attribute-sale-price="' . $sale_price_with_currensy . '" attribute-msrp-price="' . $msrp_price . '" attribute-save-price="' . $save_price . '" attribute-price-variation="' . $attribute_price_variation . '">' . $attribute_name . '</option>';
                        }
                        $attribute_price_html_options .= '</select></div></div> <div class="clearfix"></div>';
                    } elseif ($group_type == 'Colorbox') {
                        $attribute_price_html_options .= '<div class="c-product-meta-label  pull-left col-md-12 col-sm-12 col-xs-12 " >' . $value[0]['group_name'] . ':</div>';

                        $attribute_price_html_options .= '<div class="col-md-12 col-sm-12 col-xs-12 color-swatches"><ul class="product_attribute_group_radio">';
                        foreach ($value as $k => $v) {
                            $sale_price                = $v['final_price'] + $v['attribute_price_variation'];
                            $msrp_data                 = $this->getMsrpPrice($sale_price, $productData);
                            $sale_price_with_currensy  = $GeneralService->currencyFormatting($msrp_data['sale_price']);
                            $sale_price                = $msrp_data['sale_price'];
                            $msrp_price                = $GeneralService->currencyFormatting($msrp_data['msrp_price']);
                            $save_price                = $GeneralService->currencyFormatting($msrp_data['save_price']);
                            $attribute_price_variation = ($v['attribute_price_variation'] == '') ? 0 : $v['attribute_price_variation'];
                            $selected                  = '';
                            if (in_array($v['id'], $selected_attributes)) {
                                $selected = ' checked=checked ';
                            }
                            $plus_minus = '+';
                            if ($attribute_price_variation < 0) {
                                $plus_minus    = '-';
                                $abs_variation = number_format(abs($attribute_price_variation), 2);
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $abs_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            } else {
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $attribute_price_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            }
                            $attribute_price_html_options .= '<li><label>';

                            $attribute_price_html_options .= '<input type="radio" name="product_attribute_group[' . $key . ']" value="' . $v['id'] . '"  attribute-sale-price="' . $sale_price_with_currensy . '" attribute-msrp-price="' . $msrp_price . '" attribute-save-price="' . $save_price . '" attribute-price-variation="' . $attribute_price_variation . '" onclick="changeSimpleAttribute(this)">';
                            if (!empty($v['attribute_image'])) {
                                $attribute_price_html_options .= '<span class="swatches-box" style="background:url(' . $v['attribute_image'] . '); background-size: 100%"></span>';
                            } elseif (!empty($v['color_image'])) {
                                $attribute_price_html_options .= '<span class="swatches-box" style="background:url(' . $v['color_image'] . '); background-size: 100%"></span>';
                            } elseif (!empty($v['color_code'])) {
                                $attribute_price_html_options .= '<span class="swatches-box" style="background-color:' . $v['color_code'] . ';"></span>';
                            } else {
                                $attribute_price_html_options .= '<span class="swatches-box" style="background-color:#eee;"></span>';
                            }
                            $attribute_price_html_options .= '</label>
                      <span>' . $attribute_name . '</span>
                    </li>';
                        }
                        $attribute_price_html_options .= '</ul></div></div>';
                    } elseif ($group_type == 'Radio') {
                        $attribute_price_html_options .= '<div class="c-product-meta-label  pull-left col-md-12 col-sm-12 col-xs-12 " >' . $value[0]['group_name'] . ':</div>';
                        $attribute_price_html_options .= '<ul class="available-options product_attribute_group_radio">';
                        foreach ($value as $k => $v) {
                            $sale_price                = $v['final_price'] + $v['attribute_price_variation'];
                            $msrp_data                 = $this->getMsrpPrice($sale_price, $productData);
                            $sale_price_with_currensy  = $GeneralService->currencyFormatting($msrp_data['sale_price']);
                            $sale_price                = $msrp_data['sale_price'];
                            $msrp_price                = $GeneralService->currencyFormatting($msrp_data['msrp_price']);
                            $save_price                = $GeneralService->currencyFormatting($msrp_data['save_price']);
                            $attribute_price_variation = ($v['attribute_price_variation'] == '') ? 0 : $v['attribute_price_variation'];
                            $selected                  = '';
                            if (in_array($v['id'], $selected_attributes)) {
                                $selected = ' selected=selected ';
                            }
                            $plus_minus = '+';
                            if ($attribute_price_variation < 0) {
                                $plus_minus    = '-';
                                $abs_variation = number_format(abs($attribute_price_variation), 2);
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $abs_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            } else {
                                if ($v['is_effect_price'] == 1) {
                                    $attribute_name = $v['attribute_name'] . ' [' . $plus_minus . ' ' . $CurSymbol . $attribute_price_variation . ']';
                                } else {
                                    $attribute_name = $v['attribute_name'];
                                }
                            }
                            $attribute_price_html_options .= '<li>
                                    <input type="radio" name="product_attribute_group[' . $key . ']" value="' . $v['id'] . '"  attribute-sale-price="' . $sale_price_with_currensy . '" attribute-msrp-price="' . $msrp_price . '" attribute-save-price="' . $save_price . '" attribute-price-variation="' . $attribute_price_variation . '" onclick="changeSimpleAttribute(this)"> ' . $attribute_name . '</li>';
                        }
                        $attribute_price_html_options .= '</ul>';
                    }
                    $attribute_price_html_options .= '</div>';
                }
            }
        }
        $attribute_price_html['options'] = $attribute_price_html_options;
        return $attribute_price_html;
    }

    public function getAllFilterCatgoryData()
    {

        $attribute_price_html = '';
        $session              = new Session();
        $GeneralService       = $this->get(GeneralService::class);
        $front_lang_id        = $session->get('front_lang_id');
        $SiteSetting          = $GeneralService->getStoreMainConfig();
        $defaultCurrency      = json_decode($SiteSetting['currencySetting']);
        $CurSymbol            = $this->getDoctrine()->getRepository('LocalizationBundle:Currency')->findOneById($SiteSetting['curId']);
        if (empty($CurSymbol)) {
            $CurSymbol = '$';
        }
        $em = $this->getDoctrine()->getManager();
        // fetch category data
        $catquery  = "SELECT c1.id,c1.name FROM category c1 WHERE c1.parent_id = 0 AND c1.lang_id ='" . $front_lang_id . "'";
        $statement = $em->getConnection()->prepare($catquery);
        $statement->execute();
        $fetchcatdata = $statement->fetchAll();
        $subcategory  = array();
        foreach ($fetchcatdata as $key) {
            $category_data[$key['name']] = $this->getRecursiveSubcateoryData($key['id'], $front_lang_id, $catedata = "");
        }
        return $category_data;
    }

    public function getFilterCatgoryData($slug_id = "", $productCommaValue = "", $brandId = '', $is_search_page = 0) {
        $attribute_price_html = '';
        $session = new Session();
        $GeneralService = $this->get(GeneralService::class);
        $front_lang_id = $session->get('front_lang_id');
        $em = $this->getDoctrine()->getManager();
        $categoryfilter_data = $this->getCategoryFilterData($slug_id, $front_lang_id, $catedata = "", $productCommaValue, $brandId, $is_search_page);
        return $categoryfilter_data;
    }

    public function getFilterBrandData($slugId = '', $productCommaValue = '', $brandId = "")
    {
        $attribute_price_html = '';
        $session              = new Session();
        $GeneralService       = $this->get(GeneralService::class);
        $fetchbranddata       = "";
        $em                   = $this->getDoctrine()->getManager();
        if (!empty($productCommaValue)) {
            $condition = " AND p1.id IN (" . $productCommaValue . ")";
            if (!empty($brandId)) {
                $condition .= " AND b.id =" . $brandId;
            }
            
            $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
            $condition .= " AND bl.lang_ref_id = '" . $sessionLangRefId . "'";
            // fetch brand data
            $brandquery = "SELECT b.id,bl.name,b.slug,count(p1.id) as ProductCount FROM product p1 "
                    . " JOIN brand b ON p1.brand_id=b.id "
                    . " LEFT JOIN brand_lang as bl ON bl.brand_ref_id = b.ctb_ref_id "
                    . " WHERE  b.status = 1 AND b.is_deleted = 0 " . $condition . " GROUP BY b.id";
            $brandquery .= " order by b.sort_order";

            $statement  = $em->getConnection()->prepare($brandquery);
            $statement->execute();
            $fetchbranddata = $statement->fetchAll();
        }
        return $fetchbranddata;
    }

    public function getFilterManufacturerData($slugId = '', $productCommaValue = '', $brandId = "")
    {
        $attribute_price_html  = '';
        $session               = new Session();
        $GeneralService        = $this->get(GeneralService::class);
        $fetchmanufacturerdata = "";
        $em                    = $this->getDoctrine()->getManager();
        if (!empty($productCommaValue)) {
            $condition = " AND p1.id IN (" . $productCommaValue . ")";
            if (!empty($brandId)) {
                $condition .= " AND b.id =" . $brandId;
            }
            // fetch manufacturer data
            $manufacturerquery = "SELECT m.id, m.name, m.slug FROM manufacturers m
            INNER JOIN brand b on b.manufacturer_id = m.id AND b.status = 1 AND b.is_deleted = 0
            INNER JOIN product p1 on p1.brand_id = b.id
            WHERE m.status = 1 AND m.is_deleted = 0 " . $condition . " GROUP BY m.id";
            //echo $manufacturerquery;exit;
            $statement = $em->getConnection()->prepare($manufacturerquery);
            $statement->execute();
            $fetchmanufacturerdata = $statement->fetchAll();
        }
        return $fetchmanufacturerdata;
    }

    public function getFilterAttributeData($slugId = '', $productCommaValue = '', $brandId = '')
    {
        $attribute_price_html = '';
        $session              = new Session();
        $GeneralService       = $this->get(GeneralService::class);
        $front_lang_id        = $session->get('front_lang_id');
        $subattribute_data = array();
        $em                = $this->getDoctrine()->getManager();
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        //fetch attribute data
        if (!empty($productCommaValue)) {
            $condition          = " AND pa.product_id IN (" . $productCommaValue . ") AND pa.status =1 AND pa.is_deleted = 0";
            // $groupattribtequery = "SELECT a.id,a.slug,al.attribute_name as name,agl.group_name,"
            //         . " ag.id as gp_id,(SELECT count(pa.product_id) FROM product_attribute pa "
            //         . " WHERE product_Id IN (" . $productCommaValue . ") AND pa.attribute_id = a.id) as ProductCount "
            //         . " FROM attribute a "
            //         . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
            //         . " INNER JOIN attribute_group ag ON a.attribute_group_ref_id = ag.ctb_ref_id "
            //         . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
            //         . " WHERE al.lang_ref_id ='" . $sessionLangRefId . "' AND "
            //         . " a.id IN ("
            //         . "     SELECT DISTINCT pa.attribute_id FROM product_attribute pa "
            //         . "     WHERE pa.status = 1 AND pa.is_deleted = 0 AND ag.status = 1 "
            //         . "     AND ag.is_deleted = 0 AND a.status =1 AND a.is_deleted =0" . $condition . ""
            //         . " ) GROUP BY a.id";

            $groupattribtequery = "SELECT a.id,a.slug,al.attribute_name as name,agl.group_name,"
                    . " ag.id as gp_id "
                    . " FROM attribute a "
                    . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
                    . " INNER JOIN attribute_group ag ON a.attribute_group_ref_id = ag.ctb_ref_id "
                    . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
                    . " WHERE al.lang_ref_id ='" . $sessionLangRefId . "' AND "
                    . " a.id IN ("
                    . "     SELECT DISTINCT pa.attribute_id FROM product_attribute pa "
                    . "     WHERE pa.status = 1 AND pa.is_deleted = 0 AND ag.status = 1 "
                    . "     AND ag.is_deleted = 0 AND a.status =1 AND a.is_deleted =0 " . $condition . ""
                    . " ) GROUP BY a.id";
            
            $statement          = $em->getConnection()->prepare($groupattribtequery);
            $statement->execute();
            $fetchAttributeGroupdata = $statement->fetchAll();
            foreach ($fetchAttributeGroupdata as $attribute) {
                // Attribute lang related changes start--
                if(!empty($attribute['group_name'])) {
                    $subattribute_data[$attribute['group_name']][] = $attribute;
                }
                // Attribute lang related changes end--
            }
        }
        return $subattribute_data;
    }

    public function getSubAttributeDataByGroupId($groupId = 0, $lang_id = 1)
    {
        $attribute_data = array();
        if (!empty($groupId)) {
            $data = $this->getDoctrine()->getRepository('CatalogueBundle:Attribute')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'group' => $groupId), array('sortOrder' => 'ASC'));
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $attribute_data[] = array('id' => $value->getId(), 'name' => $value->getAttributeName());
                }
            }
            return $attribute_data;
        }
    }

    public function getFilterPriceData($slugId = '', $productCommaValue = "", $brand_id="", $SiteData = array())
    {

        $attribute_price_html = '';
        $session              = new Session();
        $GeneralService       = $this->get(GeneralService::class);
        $front_lang_id        = $session->get('front_lang_id');
        $front_lang_ref_id        = $session->get('front_lang_ref_id');
        $em = $this->getDoctrine()->getManager();
        if (!empty($productCommaValue)) {
            //$groupattribtequery = "SELECT MIN(productprice(p1.id, p1.sale_price, '".$SiteData['gmttime']."', case when rp.column_value IS NOT NULL then rp.column_value else '0.00' end, case when mp.column_value IS NOT NULL then mp.column_value else '0.00' end)) AS MinimumPrice,MAX(productprice(p1.id, p1.sale_price, '".$SiteData['gmttime']."', case when rp.column_value IS NOT NULL then rp.column_value else '0.00' end, case when mp.column_value IS NOT NULL then mp.column_value else '0.00' end)) AS MaximumPrice FROM product p1 JOIN product_category pc ON p1.id=pc.product_id LEFT JOIN product_pricing rp ON rp.product_id = p1.id AND rp.column_key = 'retail_price' LEFT JOIN product_pricing mp ON mp.product_id = p1.id AND mp.column_key = 'map_price' WHERE p1.status = 1 AND p1.is_deleted = 0  AND p1.id IN (" . $productCommaValue . ") AND p1.lang_id ='" . $front_lang_id . "' AND p1.sale_price > 0";
            $groupattribtequery = "SELECT MIN(productprice(p1.id, p1.sale_price, "
                    . "'".$SiteData['gmttime']."', "
                    . " case when rp.column_value IS NOT NULL then rp.column_value else '0.00' end, "
                    . " case when mp.column_value IS NOT NULL then mp.column_value else '0.00' end)) AS MinimumPrice,"
                    . " MAX(productprice(p1.id, p1.sale_price, '".$SiteData['gmttime']."', "
                    . " case when rp.column_value IS NOT NULL then rp.column_value else '0.00' end, "
                    . " case when mp.column_value IS NOT NULL then mp.column_value else '0.00' end)) AS MaximumPrice "
                    . " FROM product p1 "
                    . " JOIN product_lang plg ON plg.product_ref_id = p1.ctb_ref_id "
                    . " JOIN product_category pc ON p1.id=pc.product_id "
                    . " LEFT JOIN product_pricing rp ON rp.product_id = p1.id AND rp.column_key = 'retail_price' "
                    . " LEFT JOIN product_pricing mp ON mp.product_id = p1.id AND mp.column_key = 'map_price' "
                    . " WHERE p1.status = 1 AND p1.is_deleted = 0  "
                    . " AND p1.id IN (" . $productCommaValue . ") AND plg.lang_ref_id ='" . $front_lang_ref_id . "' "
                    . " AND p1.sale_price > 0";
            $statement          = $em->getConnection()->prepare($groupattribtequery);
            $statement->execute();
            $fetchPricedata = $statement->fetchAll();
        } else {
            $fetchPricedata = '';
        }
        return $fetchPricedata;
    }

    public function getFilterPromotionData($slugId = '', $productCommaValue = "", $brand_id="", $SiteData = array())
    {
        $session              = new Session();
        $GeneralService       = $this->get(GeneralService::class);
        $front_lang_id        = $session->get('front_lang_id');
        $front_lang_ref_id        = $session->get('front_lang_ref_id');
        $em = $this->getDoctrine()->getManager();
        $fetchPromotiondata = array();
        if(!empty($productCommaValue)) 
        {
            //Changed by Gayatri on 18.07.2023 due to changes in Marking Module.
            $query = "SELECT
                DISTINCT pm.marking_id,
                m.name,
                m.sort_order
            FROM
                product_marking pm
                JOIN marking m on m.id = pm.marking_id AND m.status = 1 AND m.is_deleted = 0
                JOIN marking_lang ml on ml.uu_id = m.uu_id 
                JOIN language l on l.ctb_ref_id = ml.lang_ref_id AND l.status = 1 AND l.is_deleted = 0 AND l.id = $front_lang_id
            WHERE
                m.display_on_filter = 'Yes'
                AND pm.product_id IN (" . $productCommaValue . ")
            ORDER BY
                m.sort_order ASC,
                m.name ASC";
            // End by Gayatri
            //print_r($query);exit;
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $fetchPromotiondata = $statement->fetchAll();
        }
        return $fetchPromotiondata;
    }

    public function getMainFilterdata($slugId = "", $productCommaValue = "", $brandId = '', $is_search_page = 0, $SiteData = array()) {
        $fetchallcategorydata = $this->getFilterCatgoryData($slugId, $productCommaValue, $brandId, $is_search_page);
        if (empty($productCommaValue)) {
            $slugId = $this->getCommaseparatedIds($fetchallcategorydata);
            $productCommaValue = $this->getProductConcatList($slugId);
        }
        $fetchbranddata = $this->getFilterBrandData($slugId, $productCommaValue, $brandId);
        $fetchallattributedata = $this->getFilterAttributeData($slugId, $productCommaValue, $brandId);
        $fetchallpricedata = $this->getFilterPriceData($slugId, $productCommaValue, $brandId, $SiteData);
        $fetchmanufacturerdata = $this->getFilterManufacturerData($slugId, $productCommaValue, $brandId);
        $fetchpromotiondata = $this->getFilterPromotionData($slugId, $productCommaValue, $brandId);
        $fetchallratingdata = array();

        $filterdata = array(
            'price' => $fetchallpricedata,
            'rating' => $fetchallratingdata,
            'category' => $fetchallcategorydata,
            'brand' => $fetchbranddata,
            'attribute' => $fetchallattributedata,
            'manufacturer' => $fetchmanufacturerdata,
            'promotion' => $fetchpromotiondata,
        );

        return $filterdata;
    }

    public function getProductConcatList($slugId = "")
    {
        $attribute_price_html = '';
        if (!empty($slugId)) {
            $session        = new Session();
            $GeneralService = $this->get(GeneralService::class);
            $front_lang_id  = $session->get('front_lang_id');
            $front_lang_ref_id        = $session->get('front_lang_ref_id');
            $em              = $this->getDoctrine()->getManager();
            //$getProductValue = "SELECT GROUP_CONCAT(DISTINCT p1.id) as productId FROM  product p1 INNER JOIN product_category pc ON p1.id=pc.product_id  WHERE p1.status = 1 AND p1.is_deleted = 0 AND p1.lang_id ='" . $front_lang_id . "' AND pc.category_id IN (" . $slugId . ") AND p1.sale_price > 0 AND p1.main_image != '' ORDER BY p1.base_price ASC";
            $getProductValue = "SELECT GROUP_CONCAT(DISTINCT p1.id) as productId FROM  product p1"
                    ." INNER JOIN product_category pc ON p1.id=pc.product_id  "
                    ." JOIN product_lang pl ON pl.product_ref_id = p1.ctb_ref_id "
                    ." WHERE p1.status = 1 AND p1.is_deleted = 0 "
                    ." AND pl.lang_ref_id ='" . $front_lang_ref_id . "' "
                    ." AND pc.category_id IN (" . $slugId . ") "
                    ." AND p1.sale_price > 0  ORDER BY p1.base_price ASC";
            $statement       = $em->getConnection()->prepare($getProductValue);
            $statement->execute();
            $fetchProductData = $statement->fetchAll();
            $ProductIds       = $fetchProductData[0]['productId'];
            if (!empty($ProductIds)) {
                $ProductIds = trim($ProductIds, ',');
            }
            return $ProductIds;
        }
        return $attribute_price_html;
    }

    /* Country Display As per System Setting Start */

    public function getCountryData($country_store_setting = '', $sell_bill_otherdata = array())
    {
        $em                = $this->getDoctrine()->getManager();
        $sell_bill_setting = '';
        if (!empty($sell_bill_otherdata)) {
            $sell_bill_to         = $sell_bill_otherdata['sell_bill_to'];
            $sell_bill_setting    = ($sell_bill_to == 'sell_to') ? ($country_store_setting->sell_to) : ($country_store_setting->bill_to);
            $sell_bill_country_id = ($sell_bill_to == 'sell_to') ? ($country_store_setting->sell_country_id) : ($country_store_setting->bill_country_id);
            $implode              = '';
            if (!empty($sell_bill_country_id)) {
                $implode = implode(',', $sell_bill_country_id);
            }
        }

        switch ($sell_bill_setting) {
            case "all_except":
                $sql       = "SELECT id,country_language,country_name,iso_code FROM country c WHERE c.id NOT IN ($implode) AND c.is_deleted='0' AND c.status='1' ORDER BY country_name ASC";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;
            case "specific":
                $sql       = "SELECT id,country_language,country_name ,iso_code FROM country c WHERE c.id  IN ($implode) AND c.is_deleted='0' AND c.status='1' ORDER BY country_name ASC";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;
            default:
                $sql       = "SELECT id,country_language,country_name,iso_code FROM country c WHERE  c.is_deleted='0' AND c.status='1' ORDER BY country_name ASC";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;
        }
        return $result;
    }

    /* Country Display As per System Setting End */

    /* Address Display As per System Setting Start */

    public function getAvailAddrData($country_store_setting = '', $sell_bill_otherdata = array())
    {
        $em = $this->getDoctrine()->getManager();

        $sell_bill_to         = $sell_bill_otherdata['sell_bill_to'];
        $sell_bill_setting    = ($sell_bill_to == 'sell_to') ? ($country_store_setting->sell_to) : ($country_store_setting->bill_to);
        $sell_bill_country_id = ($sell_bill_to == 'sell_to') ? ($country_store_setting->sell_country_id) : ($country_store_setting->bill_country_id);
        $CustomerId           = $sell_bill_otherdata['CustomerId'];
        if (!empty($sell_bill_country_id)) {
            $implode = implode(',', $sell_bill_country_id);
        }
        switch ($sell_bill_setting) {

            case "all_except":
                $sql = "SELECT * FROM customer_address c WHERE c.country_id NOT IN ($implode) AND c.is_deleted='0' AND c.status='1' AND c.customer_id= '" . $CustomerId . "'
               ";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;

            case "specific":
                $sql = "SELECT * FROM customer_address c WHERE c.country_id  IN ($implode) AND c.is_deleted='0' AND c.status='1' AND c.customer_id= '" . $CustomerId . "'
               ";
                //    echo $sql;die();
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;

            default:
                $sql       = "SELECT * FROM customer_address c WHERE  c.is_deleted='0' AND c.status='1' AND c.customer_id= '" . $CustomerId . "'";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetchAll();
                break;
        }
        return $result;
    }

    public function getFrontUserData($userTypeSlug)
    {
        $customerDetails = array();
        $em              = $this->getDoctrine()->getManager();
        $userTypeData    = $em->getRepository(UserType::class)->findBy(array('slug' => $userTypeSlug, 'isDeleted' => 0, 'status' => 1))[0];
        if ($userTypeData) {
            $customerDetails = $em->createQueryBuilder('ca')
                ->select('c.id,CONCAT(c.firstName,\' \',c.lastName) name')
                ->from('SalesBundle:Customer', 'c')
                ->innerJoin('DealersBundle:UserType', 'ut', 'WITH', 'ut.id=c.userTypeId')
                ->where('c.isDeleted = 0')
                ->andwhere('c.status = 1')
                ->andwhere('c.userTypeId != ' . $userTypeData->getId())
                ->orderBy('c.id', 'ASC')
                ->getQuery()->getResult();
            return $customerDetails;
        }
    }

    public function checkReviewAvail($productCommaValue = '')
    {
        $session           = new Session();
        $GeneralService    = $this->get(GeneralService::class);
        $ProducReviewCount = 0;
        $em                = $this->getDoctrine()->getManager();
        if (!empty($productCommaValue)) {
            $condition = " AND p1.id IN (" . $productCommaValue . ")";
            // fetch brand data
            $reviewquery = "SELECT DISTINCT(p1.id) as ProductReviewCount  FROM product p1 JOIN  review_rating rr ON p1.id=rr.order_id WHERE  rr.review_based_on = 1 AND rr.is_deleted = 0 AND rr.status = 2" . $condition . "";
            $statement   = $em->getConnection()->prepare($reviewquery);
            $statement->execute();
            $fetchbranddata    = $statement->fetchAll();
            $ProducReviewCount = count($fetchbranddata);
        }
        return $ProducReviewCount;
    }

    public function getAttributeName($productId = '', $prod_attrid = '')
    {
        $price_data = array('price_variations' => 0, 'attribute_group_name' => '');
        if (!empty($productId)) {
            $em                  = $this->getDoctrine()->getManager();
            $attribute_condition = '';
            if (!empty($prod_attrid)) {
                $attribute_condition = " AND pa.id IN (" . $prod_attrid . ")";
            }
            $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
            $query     = "SELECT pa.*,p.sale_price,al.attribute_name,agl.group_name,ag.id as group_id,ag.is_effect_price FROM  product p  "
                        . " INNER JOIN product_attribute pa ON p.id=pa.product_id "
                        . " INNER JOIN attribute a ON pa.attribute_id=a.id  "
                        . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
                        //. " INNER JOIN attribute_group ag ON a.group_id=ag.id AND ag.status=1  AND  ag.is_deleted=0  "
                        . " INNER JOIN attribute_group ag ON a.attribute_group_ref_id = ag.ctb_ref_id AND ag.status=1 AND ag.is_deleted=0  "
                        . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
                        . " WHERE p.is_deleted=0 AND p.status=1  "
                        . " AND  pa.is_deleted=0 AND pa.status=1 "
                        . " AND pa.show_front=1 AND p.sale_price>0 "
                        . " AND agl.lang_ref_id =  '" . $sessionLangRefId . "' "
                        . " AND al.lang_ref_id='" . $sessionLangRefId . "' "
                        . " AND pa.product_id=$productId $attribute_condition";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $data             = $statement->fetchAll();
            $price_variations = 0;
            $attribute_names  = '';
            if (!empty($data)) {
                foreach ($data as $val) {
                    $price_variations = $price_variations + $val['attribute_price_variation'];
                    $attribute_names .= '' . $val['group_name'] . ': ' . $val['attribute_name'] . ',';
                }
                $attribute_names = trim($attribute_names, ',');
                $price_data      = array('price_variations' => $price_variations, 'attribute_group_name' => $attribute_names);
            }
        }
        return $price_data;
    }

    public function json_decode_nice($json, $assoc = false)
    {
        $json = str_replace(array("\n", "\r"), "", $json);
        return json_decode($json, $assoc);
    }

    public function getFirstTwoParamUrl($req)
    {
        $two_level_slug     = $req->getRequestURI();
        $explode            = explode('/', $two_level_slug);
        $two_level_slug_str = $explode[1] . '/' . $explode[2];
        return $two_level_slug_str;
    }

    public function getStoreAddressHtml($widgetTypeData)
    {
        $html = '';
        if (!empty($widgetTypeData)) {
            $GeneralService = $this->get(GeneralService::class);
            //Get Store Main Configuration
            $SiteSetting = $GeneralService->getStoreMainConfig();
            if (!empty($SiteSetting)) {
                if (!empty($widgetTypeData['title'])) {
                    $html = '<strong>' . $widgetTypeData['title'] . '</strong><br />';
                }
                $address = $SiteSetting['address'];
                $city    = $SiteSetting['city'];
                $state   = $SiteSetting['state'];
                $zipcode = $SiteSetting['zipcode'];
                $html .= '<p>' . $address . ', <br/>' . $city . ', ' . $state . ' - ' . $zipcode . '</p>';
            }
        }
        return $html;
    }

    public function checkStoreSetting($SiteSetting)
    {
        if (!empty($SiteSetting['allotherSetting'])) {
            $allotherSetting = json_decode($SiteSetting['allotherSetting']);
        }
        $em                                   = $this->getDoctrine()->getManager();
        $is_store_required_stetting_completed = 0;
        if ($allotherSetting->catalog_mode == 'ecommerce') {
            /* payment */
            $query     = "SELECT id FROM module_setting  WHERE method_type='Payment' AND status=1 AND is_deleted=0";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $payment_data = $statement->fetchAll();
            if (!empty($payment_data)) {
                $is_store_required_stetting_completed = 1;
            }
            /* order status */
            $query     = "SELECT order_status_setting FROM store_main_config  WHERE status=1 AND is_deleted=0";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $order_status_setting_data = $statement->fetchAll()[0];
            if (!empty($order_status_setting_data)) {
                $order_status_setting_json_decode = json_decode($order_status_setting_data['order_status_setting']);
                if (!empty($order_status_setting_json_decode->default_order_status) && $is_store_required_stetting_completed == 1) {
                    $is_store_required_stetting_completed = 1;
                } else {
                    $is_store_required_stetting_completed = 0;
                }
            } else {
                $is_store_required_stetting_completed = 0;
            }
            /* currency */
            $query     = "SELECT id FROM currency WHERE status=1 AND is_deleted=0 AND is_default=1";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $currency_data = $statement->fetchAll();
            if (!empty($currency_data) && $is_store_required_stetting_completed == 1) {
                $is_store_required_stetting_completed = 1;
            } else {
                $is_store_required_stetting_completed = 0;
            }
        } else {
            $is_store_required_stetting_completed = 1;
        }
        //Check all flag with settings
        return $is_store_required_stetting_completed;
    }

    public function setStoreInMaintenanceMode($maintenance_mode = 0)
    {
        $em = $this->getDoctrine()->getManager();
        $upd_query = "UPDATE store_main_config SET is_live = $maintenance_mode";
        $statement = $em->getConnection()->prepare($upd_query);
        $statement->execute();
    }

    //Get array of store access module which is related to parent
    public function getAllStoreModuleTree()
    {
        $em         = $this->container->get('doctrine.orm.entity_manager');
        $ModuleData = $em->createQueryBuilder()
            ->select('(m.id) AS id', '(m.moduleName) AS name', '(m.moduleName) AS text', '(m.slug) AS slug', '(m.parentId) AS parent_id')
            ->from('SystemBundle\Entity\Module', 'm')
            ->where('m.status = ?1')
            ->andwhere('m.isDeleted = ?2')
            ->orderBy('m.sortOrder', 'ASC')
            ->setParameter(1, 1)
            ->setParameter(2, 0)
            ->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return $ModuleData;
    }

    //Get MarkingData Result
    public function getMarkingData($where = '')
    {
        $em        = $this->getDoctrine()->getManager();
        $sql       = "SELECT m.id as total FROM markup m WHERE $where";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        return $result;
    }

    //Insert ParentModuleId by ChildModuleId/SubModuleId for UserGroup
    public function getGroupMainParentId($UgrId, $ParentId)
    {
        $em              = $this->getDoctrine()->getManager();
        $UserGroupAccess = new UserGroupAccess();
        $module_obj      = $em->getRepository(Module::class)->find($ParentId);
        $ParentId        = $module_obj->getParentId();
        $ParentAccess    = $em->getRepository('SystemBundle:UserGroupAccess')->findOneBy(array('userGroup' => $UgrId, 'module' => $ParentId));
        if ($ParentId == 0) {
            return $ParentId;
        } else {
            if (empty($ParentAccess)) {
                $sql = "INSERT INTO user_group_access (
                    user_group_id,
                    module_id,
                    is_access,
                    is_modify
                    )VALUES(" . $UgrId . "," . $ParentId . ",'1','1')";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
            }
            return $this->getGroupMainParentId($UgrId, $ParentId);
        }
    }

    //Insert ParentModuleId by ChildModuleId/SubModuleId for User
    public function getUserMainParentId($UsrId, $ParentId)
    {
        $em               = $this->getDoctrine()->getManager();
        $UserModuleAccess = new UserModuleAccess();
        $module_obj       = $em->getRepository(Module::class)->find($ParentId);
        $ParentId         = $module_obj->getParentId();
        $ParentAccess     = $em->getRepository('SystemBundle:UserModuleAccess')->findBy(array('user' => $UsrId, 'module' => $ParentId));
        if ($ParentId == 0) {
            return $ParentId;
        } else {
            if (empty($ParentAccess)) {
                $sql = "INSERT INTO user_module_access (
                    user_id,
                    module_id,
                    is_access,
                    is_modify
                    )VALUES(" . $UsrId . "," . $ParentId . ",'1','1')";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
            }
            return $this->getUserMainParentId($UsrId, $ParentId);
        }
    }

    public function getFieldData($table_name = "", $field = "*", $condition = "is_deleted='0' AND status=1 AND country_id=1")
    {

        $em = $this->getDoctrine()->getManager();
        if (!empty($table_name) && !empty($field)) {
            $where = '';
            if (!empty($condition)) {
                $where = " WHERE $condition";
            }
            $sql = "SELECT " . $field . " FROM " . $table_name . $where;
        }
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        return $result;
    }

    public function insertFieldData($table_name = "", $data = "")
    {

        $em = $this->getDoctrine()->getManager();
        if (!empty($table_name) && !empty($data)) {

            $key = array_keys($data);
            $val = array_values($data);
            $sql = "INSERT INTO $table_name (" . implode(', ', $key) . ") "
            . "VALUES ('" . implode("', '", $val) . "')";

            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
        }
    }

    public function updateFieldData($table_name = "", $data = "", $where = "")
    {
        $em = $this->getDoctrine()->getManager();
        if (!empty($table_name) && !empty($data)) {

            $cols = array();
            foreach ($data as $key => $val) {
                $cols[] = "$key = '$val'";
            }
            $sql       = "UPDATE $table_name SET " . implode(', ', $cols) . " WHERE $where";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
        }
    }

    public function deleteData($table_name = "", $where = "")
    {
        $em = $this->getDoctrine()->getManager();
        if (!empty($table_name) && !empty($where)) {
            $sql       = "DELETE FROM $table_name WHERE $where";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
        }
    }

    //Location wise Tax calculation Html
    public function locationTaxData($SiteSetting = array())
    {
        $taxData         = array('show' => 'no');
        $countryId       = $stateId       = '';
        $countryData     = $stateData     = $cityData     = array();
        $session         = new Session();
        $GeneralFunction = new GeneralFunctionController();
        $GeneralService  = $this->get(GeneralService::class);
        $langCode        = $this->getFrontLanguage($SiteSetting);
        $CheckoutService = $session->get('CheckoutService');

        $taxSetting            = (!empty($SiteSetting['taxSetting'])) ? json_decode($SiteSetting['taxSetting'], true) : '';
        $tax_calculate_base_on = $taxSetting['calc_tax_baseon'];
        if ($tax_calculate_base_on == 'billing_address') {
            $countryId = $CheckoutService->getBilCountry();
            $stateId   = $CheckoutService->getBilState();
        } else {
            $countryId = $CheckoutService->getShipCountry();
            $stateId   = $CheckoutService->getShipState();
        }

        $locationPopupShow = $SiteSetting['taxSettingLocationPopup'];

        if ($locationPopupShow == 1) {
            $countryStoreSetting = (json_decode($SiteSetting['allotherSetting']));
            $sell_bill_to        = 'sell_to';
            if (!empty($taxSetting['calc_tax_baseon'])) {
                $sell_bill_to = ($taxSetting['calc_tax_baseon'] == "shipping_address") ? 'sell_to' : 'bill_to';
            }
            $sell_bill_otherdata = array('sell_bill_to' => $sell_bill_to);
            $countryData         = $this->getCountryData($countryStoreSetting, $sell_bill_otherdata);
            /* State Data */
            if (!empty($countryId)) {
                $stateData = $this->getState($where = "$countryId", $langCode);
            }
            /* City Data */
            if (!empty($CheckoutService->getShipCity())) {
                $cityData = $CheckoutService->getShipCity();
                //$cityData = $this->getCity($where = "$stateId", $langCode);
            }
            $taxData = array('countryData' => $countryData, 'stateData' => $stateData, 'cityData' => $cityData, 'show' => 'yes');
        }
        return $taxData;
    }

    public function locationTaxDataBKP($SiteSetting)
    {
        $GeneralService = $this->get(GeneralService::class);
        //$SiteSetting = $GeneralService->getStoreMainConfig();
        $em = $this->getDoctrine()->getManager();

        $country_id = '';
        $state_id   = '';
        $city_id    = '';
        $zipcode    = '';

        $session  = new Session();
        $langCode = $this->getFrontLanguage($SiteSetting);
        if ($session->has('DeliveryAddressChargeData')) {
            $LocationDetails = $session->get('DeliveryAddressChargeData');
            $country_id      = $LocationDetails['country_id'];
            $state_id        = $LocationDetails['state_id'];
            $city_id         = $LocationDetails['city_id'];
            $zipcode         = $LocationDetails['zipcode'];
        }
        $sessionexist = '';
        if (empty($country_id) && empty($state_id) && empty($city_id) && empty($zipcode)) {
            $sessionexist = 1;
        }

        $tax_setting           = (!empty($SiteSetting['taxSetting'])) ? json_decode($SiteSetting['taxSetting'], true) : '';
        $country_store_setting = (json_decode($SiteSetting['allotherSetting']));
        $sell_bill_to          = 'sell_to';
        if (!empty($tax_setting['calc_tax_baseon'])) {
            $sell_bill_to = ($tax_setting['calc_tax_baseon'] == "shipping_address") ? 'sell_to' : 'bill_to';
        }
        $sell_bill_otherdata = array('sell_bill_to' => $sell_bill_to);
        $CountryData         = $this->getCountryData($country_store_setting, $sell_bill_otherdata);
        // echo "<pre>";print_r($CountryData);die();
        $CountCountryData     = count($CountryData);
        $countAccessTaxModule = count($GeneralService->getModuleIdbySlug('tax'));

        $locationtax_html = '';
        if ($countAccessTaxModule == '1' && $tax_setting['tax_status'] == "1" && $tax_setting['price_with_tax'] == "no_exclusive" && $tax_setting['display_shop_price'] == "including_tax") {
            $locationtax_html .= '<div class="col-md-12 text-right" id="location_div">';
            if (empty($sessionexist)) {
                $countryname = $this->getCountryNameById($country_id, $langCode);
                $statename   = $this->getStateNameById($state_id, $langCode);
                $cityname    = $this->getCityNameById($city_id, $langCode);
                $locationtax_html .= '<span class="country_title">' . $countryname . ' , ' . $statename . ' , ' . $cityname . ' , ' . $zipcode . '</span><br>';
            }
            $locationtax_html .= '
            <a href="#" class="content_link" data-toggle="modal" data-target="#calculatetaxmodal"> <span class="fa fa-map-marker"></span>';
            if ($sessionexist == 1) {
                $locationtax_html .= 'ENTER LOCATION TO SHOW PRICE';
            } else {
                $locationtax_html .= 'Change';
            }
            $locationtax_html .= '</a></div>
            <div class="modal fade c-content-login-form " style="z-index:10057 !important;" id="calculatetaxmodal" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content c-square">
                        <div class="modal-header c-no-border">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        </div>
                    <div class="modal-body">

                <h3 class="c-font-22 c-font-sbold">ENTER LOCATION TO SHOW PRICE</h3>
                <form method="post" name="taxcalculationfrm" id="taxcalculationfrm" data-toggle="validator" class="form-horizontal">
                     <div class="loader hide"><div class="page-loading"><img src="/assets/global/img/loading-spinner-grey.gif" alt="loader" /><span> '.$this->get('translator')->trans('front_common_loading').'...</span></div></div>
                    <div class="col-xs-12 col-sm-6 col-md-6 form-group">';
            $locationtax_html .= '<select name="countryId" id="countryId" class="form-control select2 countryId" tabindex="1"> <option value="">' . $this->get('translator')->trans('front_login_regcountry_placeholder') . '</option>';
            foreach ($CountryData as $cntry) {
                $selected = '';
                if ($country_id == $cntry['id']) {
                    $selected = ' selected="selected"';
                }

                $countryLanguage = json_decode($cntry['country_language']);
                $countryName     = $this->getLocationListLang($langCode, $countryLanguage, $cntry['country_name']);
                $locationtax_html .= '<option ' . $selected . ' value="' . $cntry['id'] . '"';
                $locationtax_html .= '>' . $countryName . '</option>';
            }
            $locationtax_html .= '</select>';
            $locationtax_html .= '</div>
                    <div class="col-xs-12 col-sm-6 col-md-6 form-group">
                        <select name="stateId" id="stateId" class="form-control select2 stateId" >
                        <option value="">' . $this->get('translator')->trans('front_login_regstate_placeholder') . '</option>';
            //State Data
            if (!empty($country_id)) {
                $State = $this->getState($where = "$country_id");
                if (!empty($State)) {
                    foreach ($State as $sts) {
                        $state_selected = '';
                        if ($sts['id'] == $state_id) {
                            $state_selected = ' selected="selected"';
                        }
                        $stateLanguage = json_decode($sts['state_language']);
                        $stateName     = $this->getLocationListLang($langCode, $stateLanguage, $sts['state_name']);
                        $locationtax_html .= '<option ' . $state_selected . ' value="' . $sts['id'] . '">' . $stateName . '</option>';
                    }
                }
            }
            $locationtax_html .= '</select>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-6 form-group">
                    <div class="cityOptions">
                    <input class="form-control " placeholder="'. $this->get('translator')->trans('front_login_regcity_placeholder') . '" type="text" name="locationCity" value="" tabindex="3">';
                        /*'<select name="city" id="city" class="form-control select2 city" >
                            <option value="">' . $this->get('translator')->trans('front_login_regcity_placeholder') . '</option>';*/
            //City Data
            /*if (!empty($state_id)) {
                $City = $this->getCity($where = "$state_id", $langCode);
                if (!empty($City)) {
                    foreach ($City as $cty) {
                        $city_selected = '';
                        if ($cty['id'] == $city_id) {
                            $city_selected = ' selected="selected"';
                        }
                        $cityLanguage = json_decode($cty['city_language']);
                        $cityName     = $this->getLocationListLang($langCode, $cityLanguage, $cty['city_name']);
                        $locationtax_html .= '<option ' . $city_selected . ' value="' . $cty['id'] . '">' . $cityName . '</option>';
                    }
                }
            }*/
            //$locationtax_html .= '</select>'
            $locationtax_html .= '</div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-6 form-group"><input class="form-control " placeholder="Postcode / Zip" type="text" name="zipcode" id="zipcode"  value="' . $zipcode . '"></div>
                    <div class="clearfix"></div>
                    <div class="col-xs-12 col-sm-12 col-md-12 form-group"><button type="submit" id="calculate_tax_charge" class="btn btn-lg pull-right">Enter</button></div>
                    <div class="clearfix"></div>
                    </form>
                </div>
                </div>
            </div>
        </div>';
        }
        return $locationtax_html;
    }

    public function checkShippingOptionAvailability($shipping_option_id)
    {
        $em           = $this->getDoctrine()->getManager();
        $is_available = 0;
        if (!empty($shipping_option_id)) {
            $shippingOptionsData = $em->getRepository('SalesBundle:ShippingOptions')->findBy(array('id' => $shipping_option_id, 'isDeleted' => 0, 'status' => 1))[0];
            if (!empty($shippingOptionsData)) {
                $is_available = 1;
            }
        }
        return $is_available;
    }

    public function getFedexShippingData($cart, $method_id, $recipientAddress, $shipperAddress, $configured_service_type)
    {
        // define('Newline', "<br />");
        // ini_set("soap.wsdl_cache_enabled", "0");
        // $fedex_credentails_data = array();
        // $fedex_credentails      = $this->getShippingMethodsCredentions($method_id);
        //     if (empty($fedex_credentails)) {
        //         return false;
        //     } else {
        //         $fedex_credentails_data = json_decode($fedex_credentails['module_setting']);
        //         if (!empty($fedex_credentails_data)) {
        //             $fedex_credentails_data = array('fedexkey' => $fedex_credentails_data->fedexkey, 'fedexpassword' => $fedex_credentails_data->fedexpassword, 'accountnumber' => $fedex_credentails_data->accountnumber, 'meternumber' => $fedex_credentails_data->meternumber, 'status' => $fedex_credentails_data->status, 'islive' => $fedex_credentails_data->islive, 'fedex_servicetype' => $fedex_credentails_data->fedex_servicetype);
        //         }
        //     }

        //     if (empty($fedex_credentails_data) || (empty($fedex_credentails_data['fedexkey']) || empty($fedex_credentails_data['fedexpassword']) || empty($fedex_credentails_data['accountnumber']) || empty($fedex_credentails_data['meternumber']))) {
        //         return false;
        //     }
        //     $is_live   = $fedex_credentails_data['islive'];
        //     $fedexWSDL = $this->container->getParameter('kernel.root_dir') . '/../web/FedexWsdl/RateService_v20.wsdl';
        //     $params    = array(
        //         'trace'          => 1,
        //         'exceptions'     => 1,
        //         'location'       => ($is_live) ? 'https://gateway.fedex.com:443/web-services' : 'https://gateway.fedex.com:443/web-services', // Need to change url in Live Mode // Temporary change for testing by Milind
        //         'cache_wsdl'     => WSDL_CACHE_NONE,
        //         'stream_context' => stream_context_create(array(
        //             'ssl' => array(
        //                 'verify_peer'       => false,
        //                 'verify_peer_name'  => false,
        //                 'allow_self_signed' => true, //can fiddle with this one.
        //             ),
        //         )),
        //     );

        // New FedEx sandbox integration for access token start
        $fedex_credentails_data = array();
        $fedex_credentails      = $this->getShippingMethodsCredentions($method_id);
        if (empty($fedex_credentails)) 
        {
            return false;
        }
        else
        {
            $fedex_credentails_data = json_decode($fedex_credentails['module_setting']);
            if (!empty($fedex_credentails_data)) {
                $fedex_credentails_data = array('fedexkey' => $fedex_credentails_data->fedexkey, 'fedexscrtkey' => $fedex_credentails_data->fedexscrtkey, 'accountnumber' => $fedex_credentails_data->accountnumber,'status' => $fedex_credentails_data->status, 'islive' => $fedex_credentails_data->islive, 'fedex_servicetype' => $fedex_credentails_data->fedex_servicetype);
            }
        }
        if (empty($fedex_credentails_data) || (empty($fedex_credentails_data['fedexkey']) || empty($fedex_credentails_data['fedexscrtkey']) || empty($fedex_credentails_data['accountnumber']))) {
            return false;
        }
        $is_live   = $fedex_credentails_data['islive'];  
        $url=($is_live) ? 'https://apis.fedex.com/oauth/token' : 'https://apis-sandbox.fedex.com/oauth/token'; // Need to change url in Live Mode // change for testing by Milind
        $data= ['grant_type'=>'client_credentials','client_id'=>$fedex_credentails_data['fedexkey'],'client_secret'=>$fedex_credentails_data['fedexscrtkey']];

        $options=array('http'=>array('header'=>"Content-type: application/x-www-form-urlencoded",'method'=>'POST','content'=> http_build_query($data)));
        
        $context= stream_context_create($options);
        
        $resp= file_get_contents($url,false,$context);
        
        $response_data= json_decode($resp);
        
        $access_token=$response_data->access_token;        
        if(isset($access_token))
        {
            // New FedEx sandbox integration for access token End 
            // $fedexClient              = new \SoapClient($fedexWSDL, $params);
            $weight_allow_error       = '';
            $shipper_PersonName       = '';
            $shipper_PhoneNumber      = '';
            $shipper_CompanyName      = '';
            $shipper_state            = '';
            $shipper_zip              = '';
            $shipper_city             = '';
            $shipper_country          = '';
            $shipper_StreetLines      = '';
            $weight                   = 0;
            $width                    = 1;
            $height                   = 1;
            $length                   = 1;
            $pieces                   = 0;
            $max_allow_lbs_for_home   = 70;
            $max_allow_lbs_for_ground = 150;
            $arr_days                 = array('1' => 'ONE_DAY', '2' => 'TWO_DAYS', '3' => 'THREE_DAYS', '4' => 'FOUR_DAYS', '5' => 'FIVE_DAYS', '6' => 'SIX_DAYS', '7' => 'SEVEN_DAYS', '8' => 'EIGHT_DAYS', '9' => 'NINE_DAYS', '10' => 'TEN_DAYS', '11' => 'ELEVEN_DAYS', '12' => 'TWELVE_DAYS', '13' => 'THIRTEEN_DAYS', '14' => 'FOURTEEN_DAYS', '15' => 'FIFTEEN_DAYS', '16' => 'SIXTEEN_DAYS', '17' => 'SEVENTEEN_DAYS', '18' => 'EIGHTEEN_DAYS', '19' => 'NINETEEN_DAYS', '20' => 'TWENTY_DAYS');
            $em                       = $this->getDoctrine()->getManager();
            $zipcode        = $recipientAddress['zipcode'];
            $state_code     = $recipientAddress['state_code'];
            $city_name      = $recipientAddress['city_name'];
            $country_code   = $recipientAddress['country_code'];
            $GeneralService = $this->get(GeneralService::class);
            //Get Store Main Configuration
            $SiteSetting                             = $GeneralService->getStoreMainConfig();
            // $Fedexrequest['WebAuthenticationDetail'] = array('UserCredential' => array('Key' => $fedex_credentails_data['fedexkey'], 'Password' => $fedex_credentails_data['fedexpassword']));
            // $Fedexrequest          = array('accountNumber' => '740561073');
            //$Fedexrequest['Version']                 = array('ServiceId' => 'crs', 'Major' => '20', 'Intermediate' => '0', 'Minor' => '0');
            //$request['TransactionDetail'] = array('CustomerTransactionId' => 'Ship_International_basic');
            //$Fedexrequest['ReturnTransitAndCommit']             = true;
            //$Fedexrequest['RequestedShipment']['PackagingType'] = 'YOUR_PACKAGING'; // valid values FEDEX_BOX, FEDEX_PAK, FEDEX_TUBE, YOUR_PACKAGING, ...
            //$Fedexrequest['RequestedShipment']['PackageCount']  = '1';                
            foreach ($cart as $k => $item) {                             
                if ($k = "cartItems") {
                   
                    foreach($item as $p => $prod)
                    {
                        if(is_numeric($p))
                        {                           
                            if (!empty($prod['id'])) {
                                $pid      = $prod['id'];
                                $prdqty   = $prod['prdqty'];
                                $product  = $em->getRepository('CatalogueBundle:Product')->find($pid);
                                //$name     = $product->getName();
                                $p_weigth = (!empty($product->getWeight())) ? $product->getWeight() : 0;
                                $p_length = (!empty($product->getLength())) ? $product->getLength() : 1;
                                $p_width  = (!empty($product->getWidth())) ? $product->getWidth() : 1;
                                $p_height = (!empty($product->getHeight())) ? $product->getHeight() : 1;
                                $p_piece  = (!empty($product->getPiece())) ? $product->getPiece() : 0;
                                $weight += ($p_weigth * $prdqty);
                                $length += ($p_length * $prdqty);
                                $width += ($p_width * $prdqty);
                                $height += ($p_height * $prdqty);
                                $pieces = $pieces + ($p_piece * $prdqty);                    
                            }
                        }
                        
                    }
                }
            }
            $totalweight = $cart['totalweight'];           
            if (($totalweight > $max_allow_lbs_for_home) or ($max_allow_lbs_for_ground < $totalweight)) {
                $FedexFreightrequest['rateRequestControlParameters']['returnTransitTimes']                                                          = true;
                $FedexFreightrequest['accountNumber']['value']                                                                                      = $fedex_credentails_data['accountnumber'];
                $FedexFreightrequest['freightRequestedShipment']['serviceType']                                                                     = "FEDEX_FREIGHT_PRIORITY";                
                $RecipientaddressArray                                                                                                              = array('PersonName' => '', 'CompanyName' => '', 'PhoneNumber' => '', 'StreetLines' => '',
                                                                                                                                                     'City' => $city_name, 'StateOrProvinceCode' => $state_code, 'PostalCode' => $zipcode, 
                                                                                                                                                     'CountryCode' => $country_code, 'Residential' => $Residential);
                $FedexFreightrequest['freightRequestedShipment']['shipper']                                                                         = $this->addShipperFedExFreight($shipperAddress);
                $FedexFreightrequest['freightRequestedShipment']['recipient']                                                                       = $this->addRecipientFedExFreight($RecipientaddressArray);
                $FedexFreightrequest['freightRequestedShipment']['shippingChargesPayment']['paymentType']                                           = "SENDER";
                $FedexFreightrequest['freightRequestedShipment']['shippingChargesPayment']['payor']['responsibleParty']['accountNumber']['value']   = $fedex_credentails_data['accountnumber'];
                $FedexFreightrequest['freightRequestedShipment']['freightShipmentDetail']['role']                                                   = "SHIPPER";
                $FedexFreightrequest['freightRequestedShipment']['freightShipmentDetail']['accountNumber']['value']                                 = $fedex_credentails_data['accountnumber'];
                $FedexFreightrequest['freightRequestedShipment']['freightShipmentDetail']['fedExFreightBillingContactAndAddress']                   = $this->fedExFreightBillingContactAndAddress($shipperAddress);
                $weight_lbs                                                                                                                         = $this->convertWeight($totalweight, 'lb', 'lb');
                $FedexFreightrequest['freightRequestedShipment']['freightShipmentDetail']['lineItem']                                               = array($this->FedExfreightLineItem1($weight_lbs));
                $FedexFreightrequest['freightRequestedShipment']['rateRequestType']                                                                 = array('LIST');            
                $FedexFreightrequest['freightRequestedShipment']['requestedPackageLineItems']                                                       = array($this->FedExfreightRequestedLineItem1($weight_lbs));
                $FedexFreightresponse = array();
                $FedexFreightresponse                                                                                                               =  $this->getfedexFreightRates($access_token,$FedexFreightrequest,$fedex_credentails_data['islive']);
                $FedexFreightresponseData                                                                                                           =  @json_decode($FedexFreightresponse);
                $FedexFreightErrormsg                                                                                                               =  $FedexFreightresponseData->errors[0]->message;
                $FedexFreightRateData                                                                                                               =  $FedexFreightresponseData->output->rateReplyDetails[0]->ratedShipmentDetails;
                $fedex_shipping_data                                                                                                                = array();
                if (empty($FedexFreightErrormsg))
                {
                    $freightrateReply = (array) $FedexFreightRateData;
                    //dump($freightrateReply);                    
                    $freightShipping_charge = $freightrateReply[0]->totalNetFedExCharge;
                    $servicetype = 'FedEx Frieght Priority';
                    if (!empty($cart)) {
                        $shipping_tax    = $cart['totalshipping_taxrate'];
                        $fedex_pickup    = 4;
                        $shipping_tax    = ($freightShipping_charge * $shipping_tax / 100);
                        $shipping_charge = $freightShipping_charge + $shipping_tax + $fedex_pickup;
                    }
                    $fedex_shipping_data['delivery_data'][] = array('freightCharge' => 'freight', 'service_type' => $servicetype, 'rate' => $shipping_charge);                                    
                    return $fedex_shipping_data;
                }
                else                                                                                                
                {
                    $this->addFlash('error', $FedexFreightErrormsg);
                    return false; 
                }                
            }
            else
            {                
                if($length > 120 || $width > 82 )
                {
                    $dimension_error = 'Fedex max dimensions limit exceed';
                    $this->addFlash('error', $dimension_error);
                    return false;
                }     
                $Fedexrequest['isLive']         = $fedex_credentails_data['islive'];
                $Fedexrequest['accountNumber']['value']         = $fedex_credentails_data['accountnumber'];
                $RecipientaddressArray                          = array('PersonName' => '', 'CompanyName' => '', 'PhoneNumber' => '', 'StreetLines' => '', 'City' => $city_name, 'StateOrProvinceCode' => $state_code, 'PostalCode' => $zipcode, 'CountryCode' => $country_code, 'Residential' => $Residential);
                $Fedexrequest['requestedShipment']['shipper']   = $this->addShipperFedEx($shipperAddress);
                $Fedexrequest['requestedShipment']['recipient'] = $this->addRecipientFedEx($RecipientaddressArray);
                $Fedexrequest['requestedShipment']['preferredCurrency'] = 'USD';
                $Fedexrequest['requestedShipment']['rateRequestType'] = array('ACCOUNT');
                //$Fedexrequest['requestedShipment']['serviceType'] = 'FEDEX_2_DAY_AM';
                $Fedexrequest['requestedShipment']['pickupType'] = 'DROPOFF_AT_FEDEX_LOCATION';
                $totalweight                                    = $cart['totalweight'];
                $Residential                                                    = false;
                $weight_lbs                                                     = $this->convertWeight($totalweight, 'lb', 'lb');        
                $Fedexrequest['requestedShipment']['requestedPackageLineItems'] = array($this->addPackageLineItem1($weight_lbs, $length, $width, $height));
                $Fedexrequest['requestedShipment']['packagingType'] = 'YOUR_PACKAGING';
                $Fedexrequest['carrierCodes'] = array("FDXG");
                $fedex_service_type = $configured_service_type;
                $response = array();
                if (!empty($fedex_service_type)) {
                    foreach ($fedex_service_type->fedex_servicetype as $key => $val) {                  
                        $Fedexrequest['requestedShipment']['serviceType'] = $key;                  
                        $responseData                    =  $this->getfedexRates($access_token,$Fedexrequest);
                        $response[$key] = @json_decode($responseData);
                        $errormsg = $response[$key]->errors[0]->message;
                    }
                }
                $fedex_shipping_data         = array();                            
                // if ($response->HighestSeverity != 'FAILURE' && $response->HighestSeverity != 'ERROR' && $response->HighestSeverity != 'WARNING') {
                if (empty($errormsg))
                {            
                    $rateReply = (array) $response->output->rateReplyDetails;                     
                    //$rate_amount = number_format($rateReply->RatedShipmentDetails->ShipmentRateDetail->TotalNetCharge->Amount, 2, ".", ",");
                    $deliveryDate = '';
                    if (array_key_exists('DeliveryTimestamp', $rateReply)) {
                        $deliveryDate = $rateReply->DeliveryTimestamp;
                    } else if (array_key_exists('TransitTime', $rateReply)) {
                        $deliveryDate = $rateReply->TransitTime;
                    }
                    $data               = array();
                    $fedex_service_type = $configured_service_type;
                    $servicetype = '';
                    if (!empty($fedex_service_type)) {
                        $services = (array) $fedex_service_type;
                        $services = (array) $services['fedex_servicetype'];                
                        $json_decode_service_type = array_keys($services);                
                        if (!empty($response)) {
                            foreach ($response as $key => $val) {  
                                if(empty($val->errors))
                                {
                                    if (in_array($key, $json_decode_service_type) ) {
                                        $dates = '';
                                        if (array_key_exists('DeliveryTimestamp', $val)) {
                                            $dates = date('Y-m-d H:i', strtotime($val->DeliveryTimestamp));
                                        } else if (property_exists((object) $val, 'TransitTime')) {
                                            if (in_array("$val->TransitTime", $arr_days)) {
                                                $days  = (array_search($val->TransitTime, $arr_days));
                                                $dates = date('Y-m-d', strtotime("+$days days"));
                                            }
                                        }                            
                                        $shipping_charge = $val->output->rateReplyDetails[0]->ratedShipmentDetails[0]->totalNetCharge;
                                        $servicetype = $val->output->rateReplyDetails[0]->serviceType;                            
                                        if (!empty($cart)) {
                                            $shipping_tax    = $cart['totalshipping_taxrate'];
                                            $fedex_pickup    = 4;
                                            $shipping_tax    = ($shipping_charge * $shipping_tax / 100);
                                            $shipping_charge = $shipping_charge + $shipping_tax + $fedex_pickup;
                                        }
                                        $fedex_shipping_data['delivery_data'][] = array('delivery_date' => $dates, 'service_type' => $servicetype, 'rate' => $shipping_charge);                                    
                                    }
                                }                     
                                
                            }
                        }
                    }
                    return $fedex_shipping_data;
                } else
                {                
                    $this->addFlash('error', $errormsg);
                    return false;
                }           
            }
        }
        else{
            return false;
        }        
    }
    public function getfedexRates($token,$Fedexrequest){                  
        $islive = $Fedexrequest['isLive'];         
        $url=($islive) ? 'https://apis.fedex.com/rate/v1/rates/quotes' : 'https://apis-sandbox.fedex.com/rate/v1/rates/quotes';                            
        $curl = curl_init();
        curl_setopt_array($curl, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_POSTFIELDS => json_encode($Fedexrequest),
        CURLOPT_HTTPHEADER => array(
            'Content-Type: application/json',
            'Authorization: Bearer '. $token,    
        ),
        ));
        $response = curl_exec($curl);                               
        curl_close($curl);
        return $response;
    }
    public function getfedexFreightRates($token,$FedexFreightrequest,$Fedex){               
        $islive = $Fedex;                 
        $url=($islive) ? 'https://apis.fedex.com/rate/v1/freight/rates/quotes' : 'https://apis-sandbox.fedex.com/rate/v1/freight/rates/quotes';                    
        $curl = curl_init();
        curl_setopt_array($curl, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_POSTFIELDS => json_encode($FedexFreightrequest),
        CURLOPT_HTTPHEADER => array(
            'Content-Type: application/json',
            'Authorization: Bearer '. $token,    
        ),
        ));
        $response = curl_exec($curl);                      
        curl_close($curl);
        return $response;
        
    }

    public function getUspsShippingData($cart, $method_id, $recipientAddress, $shipperAddress, $configured_service_type)
    {
        $usps_setting_data = array();
        $usps_data         = $this->getShippingMethodsCredentions($method_id);
        if (empty($usps_data)) {
            return false;
        } else {
            $usps_setting_data = json_decode($usps_data['module_setting']);
            if (!empty($usps_setting_data)) {
                $usps_setting_data = array('usps_userid' => $usps_setting_data->usps_userid, 'usps_servicetype' => $usps_setting_data->usps_servicetype, 'isLive' => $usps_setting_data->isLive);
            }
        }
        if (empty($usps_setting_data) || (empty($usps_setting_data['usps_userid']))) {
            return false;
        }
        $weight_allow_error       = '';
        $shipper_PersonName       = '';
        $shipper_PhoneNumber      = '';
        $shipper_CompanyName      = '';
        $shipper_state            = '';
        $shipper_zip              = '';
        $shipper_city             = '';
        $shipper_country          = '';
        $shipper_StreetLines      = '';
        $weight                   = 0;
        $width                    = 0;
        $height                   = 0;
        $length                   = 0;
        $pieces                   = 0;
        $max_allow_lbs_for_home   = 70;
        $max_allow_lbs_for_ground = 150;
        $em                       = $this->getDoctrine()->getManager();
        foreach ($cart as $k => $item) {
            if (is_numeric($k)) {
                $pid      = $item['id'];
                $prdqty   = $item['prdqty'];
                $product  = $em->getRepository('CatalogueBundle:Product')->find($pid);
                $name     = $product->getName();
                $p_weigth = (!empty($product->getWeight())) ? $product->getWeight() : 0;
                $p_length = (!empty($product->getLength())) ? $product->getLength() : 0;
                $p_width  = (!empty($product->getWidth())) ? $product->getWidth() : 0;
                $p_height = (!empty($product->getHeight())) ? $product->getHeight() : 0;
                $p_piece  = (!empty($product->getPiece())) ? $product->getPiece() : 0;
                $weight += ($p_weigth * $prdqty);
                $length += ($p_length * $prdqty);
                $width += ($p_width * $prdqty);
                $height += ($p_height * $prdqty);
                $pieces = $pieces + ($p_piece * $prdqty);
            }
        }
        $weight       = $cart['totalweight'];
        $zipcode      = $recipientAddress['zipcode'];
        $state_code   = $recipientAddress['state_code'];
        $city_name    = $recipientAddress['city_name'];
        $country_code = $recipientAddress['country_code'];

        if (($weight > $max_allow_lbs_for_home) or ($max_allow_lbs_for_ground < $weight)) {
            $weight_allow_error = 'USPS service allows only 70LBS for home delivery AND 150LBS for ground delivery';
        }
        $USPSServiceArray = array();
        foreach ($usps_setting_data['usps_servicetype'] as $key => $value) {
            $key_name                                      = explode('_', $key);
            $USPSServiceArray[$key_name[1]]['servicename'] = $value;
        }
        $USPSResponse      = array();
        $src_orig_zip      = $shipperAddress['PostalCode']; // Zipcode you are shipping FROM
        $src_country_code  = $shipperAddress['CountryCode'];
        $dest_zipcode      = $recipientAddress['zipcode'];
        $dest_state_code   = $recipientAddress['state_code'];
        $dest_city_name    = $recipientAddress['city_name'];
        $dest_country_code = $recipientAddress['country_code'];
        $USPSUserId        = $usps_setting_data['usps_userid'];
        $rate              = new \USPS\Rate($USPSUserId);
        if ($src_country_code == $dest_country_code) {
            // Initiate and set the username provided from usps
            // During test mode this seems not to always work as expected
            //$rate->setTestMode(true);
            // Create new package object and assign the properties
            // apartently the order you assign them is important so make sure
            // to set them as the example below
            // set the RatePackage for more info about the constants
            $weight_pound   = $this->convertWeight($weight, 'lb', 'lb'); // params weight,old_unit,new_unit
            $weight_ounzces = $this->convertWeight($weight, 'lb', 'oz'); // params weight,old_unit,new_unit
            $package        = new RatePackage();
            $package->setService(RatePackage::SERVICE_FIRST_CLASS);
            $package->setFirstClassMailType(RatePackage::MAIL_TYPE_PARCEL);
            $package->setZipOrigination($src_orig_zip);
            $package->setZipDestination($dest_zipcode);
            $package->setPounds($weight_pound);
            $package->setOunces($weight_ounzces);
            $package->setContainer('Container', 1);
            $package->setSize(RatePackage::SIZE_REGULAR);
            $package->setField('Machinable', true);
            // add the package to the rate stack
            $rate->addPackage($package);

            // Perform the request and print out the result
            $get_XMLData = $rate->getRate();
            // Was the call successful
            if ($rate->isSuccess()) {
                $document_xml = new \DomDocument;
                $document_xml->loadXML($get_XMLData); // On charge
                $matchingNodes = $document_xml->getElementsByTagName("Postage");
                if ($matchingNodes != null) {
                    for ($i = 0; $i < $matchingNodes->length; $i++) {
                        $currNode       = $matchingNodes->item($i);
                        $serviceName    = $currNode->getElementsByTagName("MailService");
                        $serviceName    = $serviceName->item(0);
                        $serviceCode    = $document_xml->getElementsByTagName("Postage")->item($i)->getAttribute('CLASSID');
                        $serviceNameKey = $this->filterServiceName($serviceName->nodeValue);
                        if (!isset($ship_postage[$serviceCode])) {
                            $ship_postage[$serviceCode]['rate'] = 0;
                        }
                        $this_rate                                 = $currNode->getElementsByTagName("Rate");
                        $this_rate                                 = $this_rate->item(0);
                        $this_rate                                 = $this_rate->nodeValue;
                        $ship_postage[$serviceCode]['servicename'] = $serviceNameKey;
                        $ship_postage[$serviceCode]['rate']        = $this_rate;
                    }
                    $USPSResponse = $ship_postage;
                }
            } else {
                return false;
                $rate->getErrorMessage();
            }
        } else {
            $rate->setInternationalCall(true);
            $rate->addExtraOption('Revision', 2);
            $accept_date  = date('d-m-Y');
            $package      = new RatePackage;
            $weight_pound = $this->convertWeight($weight, 'lb', 'lb'); // params weight,old_unit,new_unit
            $package->setPounds($weight_pound);
            $package->setOunces(0);
            $package->setField('Machinable', 'True');
            $package->setField('MailType', 'Package');
            $package->setField('GXG', array(
                'POBoxFlag' => 'Y',
                'GiftFlag'  => 'Y',
            ));
            $package->setField('ValueOfContents', 200);
            $package->setField('Country', $dest_country_code);
            $package->setField('Container', 'RECTANGULAR');
            $package->setField('Size', 'LARGE');
            $package->setField('Width', $width);
            $package->setField('Length', $length);
            $package->setField('Height', $height);
            $package->setField('Girth', 0);
            $package->setField('OriginZip', $src_orig_zip);
            $package->setField('CommercialFlag', 'N');
            $package->setField('AcceptanceDateTime', $accept_date);
            $package->setField('DestinationPostalCode', $dest_zipcode);
            // add the package to the rate stack
            $rate->addPackage($package);
            // Perform the request and print out the result
            $get_XMLData = $rate->getRate();
            // Was the call successful
            if ($rate->isSuccess()) {
                $document_xml = new \DomDocument;
                $document_xml->loadXML($get_XMLData); // On charge
                $matchingNodes = $document_xml->getElementsByTagName("Postage");
                if ($matchingNodes != null) {
                    for ($i = 0; $i < $matchingNodes->length; $i++) {
                        $currNode       = $matchingNodes->item($i);
                        $serviceName    = $currNode->getElementsByTagName("MailService");
                        $serviceName    = $serviceName->item(0);
                        $serviceCode    = $document_xml->getElementsByTagName("Postage")->item($i)->getAttribute('CLASSID');
                        $serviceNameKey = $this->filterServiceName($serviceName->nodeValue);
                        if (!isset($ship_postage[$serviceCode])) {
                            $ship_postage[$serviceCode]['rate'] = 0;
                        }
                        $this_rate                                 = $currNode->getElementsByTagName("Rate");
                        $this_rate                                 = $this_rate->item(0);
                        $this_rate                                 = $this_rate->nodeValue;
                        $ship_postage[$serviceCode]['servicename'] = $serviceNameKey;
                        $ship_postage[$serviceCode]['rate']        = $this_rate;
                    }
                    $USPSResponse = $ship_postage;
                }
            } else {
                return false;
                $rate->getErrorMessage();
            }
        }
        $USPSresponseServices = array();
        foreach ($USPSResponse as $array_key => $array_value) {
            if (array_key_exists($array_key, $USPSServiceArray)) {
                $USPSresponseServices[$array_key]['servicename'] = $array_value['servicename'];
                $shipping_charge                                 = $array_value['rate'];
                if (!empty($cart)) {
                    $shipping_tax    = $cart['totalshipping_taxrate'];
                    $shipping_tax    = ($shipping_charge * $shipping_tax / 100);
                    $shipping_charge = $shipping_charge + $shipping_tax;
                }
                $USPSresponseServices[$array_key]['rate'] = $shipping_charge;
            }
        }
        return $USPSresponseServices;
    }

    public function getUpsShippingData($cart, $method_id, $recipientAddress, $shipperAddress, $configured_service_type)
    {
        $ups_setting_data = array();
        $ups_data         = $this->getShippingMethodsCredentions($method_id);
        if (empty($ups_data)) {
            return false;
        } else {
            $ups_setting_data = json_decode($ups_data['module_setting']);
            if (!empty($ups_setting_data)) {
                $ups_setting_data = array(
                    'ups_userid'        => $ups_setting_data->ups_userid, 'ups_password' => $ups_setting_data->ups_password,
                    'ups_accountnumber' => $ups_setting_data->ups_accountnumber,
                    'ups_licensenumber' => $ups_setting_data->ups_licensenumber,
                    'isLive'            => $ups_setting_data->isLive,
                    'ups_servicetype'   => $ups_setting_data->ups_servicetype,
                );
            }
        }
        if (empty($ups_setting_data) || (empty($ups_setting_data['ups_userid'])) || (empty($ups_setting_data['ups_password'])) || (empty($ups_setting_data['ups_accountnumber'])) || (empty($ups_setting_data['ups_licensenumber']))) {
            return false;
        }
        $weight_allow_error       = '';
        $shipper_PersonName       = '';
        $shipper_PhoneNumber      = '';
        $shipper_CompanyName      = '';
        $shipper_state            = '';
        $shipper_zip              = '';
        $shipper_city             = '';
        $shipper_country          = '';
        $shipper_StreetLines      = '';
        $weight                   = 0;
        $width                    = 0;
        $height                   = 0;
        $length                   = 0;
        $pieces                   = 0;
        $max_allow_lbs_for_home   = 70;
        $max_allow_lbs_for_ground = 150;
        $em                       = $this->getDoctrine()->getManager();
        foreach ($cart as $k => $item) {
            if (is_numeric($k)) {
                $pid      = $item['id'];
                $prdqty   = $item['prdqty'];
                $product  = $em->getRepository('CatalogueBundle:Product')->find($pid);
                $name     = $product->getName();
                $p_weigth = (!empty($product->getWeight())) ? $product->getWeight() : 0;
                $p_length = (!empty($product->getLength())) ? $product->getLength() : 0;
                $p_width  = (!empty($product->getWidth())) ? $product->getWidth() : 0;
                $p_height = (!empty($product->getHeight())) ? $product->getHeight() : 0;
                $p_piece  = (!empty($product->getPiece())) ? $product->getPiece() : 0;
                $weight += ($p_weigth * $prdqty);
                $length += ($p_length * $prdqty);
                $width += ($p_width * $prdqty);
                $height += ($p_height * $prdqty);
                $pieces = $pieces + ($p_piece * $prdqty);
            }
        }
        $weight       = $cart['totalweight'];
        $weight       = $this->convertWeight($weight, 'lb', 'lb');
        $zipcode      = $recipientAddress['zipcode'];
        $state_code   = $recipientAddress['state_code'];
        $city_name    = $recipientAddress['city_name'];
        $country_code = $recipientAddress['country_code'];

        if (($weight > $max_allow_lbs_for_home) or ($max_allow_lbs_for_ground < $weight)) {
            $weight_allow_error = 'UPS service allows only 70LBS for home delivery AND 150LBS for ground delivery';
        }
        $UPSServiceArray   = array();
        $USPSResponse      = array();
        $src_orig_zip      = $shipperAddress['PostalCode']; // Zipcode you are shipping FROM
        $src_country_code  = $shipperAddress['CountryCode'];
        $dest_zipcode      = $recipientAddress['zipcode'];
        $dest_state_code   = $recipientAddress['state_code'];
        $dest_city_name    = $recipientAddress['city_name'];
        $dest_country_code = $recipientAddress['country_code'];
        foreach ($ups_setting_data['ups_servicetype'] as $key => $value) {
            $UPSServiceArray[$key]['servicename'] = $value;
            $params                               = array('is_live' => $ups_setting_data['isLive'], 'accesslicensenumber' => $ups_setting_data['ups_licensenumber'], 'userid' => $ups_setting_data['ups_userid'], 'password' => $ups_setting_data['ups_password'], 'shipper' => array('postalcode' => $src_orig_zip, 'countrycode' => $src_country_code, 'shipping_account_number' => $ups_setting_data['ups_accountnumber']), 'shipto' => array('postalcode' => $dest_zipcode, 'countrycode' => $dest_country_code), 'service_code' => $key, 'packaging_type' => '02', 'dimension' => array('code' => 'IN', 'length' => $length, 'width' => $width, 'height' => $height, 'weight' => $weight));
            if ($params['is_live'] == 1) {
                $url = "https://wwwcie.ups.com/ups.app/xml/Rate"; //testing
            } else {
                $url = "https://www.ups.com/ups.app/xml/Rate"; // production https://onlinetools.ups.com/ups.app/xml/Rate
            }
            $data = '<?xml version="1.0"?>
                        <AccessRequest xml:lang="en-US">
                            <AccessLicenseNumber>' . $params['accesslicensenumber'] . '</AccessLicenseNumber>
                            <UserId>' . $params['userid'] . '</UserId>
                            <Password>' . $params['password'] . '</Password>
                        </AccessRequest>
                        <?xml version="1.0"?>
                        <RatingServiceSelectionRequest xml:lang="en-US">
                            <Request>
                                <TransactionReference>
                                    <CustomerContext>UPS Request</CustomerContext>
                                    <XpciVersion>1.0001</XpciVersion>
                                </TransactionReference>
                                <RequestAction>Rate</RequestAction>
                                <RequestOption>Rate</RequestOption>
                            </Request>
                            <PickupType>
                                <Code>01</Code>
                            </PickupType>
                            <Shipment>
                                <Shipper>
                                    <Address>
                                        <PostalCode>' . $params['shipper']['postalcode'] . '</PostalCode>
                                        <CountryCode>' . $params['shipper']['countrycode'] . '</CountryCode>
                                    </Address>
                                <ShipperNumber>' . $params['shipper']['shipping_account_number'] . '</ShipperNumber>
                                </Shipper>
                                <ShipTo>
                                    <Address>
                                        <PostalCode>' . $params['shipto']['postalcode'] . '</PostalCode>
                                        <CountryCode>' . $params['shipto']['countrycode'] . '</CountryCode>
                                    <ResidentialAddressIndicator/>
                                    </Address>
                                </ShipTo>
                                <ShipFrom>
                                    <Address>
                                        <PostalCode>' . $params['shipper']['postalcode'] . '</PostalCode>
                                        <CountryCode>' . $params['shipper']['countrycode'] . '</CountryCode>
                                    </Address>
                                </ShipFrom>
                                <Service>
                                    <Code>' . $params['service_code'] . '</Code>
                                </Service>
                                <Package>
                                    <PackagingType>
                                        <Code>' . $params['packaging_type'] . '</Code>
                                    </PackagingType>
                                    <Dimensions>
                                        <UnitOfMeasurement>
                                            <Code>' . $params['dimension']['code'] . '</Code>
                                        </UnitOfMeasurement>
                                        <Length>' . $params['dimension']['length'] . '</Length>
                                        <Width>' . $params['dimension']['width'] . '</Width>
                                        <Height>' . $params['dimension']['height'] . '</Height>
                                    </Dimensions>
                                    <PackageWeight>
                                        <UnitOfMeasurement>
                                            <Code>LBS</Code>
                                        </UnitOfMeasurement>
                                        <Weight>' . $params['dimension']['weight'] . '</Weight>
                                    </PackageWeight>
                                </Package>
                            </Shipment>
                        </RatingServiceSelectionRequest>';

            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_HEADER, 1);
            curl_setopt($ch, CURLOPT_TIMEOUT, 60);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            if ($data) {
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            }
            curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
            $contents = curl_exec($ch);
            preg_match('/<MonetaryValue>(.*?)<\/MonetaryValue>/', $contents, $rate);
            if (!empty($rate)) {
                $shipping_charge = $rate[1];
                if (!empty($cart)) {
                    $shipping_tax    = $cart['totalshipping_taxrate'];
                    $shipping_tax    = ($shipping_charge * $shipping_tax / 100);
                    $shipping_charge = $shipping_charge + $shipping_tax;
                }
                $UPSServiceArray[$key]['rate'] = $shipping_charge;
            } else {
                unset($UPSServiceArray[$key]);
            }
            curl_close($ch);
            //return $contents;
        }
        return $UPSServiceArray;
    }

    public function filterServiceName($serviceName)
    {

        $serviceNameKey = str_replace("&lt;sup&gt;&amp;reg;&lt;/sup&gt;", "", $serviceName);
        $serviceNameKey = str_replace("&lt;sup&gt;&amp;trade;&lt;/sup&gt;", "", $serviceNameKey);
        $serviceNameKey = str_replace("&lt;sup&gt;&#8482;&lt;/sup&gt;", "", $serviceNameKey);
        $serviceNameKey = str_replace("&lt;sup&gt;&#174;&lt;/sup&gt;", "", $serviceNameKey);
        $serviceNameKey = str_replace("l&lt;sup&gt;&#174;&lt;/sup&gt;", "", $serviceNameKey);

        return $serviceNameKey;
    }

    public function removeDay($serviceName)
    {

        $serviceName = str_replace(array(' 1-Day', ' 2-Day', ' 3-Day', ' Military', ' DPO'), '', $serviceName);

        return $serviceName;
    }

    public function addPackageLineItem1($weight_value = 0, $length = 1, $width = 1, $height = 1, $dimensions_units = 'IN')
    {
        $packageLineItem = array(            
            'weight'            => array(
                'value' => $weight_value,
                'units' => 'LB',
            ),
            'dimensions'        => array(
                'length' => $length,
                'width'  => $width,
                'height' => $height,
                'units'  => $dimensions_units,
            ),
        );
        return $packageLineItem;
    }
    public function FedExfreightLineItem1($weight_value = 0)
    {
        $FedExLineItem = array( 
            'freightClass' => "CLASS_050",
            'handlingUnits'=> "1",
            'pieces'=> 1,
            'subPackagingType'=> "BUNDLE",
            'id' => "books",           
            'weight'            => array(
                'value' => $weight_value,
                'units' => 'LB',
            ),            
        );
        return $FedExLineItem;
    }
    public function FedExfreightRequestedLineItem1($weight_value = 0)
    {
        $FedExRequestedLineItem = array(           
                'id' => "books"                       
            );
           
        return array(
                'associatedFreightLineItems'=>array($FedExRequestedLineItem),
                'weight'=> array(
                'value' => $weight_value,
                'units' => 'LB'
                ),
                "subPackagingType" => "BUNDLE" 
        );
    }
    public function addShipper($addressArray)
    {
        $shipper = array(
            'Contact' => array(
                'PersonName'  => (isset($addressArray['PersonName'])) ? $addressArray['PersonName'] : '',
                'CompanyName' => (isset($addressArray['CompanyName'])) ? $addressArray['CompanyName'] : '',
                'PhoneNumber' => (isset($addressArray['PhoneNumber'])) ? $addressArray['PhoneNumber'] : '',
            ),
            'Address' => array(
                'StreetLines'         => (isset($addressArray['StreetLines'])) ? $addressArray['StreetLines'] : '',
                'City'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'StateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : '',
                'PostalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'CountryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
            ),
        );
        return $shipper;
    }

    public function addRecipient($addressArray)
    {
        $recipient = array(
            'Contact' => array(
                'PersonName'  => (isset($addressArray['PersonName'])) ? $addressArray['PersonName'] : '',
                'CompanyName' => (isset($addressArray['CompanyName'])) ? $addressArray['CompanyName'] : '',
                'PhoneNumber' => (isset($addressArray['PhoneNumber'])) ? $addressArray['PhoneNumber'] : '',
            ),
            'Address' => array(
                'StreetLines'         => (isset($addressArray['StreetLines'])) ? $addressArray['StreetLines'] : '',
                'City'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'StateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : '',
                'PostalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'CountryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
                'Residential'         => $addressArray['Residential'], // this value will be boolean true or false
            ),
        );
        return $recipient;
    }
    public function addShipperfedex($addressArray)
    {
        $shipper = array(            
            'address' => array(
                'streetLines'         => array((isset($addressArray['StreetLines'])) ? $addressArray['StreetLines'] : ''),
                'city'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'stateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : '',
                'postalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'countryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
                'residential'         => (isset($addressArray['Residential'])) ? $addressArray['Residential'] : 'false'
            ),
        );
        return $shipper;
    }

    public function addRecipientfedex($addressArray)
    {
        $recipient = array(

            'address' => array(
                'streetLines'         => array((isset($addressArray['StreetLines'])) ? $addressArray['StreetLines'] : ''),
                'city'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'stateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : 'sdfddfsd',
                'postalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'countryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
                'residential'         => (isset($addressArray['Residential'])) ? $addressArray['Residential'] : 'false' // this value will be boolean true or false
            ),
        );
        return $recipient;
    }
    public function fedExFreightBillingContactAndAddress($addressArray) {

        $shipper = array(            
            'address' => array(
                'streetLines'         => array((isset($addressArray['StreetLines'])) ? $addressArray['StreetLines'] : ''),
                'city'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'stateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : '',
                'postalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'countryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',                                
            ),
        );
        return $shipper;
    }
    public function addShipperFedExFreight($addressArray)
    {
        $shipper = array(            
            'address' => array(
                'city'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'stateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : '',
                'postalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'countryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
            ),
        );
        return $shipper;
    }

    public function addRecipientFedExFreight($addressArray)
    {       
        $recipient = array(

            'address' => array(                              
                'city'                => (isset($addressArray['City'])) ? $addressArray['City'] : '',
                'stateOrProvinceCode' => (isset($addressArray['StateOrProvinceCode'])) ? $addressArray['StateOrProvinceCode'] : 'sdfddfsd',
                'postalCode'          => (isset($addressArray['PostalCode'])) ? $addressArray['PostalCode'] : '',
                'countryCode'         => (isset($addressArray['CountryCode'])) ? $addressArray['CountryCode'] : '',
            ),
        );
        return $recipient;
    }

    //GOOGLE ANALYTICS FUNCTION START
    // Function to return the JavaScript representation of a TransactionData object.
    public function getTransactionJs(&$trans)
    {
        return <<<HTML
            ga('ecommerce:addTransaction', {
              'id': '{$trans['id']}',
              'affiliation': '{$trans['affiliation']}',
              'revenue': '{$trans['revenue']}',
              'shipping': '{$trans['shipping']}',
              'tax': '{$trans['tax']}'
            });
HTML;
    }

    // Function to return the JavaScript representation of an ItemData object.
    public function getItemJs(&$transId, &$item)
    {
        return <<<HTML
        ga('ecommerce:addItem', {
          'id': '$transId',
          'name': '{$item['name']}',
          'sku': '{$item['sku']}',
          'category': '{$item['category']}',
          'price': '{$item['price']}',
          'quantity': '{$item['quantity']}'
        });
HTML;
    }

    //GOOGLE ANALYTICS FUNCTION START
    //
    public function getShippingMethodsCredentions($method_id)
    {
        $em = $this->getDoctrine()->getManager();
        if (!empty($method_id)) {
            $query     = "SELECT ms.* FROM module_setting ms INNER JOIN shipping_method sm ON ms.module_id=sm.module_id WHERE ms.method_type='Shipping' AND  ms.status=1 AND ms.is_deleted=0 AND  sm.status=1 AND sm.is_deleted=0  AND sm.id=$method_id";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $shipping_data = $statement->fetchAll();
            if (!empty($shipping_data)) {
                $shipping_data = $shipping_data[0];
                return $shipping_data;
            }
        }
        return false;
    }

    public function isDataExistInZone($method_id, $recipientAddress)
    {
        $zipcode        = $recipientAddress['zipcode'];
        $state_id       = $recipientAddress['state_id'];
        $city_id        = $recipientAddress['city_id'];
        $country_id     = $recipientAddress['country_id'];
        $em             = $this->getDoctrine()->getManager();
        $shippingcharge = 0;
        $data           = array();

        $select_fields   = " sz.*,szm.method_id as ShippingMethodId,sm.name AS ShippingMethodName,szm.options_data as ShippingMethodOptionsData ";
        $city_conditions = '';
        if (is_numeric($city_id)) {
            $city_conditions = " AND szc.city_id=$city_id ";
        }
        $select_query_zipcode = "SELECT $select_fields FROM shipping_zone sz
        INNER JOIN shipping_zone_method szm ON sz.id=szm.shipping_zone_id AND szm.is_deleted = '0' AND szm.is_enabled = '1'
        INNER JOIN shipping_zone_zipcode szz ON sz.id=szz.shipping_zone_id
        INNER JOIN shipping_zone_city szc ON sz.id=szc.shipping_zone_id
        INNER JOIN shipping_zone_state szs ON sz.id=szs.shipping_zone_id
        INNER JOIN shipping_method sm ON szm.method_id=sm.id AND sm.is_deleted='0' AND sm.status='1'
        WHERE  sz.is_deleted = '0' AND sz.status = '1' AND sm.id=$method_id $city_conditions AND szs.state_id=$state_id AND sz.country_id=$country_id
        AND ('".$zipcode."' BETWEEN substring_index(`zipcode`,'-',1)  + 0 AND substring_index(`zipcode`,'-',-1) + 0 ) GROUP BY szm.shipping_zone_id";
        $statement = $em->getConnection()->prepare($select_query_zipcode);
        $statement->execute();
        $result_zipcode = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY); //echo  $cart['totalcart'];
        if (!empty($result_zipcode)) {
            $result_zipcode = $result_zipcode[0];
            return $result_zipcode;
        }
        if (is_numeric($city_id)) {
            $select_query_city = "SELECT $select_fields FROM shipping_zone sz
                INNER JOIN shipping_zone_method szm ON sz.id=szm.shipping_zone_id AND szm.is_deleted = '0' AND szm.is_enabled = '1'
                INNER JOIN shipping_zone_city szc ON sz.id=szc.shipping_zone_id
                INNER JOIN shipping_zone_state szs ON sz.id=szs.shipping_zone_id
                INNER JOIN shipping_method sm ON szm.method_id=sm.id AND sm.is_deleted='0' AND sm.status='1'
                WHERE  sz.is_deleted = '0' AND sz.status = '1' AND sm.id=$method_id
                AND szc.city_id=$city_id  AND szs.state_id=$state_id AND sz.country_id=$country_id
                GROUP BY szm.shipping_zone_id";
            $statement = $em->getConnection()->prepare($select_query_city);
            $statement->execute();
            $result_city = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result_city)) {
                foreach ($result_city as $s_city) {
                    $zone_id         = $s_city['id'];
                    $zone_city_query = "SELECT id FROM shipping_zone_zipcode WHERE shipping_zone_id=$zone_id";
                    $statement       = $em->getConnection()->prepare($zone_city_query);
                    $statement->execute();
                    $result_exist_zipcode_zone_id_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if (empty($result_exist_zipcode_zone_id_data)) {
                        return $s_city[0];
                        break;
                    }
                }
                //return $result_city;
            }
        }

        $city_conditions = '';
        if (is_numeric($city_id)) {
            $city_conditions = " AND szc.city_id!=$city_id ";
        }
        if (is_numeric($state_id)) {
            $select_query_state = "SELECT $select_fields FROM shipping_zone sz
                INNER JOIN shipping_zone_method szm ON sz.id=szm.shipping_zone_id AND szm.is_deleted = '0' AND szm.is_enabled = '1'
                INNER JOIN shipping_zone_state szs ON sz.id=szs.shipping_zone_id
                INNER JOIN shipping_method sm ON szm.method_id=sm.id AND sm.is_deleted='0' AND sm.status='1'
                WHERE  sz.is_deleted = '0' AND sz.status = '1' AND sm.id=$method_id  AND szs.state_id=$state_id  AND sz.country_id=$country_id
                GROUP BY szm.shipping_zone_id";
            $statement = $em->getConnection()->prepare($select_query_state);
            $statement->execute();
            $result_state = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result_state)) {

                foreach ($result_state as $s_state) {
                    $zone_id          = $s_state['id'];
                    $zone_state_query = "SELECT id FROM shipping_zone_city WHERE shipping_zone_id=$zone_id";
                    $statement        = $em->getConnection()->prepare($zone_state_query);
                    $statement->execute();
                    $result_exist_zipcode_zone_id_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if (empty($result_exist_zipcode_zone_id_data)) {
                        // return $s_state[0];
                        return $s_state;
                        break;
                    }
                }
                //return $result_state;
            }
        }
        if (is_numeric($country_id)) {
            $select_query_country = "SELECT $select_fields FROM shipping_zone sz
        INNER JOIN shipping_zone_method szm ON sz.id=szm.shipping_zone_id AND szm.is_deleted = '0' AND szm.is_enabled = '1'
        INNER JOIN shipping_method sm ON szm.method_id=sm.id AND sm.is_deleted='0' AND sm.status='1'
        WHERE  sz.is_deleted = '0' AND sz.status = '1' AND sm.id=$method_id  AND sz.country_id=$country_id
        GROUP BY szm.shipping_zone_id";
            $statement = $em->getConnection()->prepare($select_query_country);
            $statement->execute();
            $result_country = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result_country)) {
                foreach ($result_country as $s_country) {
                    $zone_id          = $s_country['id'];
                    $zone_state_query = "SELECT id FROM shipping_zone_state WHERE shipping_zone_id=$zone_id";
                    $statement        = $em->getConnection()->prepare($zone_state_query);
                    $statement->execute();
                    $result_exist_zipcode_zone_id_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if (empty($result_exist_zipcode_zone_id_data)) {
                        return $s_country;
                        break;
                    }
                }
                return $result_country[0];
            }
        }
        return $data;
    }

    public function time_elapsed_string($datetime, $full = false)
    {
        $now  = new \DateTime('now');
        $ago  = new \DateTime($datetime);
        $diff = $now->diff($ago);

        $diff->w = floor($diff->d / 7);
        $diff->d -= $diff->w * 7;

        $string = array(
            'y' => 'year',
            'm' => 'month',
            'w' => 'week',
            'd' => 'day',
            'h' => 'hr',
            'i' => 'min',
            's' => 'sec',
        );
        foreach ($string as $k => &$v) {
            if ($diff->$k) {
                $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
            } else {
                unset($string[$k]);
            }
        }

        if (!$full) {
            $string = array_slice($string, 0, 1);
        }

        return $string ? implode(', ', $string) . ' ago' : 'just now';
    }

    public function storeLogs($logFor = '1', $logType = '', $logModuleId = 0, $logItemId = 0, $logMessage = '', $slug = '', $log_old_data = '', $log_new_data = '', $EmailId = '')
    {
        $ClientIp        = $_SERVER['REMOTE_ADDR'];
        $ClientAgent     = $_SERVER['HTTP_USER_AGENT'];
        $session         = new Session;
        $GeneralFunction = new GeneralFunctionController;
        if ($session->has('loginCustId')) {
            $UserId = ($GeneralFunction->decryptString($this->get('session')->get('loginCustId'))) ? $GeneralFunction->decryptString($this->get('session')->get('loginCustId')) : 0;
        } else {
            $UserId = 0;
        }
        $UserName  = $this->get('session')->get('loginAdminName');
        $UserEmail = $this->get('session')->get('loginCustEmail');
        if (empty($UserEmail)) {
            $UserEmail = $this->get('session')->get('loginAdminEmail');
        }
        if(!empty($EmailId)){
            $UserEmail = $EmailId;
        }
        if (empty($logModuleId) || $logModuleId == "" || $logModuleId == 0 || $logModuleId <= 0) {
            if (!empty($slug)) {
                $logModuleId = $this->getModuleIdbySlug($slug);
            } else {
                $ModuleData = $this->getModuleIdAndName();
                if (!empty($ModuleData)) {
                    $Module = explode("||", $ModuleData);
                    if (!empty($Module[0])) {
                        $logModuleId = $Module[0];
                    }
                    if (!empty($Module[1])) {
                        $logModuleId   = null;
                        $logModuleName = $Module[1];
                        $logMessage    = str_replace("MODULE_NAME", $logModuleName, $logMessage);
                    }
                }
            }
        } else {
            $logModuleId = null;
        }
        $em       = $this->getDoctrine()->getManager();
        $datetime = new \DateTime('now');
        $logs     = new Logs();
        $logs->setLogFor($logFor);
        $logs->setLogType($logType);
        $logs->setLogUserId($UserId);
        $logs->setLogModuleId($logModuleId);
        $logs->setLogItemId($logItemId);
        $logs->setLogEmailId($UserEmail);
        $logs->setLogMessage($logMessage);
        $logs->setLogUserIp($ClientIp);
        $logs->setLogBrowserData($ClientAgent);
        $logs->setLogCreatedDate($datetime);
        if (!empty($log_old_data)) {
            $logs->setLogOldData(json_encode($log_old_data));
        }
        if (!empty($log_new_data)) {
            $logs->setLogNewData(json_encode($log_new_data));
        }
        $em->persist($logs);
        $em->flush($logs);
    }
    // don't use this function. use general service file function.
    public function storeNotification($notificationUserId = '0', $itemType = '2', $itemId = '0', $title = '', $message = '')
    {
        $session       = new Session;
        $em            = $this->getDoctrine()->getManager();
        $datetime      = new \DateTime('now');
        $notifications = new Notifications();
        $notifications->setLangId(1);
        $notifications->setNotificationUser(2);
        if ($notificationUserId > 0) {
            $notifications->setNotificationUserId($notificationUserId);
        }
        $notifications->setItemType($itemType);
        $notifications->setItemId($itemId);
        $notifications->setTitle($title);
        $notifications->setMessage($message);
        $notifications->setIsRead(0);
        $notifications->setCreatedDate($datetime);
        $notifications->setUpdatedDate($datetime);
        $em->persist($notifications);
        $em->flush($notifications);
    }

    public function base_url($request)
    {
        $proto = $request->getScheme();

        if($proto != 'https') {
            if ($this->container->hasParameter("secureurl") && $this->getParameter("secureurl") !== false) {
                $proto = "https";
            }
        }
        $baseurl = $proto . '://' . $request->getHttpHost() . $request->getBasePath();
        return $baseurl;
    }

    // Convert Weight
    public function convertWeight($weight, $old_unit = 'lb', $new_unit = 'lb')
    {
        $units['oz']   = 16;
        $units['lb']   = 1; //2.205;
        $units['gram'] = 453.592;
        $units['kg']   = 0.45; //0.0283495231;

        if ($old_unit != "lb") {
            $weight = $weight / $units[$old_unit];
        }

        $weight = $weight * $units[$new_unit];
        if ($weight < .1) {
            $weight = .1;
        }

        return round($weight, 2);
    }

    // Convert Size
    public function convertSize($size, $old_unit = 'in', $new_unit = 'in')
    {
        $units['in']   = 1;
        $units['cm']   = 2.54;
        $units['mm']   = 25.4;
        $units['feet'] = 0.083333;
        if ($old_unit != "in") {
            $size = $size / $units[$old_unit];
        }

        $size = $size * $units[$new_unit];

        if ($size < .1) {
            $size = .1;
        }

        return round($size, 2);
    }

    public function getLocalShippingOptionDescription($id, $fields = '*')
    {
        $result = array();
        $em     = $this->getDoctrine()->getManager();
        if (!empty($id)) {
            $query = "SELECT $fields FROM shipping_options so
         WHERE so.id=$id";
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY)[0];
        }
        return $result;
    }

    public function guardianRequestData($sale, $warrantyPayment, $warranty)
    {
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();

        $retailWarrantyDetails       = json_decode($sale->getWarrantyDetails(), true);
        $protectionWarrantyDetails   = json_decode($warrantyPayment->getWarrantyDetails(), true);
        $discount_detail             = json_decode($sale->getDiscountDetails(), true);
        $mydata                      = array();
        $mydata["StoreNumber"]       = $SiteSetting['id']; //1001;
        $mydata["RetailerNumber"]    = $warranty->getProviderId(); // 877 //10000;
        $mydata["DistributorNumber"] = "TJQa9IGJ";
        $mydata["Checksum"]          = '1234';
        $mydata["TransactionNumber"] = ($warrantyPayment->getTransactionId()) ? $warrantyPayment->getTransactionId() : $warrantyPayment->getInvoiceId();
        $mydata["InvoiceNumber"]     = $warrantyPayment->getInvoiceId();
        $mydata["ProtectionPlanSku"] = $protectionWarrantyDetails['warranty_code'];

        $dt                              = date("Y-m-d");
        $mydata["EstimatedDeliveryDate"] = date("m-d-Y", strtotime("$dt +3 day"));
        $mydata["TransactionTotal"]      = $sale->getSubTotal();
        $mydata["RetailProtectionPrice"] = $retailWarrantyDetails['warranty_price'];
        $mydata["Tax"]                   = $sale->getTotalTax();
        $mydata["ShippingCost"]          = $sale->getShippingCharge();
        $mydata["Coupon"]                = ($sale->getTotalDiscount()) ? $sale->getTotalDiscount() : "";
        $mydata["LoyaltyCoupon"]         = "0.00";
        $mydata["TotalBilledAmount"]     = $sale->getTotalamount();
        $mydata["ProtectionPlanPrice"]   = $warrantyPayment->getWarrantyPrice();
        $mydata["FinanceName"]           = '';
        $mydata["FinanceValue"]          = "0.00";
        $newDate                         = date("m-d-Y", strtotime($sale->getCreatedDate()->format('Y-m-d')));
        $mydata["InvoiceDate"]           = $newDate;

        $productData = $this->getDoctrine()->getRepository('SalesBundle:OrderDetails')->findBy(array('order' => $sale->getId()));

        foreach ($productData as $item) {
            $imageUrl                          = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/' . $item->getProduct()->getMainImage();
            $lineitem["ItemTransactionNumber"] = $item->getProduct()->getId();

            $lineitem["ManufacturersSKU"] = $item->getProductSku();
            $lineitem["WholesalePrice"]   = $item->getProdPackPrice();
            $lineitem["RetailPrice"]      = $item->getProdPackPrice();
            $lineitem["ImageUrl"]         = $imageUrl;
            $lineitem["Description"]      = addslashes($item->getProduct()->getShortDescription());
            $lineitem["Quantity"]         = $item->getProductQty();
            $lineitem["ManufacturerName"] = $item->getProduct()->getBrand()->getName();
            $TransactionItemsData[]       = $lineitem;
        }

        $mydata["TransactionItems"]                                     = $TransactionItemsData;
        $mydata["Payment"]["Billing"]["PaySameAsShip"]                  = false;
        $mydata["Payment"]["Billing"]["CustomerInfo"]["CustomerNumber"] = ($sale->getCustomer()) ? $sale->getCustomer()->getId() : "";
        $mydata["Payment"]["Billing"]["CustomerInfo"]["FirstName"]      = $sale->getBillingFirstName();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["LastName"]       = $sale->getBillingLastname();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["Address_1"]      = $sale->getBillingAddress1();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["Address_2"]      = $sale->getBillingAddress2();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["LandMark"]       = "";
        $mydata["Payment"]["Billing"]["CustomerInfo"]["State"]          = $this->getStateNameById($sale->getBillingState());
        $mydata["Payment"]["Billing"]["CustomerInfo"]["City"]           = $this->getCityNameById($sale->getBillingCity());
        $mydata["Payment"]["Billing"]["CustomerInfo"]["Zip"]            = $sale->getBillingZipcode();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["Email"]          = $sale->getBillingEmail();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["WorkPhone"]      = $sale->getBillingPhone();
        $mydata["Payment"]["Billing"]["CustomerInfo"]["HomePhone"]      = $sale->getBillingPhone();

        $mydata["Payment"]["Shipping"]["FreeInStorePickup"]              = false;
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["CustomerNumber"] = ($sale->getCustomer()) ? $sale->getCustomer()->getId() : "";
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["FirstName"]      = $sale->getShippingFirstName();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["LastName"]       = $sale->getShippingLastname();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["Address_1"]      = $sale->getShippingAddress1();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["Address_2"]      = $sale->getShippingAddress2();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["LandMark"]       = "";
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["State"]          = $this->getStateNameById($sale->getShippingState());
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["City"]           = $this->getCityNameById($sale->getShippingCity());
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["Zip"]            = $sale->getShippingZipcode();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["Email"]          = $sale->getShippingEmail();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["WorkPhone"]      = $sale->getShippingPhone();
        $mydata["Payment"]["Shipping"]["CustomerInfo"]["HomePhone"]      = $sale->getShippingPhone();
        return json_encode($mydata);
    }

    public function getModuleSettingBySlug($slug = '')
    {
        $result = '';
        if (!empty($slug)) {
            $field_data                      = 'ms';
            $GeneralService                  = $this->get(GeneralService::class);
            $em                              = $this->getDoctrine()->getManager();
            $join_array                      = array();
            $condition_array                 = array('m.status' => 1, 'm.isDeleted' => 0, 'm.slug' => $slug);
            $join_array[0]['type']           = '';
            $join_array[0]['join_from']      = 'ms.module';
            $join_array[0]['join_to']        = 'm.id';
            $join_array[0]['join_allies']    = 'ms';
            $join_array[0]['join_class']     = 'SystemBundle:ModuleSetting';
            $join_array[0]['join_condition'] = " AND ms.status = 1 AND ms.isDeleted = 0";
            $module_setting_data             = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:Module", $allies = 'm', $condition_array, $operator_array = array(), $field_data, $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = false);
            if (!empty($module_setting_data)) {
                $result                = $module_setting_data[0];
                $string                = preg_replace("/[\r\n]+/", "", $result->getModuleSetting());
                $json                  = utf8_encode($string);
                $json                  = json_decode($json);
                $result->ModuleSetting = $json;
            }
        }
        return $result;
    }

    public function getIsoCodeById($id, $table = 'Country')
    {
        if (!empty($id)) {
            if (is_numeric($id)) {
                $Data = $this->getDoctrine()->getRepository("LocalizationBundle:$table")->find($id);
                return $Data->getIsoCode();
            }
        }
        return false;
    }

    public function getIsoCode3ById($id, $table = 'Country')
    {
        if (!empty($id)) {
            if (is_numeric($id)) {
                $Data = $this->getDoctrine()->getRepository("LocalizationBundle:$table")->find($id);
                return $Data->getIsoCode3();
            }
        }
        return false;
    }

    public function removeDecimalPointsFromAmount($amount)
    {
        return number_format($amount, 2, '', '');
    }

    public function getMainAffirmChargeId($OrderId, $field = 'transaction_id')
    {
        $charge_id = '';
        if (!empty($OrderId)) {
            $em        = $this->getDoctrine()->getManager();
            $sql       = "SELECT $field FROM order_payment WHERE order_id=$OrderId ORDER BY id DESC LIMIT 1";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll()[0];
            if (!empty($result)) {
                $charge_id = $result[$field];
            }
        }
        return $charge_id;
    }

    //CODE TO CALL API FOR PANAMA MODULE
    protected function SendAPICurlRequest($model, $requestURL, $method, $panamaConfigure)
    {
        $data        = $this->CreateRequestObj($model, $panamaConfigure);
        $data_string = json_encode($data);

        $ch = curl_init($requestURL);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt(
            $ch,
            CURLOPT_HTTPHEADER,
            array(
                'Content-Type: application/json',
                'Content-Length: ' . strlen($data_string),
            )
        );
        curl_setopt($ch, CURLOPT_TIMEOUT, 100000);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 100000);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        //execute post
        $result = curl_exec($ch);

        curl_close($ch);
        $result = json_decode($result, true);
        return $result;
    }

    protected function CreateRequestObj($model, $panamaConfigure)
    {
        $RequestData = array(
            "SDKVersion"     => $panamaConfigure['version'],
            "Identification" => $panamaConfigure['merchantId'],
            "TerminalId"     => $panamaConfigure['TerminalId'],
            "DateTimeStamp"  => date("d/m/Y", time()),
            "RequestMessage" => json_encode($model),
        );
        return $RequestData;
    }

    //Generate HASH code for EMS payment gateway
    public function createEmsGatewayHash($chargetotal, $currency, $storename, $sharedSecret, $dateTime)
    {
        $stringToHash = $storename . $dateTime . $chargetotal . $currency . $sharedSecret;
        $ascii        = bin2hex($stringToHash);
        return hash('sha256', $ascii);
    }

    //CODE TO CALL CARDINAL API
    public function cardinalAPIRequest($accessUrl, $cardinalPostFields)
    {
        $ch = curl_init($accessUrl);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $cardinalPostFields);
        $post_response = curl_exec($ch);
        parse_str($post_response, $get_array);
        $info = curl_getinfo($ch);
        if (curl_errno($ch)) {
            curl_error($ch);
        } else {
            curl_close($ch);
        }
        return $get_array;
    }

    public function pageHideShowSetting($buttonType = array(), $data = array(), $page = '', $SiteData, $abc = '')
    {
        $GeneralService = $this->get(GeneralService::class);
        $em = $this->getDoctrine()->getManager();
        $brand_buttons        = $data['brand_buttons'];
        $brandHideShowButtons = json_decode($brand_buttons, true);
        if ($page == 'category') {
            $category_page_layout = $SiteData['category_listbox_style'];
        } else {
            $brand_page_layout = $SiteData['product_data_option'];
        }

        $ecommerceTypeData = array('taxSetting' => $SiteData['tax_setting']);
        $return_array      = array();
        foreach ($buttonType as $key => $btn) {
            $return_array[$btn] = 'No';
            switch ($btn) {
                case "showCart":
                    $return_array[$btn] = 'No';
                    $brandShowCart      = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowCart = $brandHideShowButtons['showCart'];
                    }
                    if ($SiteData['ecommerce'] == 'Yes') {
                        if (empty($brandShowCart)) {
                            $pageShowCart = ($page == 'category') ? $category_page_layout['category_show_addtocart'] : $brand_page_layout['show_icon']['addtocart'];
                            if ($pageShowCart == 'Yes') {
                                if ($SiteData['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        } else {
                            if ($brandShowCart == 'Yes') {
                                if ($SiteData['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        }
                    }
                    break;
                case "showWishlist":
                    $return_array[$btn] = 'No';
                    $brandShowWishlist  = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowWishlist = $brandHideShowButtons['showWishlist'];
                    }
                    if (empty($brandShowWishlist)) {
                        $pageShowWishlist = ($page == 'category') ? $category_page_layout['category_show_wishlist'] : $brand_page_layout['show_icon']['wishlist'];
                        if ($pageShowWishlist == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowWishlist == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showGiftRegistry":
                    $return_array[$btn]    = 'No';
                    $brandShowGiftRegistry = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowGiftRegistry = $brandHideShowButtons['showGiftRegistry'];
                    }
                    if ($SiteData['ecommerce'] == 'Yes') {
                        if (empty($brandShowGiftRegistry)) {
                            $pageShowGiftRegistry = ($page == 'category') ? $category_page_layout['category_show_gift_registry'] : $brand_page_layout['show_icon']['gift_registry'];
                            if ($pageShowGiftRegistry == 'Yes') {
                                if ($SiteData['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        } else {
                            if ($brandShowGiftRegistry == 'Yes') {
                                if ($SiteData['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        }
                    }
                    break;
                case "showInquiry":
                    $return_array[$btn] = 'No';
                    $brandShowInquiry   = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowInquiry = $brandHideShowButtons['showInquiry'];
                    }
                    if (empty($brandShowInquiry)) {
                        $pageShowInquiry = ($page == 'category') ? $category_page_layout['category_show_inquire'] : $brand_page_layout['show_icon']['inquiry'];
                        if ($pageShowInquiry == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowInquiry == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showPrice":
                    $return_array[$btn] = 'No';
                    $brandShowPrice     = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowPrice = $brandHideShowButtons['showPrice'];
                    }
                    if (empty($brandShowPrice)) {
                        $pageShowPrice = ($page == 'category') ? $category_page_layout['category_show_price'] : $brand_page_layout['show_price'];
                        if ($pageShowPrice == 'Yes') {
                            if ($SiteData['taxSettingEcommerce'] == '1') {
                                $return_array[$btn] = 'Yes';
                            }
                        }
                    } else {
                        if ($brandShowPrice == 'Yes') {
                            if ($SiteData['taxSettingEcommerce'] == '1') {
                                $return_array[$btn] = 'Yes';
                            }
                        }
                    }
                    break;
                case "showRatings":
                    $return_array[$btn] = 'No';
                    $brandShowRatings   = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowRatings = $brandHideShowButtons['showRatings'];
                    }
                    if (empty($brandShowRatings)) {
                        $pageShowRatings = ($page == 'category') ? $category_page_layout['category_show_ratings'] : $brand_page_layout['show_rating_star'];
                        if ($pageShowRatings == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowRatings == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showColorSwatches":
                    $return_array[$btn]     = 'No';
                    $brandShowColorSwatches = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowColorSwatches = $brandHideShowButtons['showColorSwatches'];
                    }
                    if (empty($brandShowColorSwatches)) {
                        $pageShowColorSwatches = ($page == 'category') ? $category_page_layout['category_show_color_swatches'] : $brand_page_layout['show_color_swatches'];
                        if ($pageShowColorSwatches == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowColorSwatches == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showInstallment":
                    $return_array[$btn]   = 'No';
                    $brandShowInstallment = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowInstallment = $brandHideShowButtons['showInstallment'];
                    }
                    if (empty($brandShowInstallment)) {
                        $pageShowInstallment = ($page == 'category') ? $category_page_layout['category_show_installment'] : $brand_page_layout['show_installment'];
                        if ($pageShowInstallment == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowInstallment == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showMsrp":
                    $return_array[$btn] = 'No';
                    $brandShowMsrp      = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowMsrp = $brandHideShowButtons['showMsrp'];
                    }
                    if (empty($brandShowMsrp)) {
                        $pageShowMsrp = ($page == 'category') ? $category_page_layout['category_show_msrp'] : $brand_page_layout['show_msrp'];
                        if ($pageShowMsrp == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowMsrp == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showMsrpPromotion":
                    $return_array[$btn] = 'No';
                    $brandShowMsrpPromotion      = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowMsrpPromotion = isset($brandHideShowButtons['showMsrpPromotion']) ? $brandHideShowButtons['showMsrpPromotion']: '';
                    }
                    if (empty($brandShowMsrpPromotion)) {
                        $pageShowMsrpPromotion = ($page == 'category') ? $category_page_layout['category_show_msrp_on_promotion'] : $brand_page_layout['show_msrp_on_promotion'];
                        if ($pageShowMsrpPromotion == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowMsrpPromotion == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showQuickView":
                    $return_array[$btn] = 'No';
                    $brandShowQuickView = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowQuickView = $brandHideShowButtons['showQuickView'];
                    }
                    if (empty($brandShowQuickView)) {
                        $pageShowQuickView = ($page == 'category') ? $category_page_layout['category_show_quickview'] : $brand_page_layout['show_color_swatches'];
                        if ($pageShowQuickView == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowQuickView == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showImageDownload":
                    $return_array[$btn]     = 'No';
                    $brandShowImageDownload = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowImageDownload = $brandHideShowButtons['showImageDownload'];
                    }
                    if (empty($brandShowImageDownload)) {
                        $pageShowImageDownload = ($page == 'category') ? $category_page_layout['category_show_download'] : $brand_page_layout['show_download'];
                        if ($pageShowImageDownload == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowImageDownload == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showSku":
                    $return_array[$btn] = 'No';
                    $brandShowSku       = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowSku = $brandHideShowButtons['showSku'];
                    }
                    if (empty($brandShowSku)) {
                        $pageShowSku = ($page == 'category') ? $category_page_layout['category_show_sku'] : $brand_page_layout['show_sku'];
                        if ($pageShowSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showAttribute":
                    $return_array[$btn] = 'No';
                    $brandShowSku       = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1 && isset($brandHideShowButtons['showAttribute'])) {
                        $brandShowSku = $brandHideShowButtons['showAttribute'];
                    }
                    if (empty($brandShowSku)) {
                        $pageShowSku = ($page == 'category') ? $category_page_layout['category_show_attribute'] : $brand_page_layout['show_attribute'];
                        if ($pageShowSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showBrand":
                    $return_array[$btn] = 'No';
                    $brandShowBrand     = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowBrand = $brandHideShowButtons['showBrand'];
                    }
                    if (empty($brandShowBrand)) {
                        $pageShowBrand = ($page == 'category') ? $category_page_layout['category_show_brand'] : $brand_page_layout['show_brand'];
                        if ($pageShowBrand == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowBrand == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showDimension":
                    $return_array[$btn] = 'No';
                    $brandShowDimension = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowDimension = $brandHideShowButtons['showDimension'];
                    }
                    if (empty($brandShowDimension)) {
                        $pageShowDimension = ($page == 'category') ? $category_page_layout['category_show_dimension'] : $brand_page_layout['show_dimention'];
                        if ($pageShowDimension == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowDimension == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showUpccode":
                    $return_array[$btn] = 'No';
                    $brandShowUpccode   = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowUpccode = $brandHideShowButtons['showUpccode'];
                    }
                    if (empty($brandShowUpccode)) {
                        $pageShowUpccode = ($page == 'category') ? $category_page_layout['category_show_upccode'] : $brand_page_layout['show_upccode'];
                        if ($pageShowUpccode == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowUpccode == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showManufacturerSku":
                    $return_array[$btn]       = 'No';
                    $brandShowManufacturerSku = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowManufacturerSku = $brandHideShowButtons['showManufacturerSku'];
                    }
                    if (empty($brandShowManufacturerSku)) {
                        $pageShowManufacturerSku = ($page == 'category') ? $category_page_layout['category_show_manufacturer_sku'] : $brand_page_layout['show_manufacturer_sku'];
                        if ($pageShowManufacturerSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowManufacturerSku == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showManufacturerName":
                    $return_array[$btn]        = 'No';
                    $brandShowManufacturerName = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowManufacturerName = $brandHideShowButtons['showManufacturerName'];
                    }
                    if (empty($brandShowManufacturerName)) {
                        $pageShowManufacturerName = ($page == 'category') ? $category_page_layout['category_show_manufacturer_name'] : $brand_page_layout['show_manufacturer_name'];
                        if ($pageShowManufacturerName == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowManufacturerName == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showManufacturerLogo":
                    $return_array[$btn]        = 'No';
                    $brandShowManufacturerLogo = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1) {
                        $brandShowManufacturerLogo = $brandHideShowButtons['showManufacturerLogo'];
                    }
                    if (empty($brandShowManufacturerLogo)) {
                        $pageShowManufacturerLogo = ($page == 'category') ? $category_page_layout['category_show_manufacturer_logo'] : $brand_page_layout['show_manufacturer_logo'];
                        if ($pageShowManufacturerLogo == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowManufacturerLogo == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showAttributeName":
                    $return_array[$btn]     = 'No';
                    $brandShowAttributeName = '';
                    if (!empty($data['button_setting']) && $data['button_setting'] == 1 && isset($brandHideShowButtons['showAttributeName'])) {
                        $brandShowAttributeName = $brandHideShowButtons['showAttributeName'];
                    }
                    if (empty($brandShowAttributeName)) {
                        $pageshowAttributeName = ($page == 'category') ? $category_page_layout['category_show_attribute'] : $brand_page_layout['show_attribute'];
                        if ($pageshowAttributeName == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    } else {
                        if ($brandShowAttributeName == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
            }
        }
        return $return_array;
    }

    public function pageHideShowButton($buttonType = array(), $data = array(), $page = '', $SiteSetting)
    {
        $GeneralService = $this->get(GeneralService::class);
        //$SiteSetting = $GeneralService->getStoreMainConfig();
        $em = $this->getDoctrine()->getManager();
        //$brandData = $em->getRepository(Brand::class)->findOneBy(array('id' => $data['brandId'], 'status' => 1, 'isDeleted' => 0));
        //if (!empty($brandData)) {
        $brand_buttons = $data['brand_buttons'];
        //$brandHideShowButtons = json_decode($brandData->getHideShowButtons(), true);
        $brandHideShowButtons = json_decode($brand_buttons, true);
        if ($page == 'category') {
            $category_page_layout = $data['category_page_layout']->listbox_style;
        } else {
            $brand_page_layout = $data['product_page_layout']->product_data_option;
        }
        $ecommerceTypeData = array('taxSetting' => json_decode($SiteSetting['taxSetting'], true));
        $return_array      = array();
        foreach ($buttonType as $key => $btn) {
            $return_array[$btn] = 'No';
            switch ($btn) {
                case "showCart":
                    $return_array[$btn] = 'No';
                    $brandShowCart      = $brandHideShowButtons['showCart'];
                    $pageShowCart       = ($page == 'category') ? $category_page_layout['category_show_addtocart'] : $brand_page_layout['show_icon']['addtocart'];
                    if ($SiteSetting['ecommerce'] == 'Yes') {
                        if ($brandShowCart == 'Yes') {
                            if ($pageShowCart == 'Yes') {
                                if ($SiteSetting['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        }
                    }
                    break;
                case "showWishlist":
                    $return_array[$btn] = 'No';
                    $brandShowWishlist  = $brandHideShowButtons['showWishlist'];
                    $pageShowWishlist   = ($page == 'category') ? $category_page_layout['category_show_wishlist'] : $brand_page_layout['show_icon']['wishlist'];
                    if ($brandShowWishlist == 'Yes') {
                        if ($pageShowWishlist == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showGiftRegistry":
                    $return_array[$btn]    = 'No';
                    $brandShowGiftRegistry = $brandHideShowButtons['showGiftRegistry'];
                    $pageShowGiftRegistry  = ($page == 'category') ? $category_page_layout['category_show_gift_registry'] : $brand_page_layout['show_icon']['gift_registry'];
                    if ($SiteSetting['ecommerce'] == 'Yes') {
                        if ($brandShowGiftRegistry == 'Yes') {
                            if ($pageShowGiftRegistry == 'Yes') {
                                if ($SiteSetting['taxSettingEcommerce'] == '1') {
                                    $return_array[$btn] = 'Yes';
                                }
                            }
                        }
                    }
                    break;
                case "showInquiry":
                    $return_array[$btn] = 'No';
                    $brandShowInquiry   = $brandHideShowButtons['showInquiry'];
                    $pageShowInquiry    = ($page == 'category') ? $category_page_layout['category_show_inquire'] : $brand_page_layout['show_icon']['inquiry'];
                    if ($brandShowInquiry == 'Yes') {
                        if ($pageShowInquiry == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showPrice":
                    $return_array[$btn] = 'No';
                    $brandShowPrice     = $brandHideShowButtons['showPrice'];
                    $pageShowPrice      = ($page == 'category') ? $category_page_layout['category_show_price'] : $brand_page_layout['show_price'];
                    if ($brandShowPrice == 'Yes') {
                        if ($pageShowPrice == 'Yes') {
                            if ($SiteSetting['taxSettingEcommerce'] == '1') {
                                $return_array[$btn] = 'Yes';
                            }
                        }
                    }
                    break;
                case "showRatings":
                    $return_array[$btn] = 'No';
                    $brandShowRatings   = $brandHideShowButtons['showRatings'];
                    $pageShowRatings    = $brand_page_layout->show_rating_star;
                    if ($brandShowRatings == 'Yes') {
                        if ($pageShowRatings == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showColorSwatches":
                    $return_array[$btn]     = 'No';
                    $brandShowColorSwatches = $brandHideShowButtons['showColorSwatches'];
                    $pageShowColorSwatches  = $brand_page_layout->show_color_swatches;
                    if ($brandShowColorSwatches == 'Yes') {
                        if ($pageShowColorSwatches == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
                case "showImageDownload":
                    $return_array[$btn]     = 'No';
                    $brandShowImageDownload = $brandHideShowButtons['showImageDownload'];
                    $pageShowImageDownload  = $brand_page_layout->show_image_download;
                    if ($brandShowImageDownload == 'Yes') {
                        if ($pageShowImageDownload == 'Yes') {
                            $return_array[$btn] = 'Yes';
                        }
                    }
                    break;
            }
        }
        return $return_array;
    }

    //Generate HASH code for MIGS/baiduri payment gateway
    public function generateSecureHash($secret, array $params)
    {
        $secureHash = "";
        // Sorting params first based on the keys
        ksort($params);

        foreach ($params as $key => $value) {
            // Check if key equals to vpc_SecureHash or vpc_SecureHashType to discard it
            if (in_array($key, array('vpc_SecureHash', 'vpc_SecureHashType'))) {
                continue;
            }

            // If key either starts with vpc_ or user_
            if (substr($key, 0, 4) === "vpc_" || substr($key, 0, 5) === "user_") {
                $secureHash .= $key . "=" . $value . "&";
            }
        }
        // Remove the last `&` character from string
        $secureHash = rtrim($secureHash, "&");
        return strtoupper(hash_hmac('SHA256', $secureHash, pack('H*', $secret)));
    }

    public function getOperatingSystemData($productId)
    {
        $data = array();
        $em   = $this->getDoctrine()->getManager();
        if (!empty($productId)) {
            $sql       = "SELECT * FROM product_operating_system WHERE product_id=$productId";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $os_id      = $statement->fetchAll()[0];
            $data['os'] = $os_id;
            if (!empty($os_id)) {
                $os_commaseperated_id = $os_id['operating_system_id'];
                $sql                  = "SELECT * FROM operating_system WHERE id  IN ($os_commaseperated_id)";
                $statement            = $em->getConnection()->prepare($sql);
                $statement->execute();
                $data['pos'] = $statement->fetchAll();
            }
        }
        return $data;
    }

    public function getSpecialityShapesData($productId)
    {
        $data = array();
        $em   = $this->getDoctrine()->getManager();
        if (!empty($productId)) {
            $sql       = "SELECT * FROM product_specialty_shape WHERE product_id=$productId";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $os_id      = $statement->fetchAll()[0];
            $data['os'] = $os_id;
            if (!empty($os_id)) {
                $os_commaseperated_id = $os_id['specialty_shape_id'];
                $sql                  = "SELECT * FROM specialty_shapes WHERE id  IN ($os_commaseperated_id)";
                $statement            = $em->getConnection()->prepare($sql);
                $statement->execute();
                $data['pos'] = $statement->fetchAll();
            }
        }
        return $data;
    }

    public function getManualData($productId)
    {
        $data = array();
        $em   = $this->getDoctrine()->getManager();
        if (!empty($productId)) {
            $sql       = "SELECT * FROM product_manual WHERE product_id=$productId";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $os_id      = $statement->fetchAll()[0];
            $data['os'] = $os_id;
            if (!empty($os_id)) {
                $os_commaseperated_id = $os_id['manual_id'];
                $sql                  = "SELECT * FROM manuals WHERE id  IN ($os_commaseperated_id)";
                $statement            = $em->getConnection()->prepare($sql);
                $statement->execute();
                $data['pos'] = $statement->fetchAll();
            }
        }
        return $data;
    }

    //Get Product Raw Item Data
    public function getProductRaWItemData($productRawItemId = '')
    {
        $data = array();
        $em   = $this->getDoctrine()->getManager();
        if (!empty($productRawItemId)) {
            $data = $em->getRepository('CatalogueBundle:ProductRawItem')->findBy(array('status' => 1, 'isDeleted' => 0, 'id' => $productRawItemId))[0];
        }
        return $data;
    }

    public function getFabricSliderView($productId)
    {
        $fabric_html = '';
        $data        = array();
        $em          = $this->getDoctrine()->getManager();
        $sql         = "SELECT * FROM product_fabric WHERE product_id=$productId";
        $statement   = $em->getConnection()->prepare($sql);
        $statement->execute();
        $os_id      = $statement->fetchAll()[0];
        $data['os'] = $os_id;
        if (!empty($os_id)) {
            $fabric_html = '<div class="side-bar"><div class="show_image"></div>';
            $sub_title   = $os_id['fabric_subtitle'];
            $fabric_html .= '<h1><strong>' . $sub_title . '</strong></h1>';
            $os_commaseperated_id = $os_id['fabric_id'];
            $sql                  = "SELECT * FROM fabrics WHERE id  IN ($os_commaseperated_id)";
            $statement            = $em->getConnection()->prepare($sql);
            $statement->execute();
            $data['pos'] = $statement->fetchAll();
        }
        return $data;
    }

    public function isCouponAllowedToSendCustomer($coupon_id, $customer_email = "")
    {
        $em            = $this->getDoctrine()->getManager();
        $strExtraWhere = "";
        if ($customer_email != "") {
            $strExtraWhere = " AND customer_email = '" . $customer_email . "' ";
        }
        //check if coupon has been used from "coupon_usage" table
        $sqlCouponUsage = "SELECT count(0) as cnt from coupon_usage where coupon_id = '" . $coupon_id . "' " . $strExtraWhere;
        $statement      = $em->getConnection()->prepare($sqlCouponUsage);
        $statement->execute();
        $rsCountCpUsage = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        //get coupon details
        $couponObj       = $em->getRepository('CatalogueBundle:Coupon')->findById($coupon_id)[0];
        $coupon_settings = json_decode($couponObj->getRestrictionSetting(), true);
        if ($coupon_settings['unlimited_usage'] == "Yes" || ($coupon_settings['no_of_usage'] > $rsCountCpUsage[0]['cnt'])) {
            return true;
        }
        return false;
    }

    public function getModuleIdAndName($isGetModuleIdOnly = false)
    {
        $AllRoot       = "";
        $UrlPath       = pathinfo($_SERVER['REQUEST_URI']);
        $AllRoot       = explode("/", $UrlPath['dirname']);
        $UrlBundle     = substr(strrchr($UrlPath['dirname'], "/"), 1);
        $UrlController = $UrlPath['basename'];
        if (!empty($AllRoot) && count($AllRoot) <= 2) {
            $ModId = $this->getModuleIdbySlug($UrlController);
            if (!empty($ModId)) {
                return $ModId . "||" . $UrlController;
                return ($isGetModuleIdOnly) ? $ModId : $ModId . "||" . $UrlController;
            }
        } elseif (!empty($AllRoot) && count($AllRoot) == 3) {
            $ModId = $this->getModuleIdbySlug($UrlBundle);
            if (!empty($ModId)) {
                return ($isGetModuleIdOnly) ? $ModId : $ModId . "||" . $UrlBundle;
            }
        } elseif (!empty($AllRoot) && count($AllRoot) >= 6) {
            if (!empty($AllRoot[2])) {
                $ModId = $this->getModuleIdbySlug($AllRoot[3]);
                if (!empty($ModId)) {
                    return ($isGetModuleIdOnly) ? $ModId : $ModId . "||" . $AllRoot[3];
                }
            }
        } elseif (!empty($AllRoot) && count($AllRoot) >= 5) {
            if (!empty($AllRoot[2])) {
                $ModId = $this->getModuleIdbySlug($AllRoot[3]);
                if (!empty($ModId)) {
                    return ($isGetModuleIdOnly) ? $ModId : $ModId . "||" . $AllRoot[3];
                }
            }
        } elseif (!empty($AllRoot) && count($AllRoot) >= 4) {
            if (!empty($AllRoot[2])) {
                $ModId = $this->getModuleIdbySlug($AllRoot[3]);
                if (!empty($ModId)) {
                    return ($isGetModuleIdOnly) ? $ModId : $ModId . "||" . $AllRoot[3];
                }
            }
        }
    }

    public function getModuleIdbySlug($Slug)
    {
        $result = "";
        if (!empty($Slug)) {
            $Sql       = "SELECT id FROM module WHERE slug = '$Slug' AND status = 1 AND is_deleted = 0";
            $em        = $this->getDoctrine()->getManager();
            $statement = $em->getConnection()->prepare($Sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result)) {
                $result = $result[0]['id'];
            } else {
                $result = 0;
            }
        }
        return $result;
    }

    public function getRequestConsultantFormHtml($widgetTypeData)
    {
        $html = '';
        if (!empty($widgetTypeData)) {
            $GeneralService = $this->get(GeneralService::class);
            //Get Store Main Configuration
            $baseUrl     = $GeneralService->getBaseUrl();
            $SiteSetting = $GeneralService->getStoreMainConfig();
            if (!empty($SiteSetting)) {
                $webmasterSetting = json_decode($SiteSetting['webmasterSetting']);
                $captcha_site_key = $webmasterSetting->google_captcha_publickkey;
                if (!empty($widgetTypeData['title'])) {
                    $html = '<strong>' . $widgetTypeData['title'] . '</strong><br />';
                }
                $request_consultant_text  = $this->get('translator')->trans('front_request_consultant');
                $front_photo_gallery_text = $this->get('translator')->trans('front_photo_gallery');
                $front_hd_fillchatcha     = $this->get('translator')->trans('front_hd_fillchatcha');
                $front_submit             = $this->get('translator')->trans('front_submit');
                $photos_url               = $baseUrl . 'photos';
                $logo_img                 = $baseUrl . 'assets/theme/hunterdouglas/images/footer-logo.png';
                //<a href="/photos" title="' . $front_photo_gallery_text . '"><img alt="Footer Logo" class="img-responsive" src="' . $logo_img . '" /></a><br />
                $html .= '<p>
                    <span class="c-title"><strong>' . $request_consultant_text . '</strong></span></p>
                    <form id="footer-request-a-consultation" name="footer-request-a-consultation">
                    <div class="form-row">
                    <div class="form-group col-md-6 "><input class="form-control" id="fc_firstname" name="consult_firstname" placeholder="' . $this->get('translator')->trans('front_login_regfname_placeholder') . '" type="text" /></div>
                    <div class="form-group col-md-6"><input class="form-control" id="fc_lastname" name="consult_lastname" placeholder="' . $this->get('translator')->trans('front_login_reglname_placeholder') . '" type="text" /></div>
                    </div>
                    <div class="form-row">
                    <div class="form-group col-md-12 "><input class="form-control" id="inputEmail4" name="consult_email" placeholder="' . $this->get('translator')->trans('front_login_regemail_placeholder') . '" type="email" /></div>
                    </div>
                    <div class="form-row">
                    <div class="form-group col-md-12 clearfix">';
                if (!empty($captcha_site_key)) {
                    if(property_exists($webmasterSetting,'google_captcha_version') && $webmasterSetting->google_captcha_version == 3){
                        $html .='<input type="hidden" id="g-recaptcha-response" name="g-recaptcha-response"><input type="hidden" name="action" value="validate_captcha">';
                    }else {
                        $html .= '<div class="g-recaptcha"  id="header_fc_captcha" data-sitekey="' . $captcha_site_key . '" data-callback="recaptcha_callback" >&nbsp;</div> <p class="captcha-error"> ' . $front_hd_fillchatcha . '</p> ';
                    }
                }
                $html .= '</div>
                    </div>
                    <div class="form-row">
                    <div class="form-group col-md-12 "><button class="btn btn-lg">' . $front_submit . '</button></div>
                    </div>
                    </form>';
            }
        }
        return $html;
    }

    public function applyFormShortCodeInContent($content)
    {
        preg_match_all('@\[([^<>&/\[\]\x00-\x20=]++)@', $content, $matches);
        $found_data = array();
        if (!empty($matches)) {
            if (!empty($matches[0])) {
                $found_matches = $matches[0];
                foreach ($found_matches as $code) {
                    $findme = '[FORM-SHORTCODE-';
                    $pos    = strpos($code, $findme);
                    if ($pos === false) {
                    } else {
                        $explode_data = explode('[FORM-SHORTCODE-', $code);
                        $id           = trim($explode_data[1]);
                        //if (is_numeric($id)) {
                            $short_code   = $code . ']';
                            $form_content = $this->getFormBuilderContentById($id);
                            if (!empty($form_content)) {
                                $found_data[$short_code] = $form_content;
                            }else{
                                $found_data[$short_code] = '';
                            }
                        //}
                    }
                }
            }
        }
        if (!empty($found_data)) {
            foreach ($found_data as $key => $val) {
                $content = str_replace($key, $val, $content);
            }
        }
        return $content;
    }

    public function getFormBuilderContentById($id)
    {
        $form_data       = "";
        $formfields      = array();
        $em              = $this->getDoctrine()->getManager();
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting     = $GeneralService->getStoreMainConfig();
        $langData        = $GeneralService->getFrontLangauageSession($SiteSetting);
        $defLangId = "";
        $frontLangId = "";
        if(!empty($langData)){
            $frontLangId = $langData['LangId'];
        }
        if(!empty($SiteSetting)){
            $defLangId = $SiteSetting['langId'];    
        }
        $LangCode        = $langData['LangCode'];
        $GeneralFunction = new GeneralFunctionController();
        $web = array();
        $show_field_title = true;
        $specific_value = "";
        if (!empty($id)) {
            $FormId           = $id;
            $form_obj         = $this->getDoctrine()->getRepository('ContentcmsBundle:Forms')->findOneBy(array('sortCode' => '[FORM-SHORTCODE-'.$FormId.']', 'status' => 1, 'isDeleted' => 0));
            if(!empty($form_obj)){
                $web['custom_js'] = $form_obj->getCustomJs();
                $web['form_bg_color'] = $form_obj->getFormBgColor();
                if($form_obj->getShowFieldTitle()){
                    $web['show_field_title'] = true;
                    $show_field_title = true;
                }else{
                    $web['show_field_title'] = false;
                    $show_field_title = false;
                }
                if (empty($web['custom_js'])) {
                    $web['custom_js'] = 'function chkvalidation() { return true; }';
                }

                $formfields = $this->getDoctrine()->getRepository('ContentcmsBundle:FormFields')->findBy(array('form' => $form_obj->getId(), 'status' => 1, 'isDeleted' => 0), array('sortOrder' => 'ASC', 'id' => 'ASC'));
                if(!empty($formfields)){
                    $notfields     = ['group', 'content', 'captcha', 'parent', 'groupin', 'blank', 'button', 'submit'];
                    $web['fields'] = array();
                    $tabindex      = 1;
                    foreach ($formfields as $fld) {
                        $specific_value = "";
                        $field_name = $fld->getFieldAlias() != '' ? $fld->getFieldAlias() : $fld->getField()->getFieldName();
                        $field_type = $fld->getField()->getFieldType();
                        $specific_value = $fld->getSpecificValue();
                        if (in_array($field_type, $notfields)) {
                            $field_name = $field_name . '_' . $fld->getId();
                        }
                        if (!empty($fld->getFieldTitleI18n())) {
                            $FieldTitle = json_decode($fld->getFieldTitleI18n(), true);
                            if (!empty($FieldTitle[$LangCode])) {
                                $web['fields'][$field_name]['caption'] = $FieldTitle[$LangCode];
                            } else {
                                $web['fields'][$field_name]['caption'] = $fld->getFieldTitle() != '' ? $fld->getFieldTitle() : $fld->getField()->getFieldTitle();
                            }
                        } else {
                            $web['fields'][$field_name]['caption'] = $fld->getFieldTitle() != '' ? $fld->getFieldTitle() : $fld->getField()->getFieldTitle();
                        }
                        //$web['fields'][$field_name]['caption'] = $fld->getFieldTitle() != '' ? $fld->getFieldTitle() : $fld->getField()->getFieldTitle();
                        if ($field_type == 'blank') {
                            $web['fields'][$field_name]['caption'] = '&nbsp;';
                        }
                        $web['fields'][$field_name]['field_name'] = $fld->getField()->getFieldName();
                        if (!empty($fld->getPlaceholderTitleI18n())) {
                            $FieldPlaceHold = json_decode($fld->getPlaceholderTitleI18n(), true);
                            if (!empty($FieldPlaceHold[$LangCode])) {
                                $web['fields'][$field_name]['placeholder'] = $FieldPlaceHold[$LangCode];
                            } else {
                                $web['fields'][$field_name]['placeholder'] = ($fld->getPlaceholderTitle()) ? $fld->getPlaceholderTitle() : $fld->getField()->getPlaceholderTitle();
                            }
                        } else {
                            $web['fields'][$field_name]['placeholder'] = ($fld->getPlaceholderTitle()) ? $fld->getPlaceholderTitle() : $fld->getField()->getPlaceholderTitle();
                        }
                        if(!empty($fld->getboundTo())){
                            $FieldboundTo = $fld->getboundTo();                            
                            if (!empty($FieldboundTo[$LangCode])) {
                                $web['fields'][$field_name]['boundto'] = $FieldboundTo;
                            } else {                                
                                $web['fields'][$field_name]['boundto'] = $FieldboundTo;
                            }
                        } else {

                            $web['fields'][$field_name]['boundto'] = "";
                             }
                        if(!empty($fld->getgroupId())){
                            $formgrpData = $this->getDoctrine()->getRepository('ContentcmsBundle:FormGroups')->findBy(array('id' => $fld->getgroupId()));                                                 
                            if (!empty($formgrpData && $formgrpData[0]->getName() == "From Group")) {
                                $web['fields'][$field_name]['groupId'] = $formgrpData[0]->getId();
                                $web['fields'][$field_name]['groupName'] = "from";
                            } else {                                
                                $web['fields'][$field_name]['groupId'] = $formgrpData[0]->getId();
                                $web['fields'][$field_name]['groupName'] = "to";
                            }
                        } else {

                            $web['fields'][$field_name]['groupId'] = "";
                            $web['fields'][$field_name]['groupName'] = "";
                        }     
                        //$web['fields'][$field_name]['placeholder'] = ($fld->getPlaceholderTitle()) ? $fld->getPlaceholderTitle() : $fld->getField()->getPlaceholderTitle();
                        $web['fields'][$field_name]['type']      = $field_type;
                        $web['fields'][$field_name]['maxlength'] = $fld->getField()->getFieldLength();
                        $web['fields'][$field_name]['required']  = $fld->getRequired() != '' ? $fld->getRequired() : $fld->getField()->getRequired();
                        $web['fields'][$field_name]['value']     = $fld->getField()->getDefaultValue();
                        $web['fields'][$field_name]['tabindex']  = $tabindex;
                        $web['fields'][$field_name]['col']       = $fld->getFieldColWidth();
                        $web['fields'][$field_name]['userfunc']  = ($fld->getUserFunc()) ? $fld->getUserFunc() : $fld->getField()->getUserFunc();
                        $web['fields'][$field_name]['content']   = $fld->getContentText();
                        $web['fields'][$field_name]['single']    = $fld->getField()->getSingleInput();
                        $web['fields'][$field_name]['show_field_title'] = $show_field_title;
                        // for testing data
                        $web['fields'][$field_name]['value'] = $fld->getTestData();
                        $getsource                           = $fld->getField()->getSource();
                        if (!empty($getsource)) {
                            $web['fields'][$field_name]['source'] = json_decode($getsource, true);
                            if (preg_match('/year/', $getsource)) {
                                foreach ($web['fields'][$field_name]['source'] as $k => $v) {
                                    $ary    = explode('+', $k);
                                    $from   = date('Y');
                                    $to     = $from + (isset($ary[1]) ? $ary[1] : 10) * 1;
                                    $source = [];
                                    for ($y = $from; $y <= $to; $y++) {
                                        $source[$y] = $y;
                                    }

                                    $web['fields'][$field_name]['source'] = $source;
                                }
                            }
                            $newsource = [];
                            foreach ($web['fields'][$field_name]['source'] as $k => $v) {
                                $eval = '';
                                preg_match('/##(.*?)##/', $v, $tmp);
                                if (isset($tmp[1])) {
                                    $eval = eval('return ' . $tmp[1] . ';');
                                }

                                $k             = str_replace(@$tmp[0], $eval, $k);
                                $v             = str_replace(@$tmp[0], $eval, $v);
                                $newsource[$k] = $v;
                            }
                            $web['fields'][$field_name]['source'] = $newsource;
                        }
                        if (!empty($fld->getField()->getTableName()) && $fld->getField()->getFieldName() != 'state' && $fld->getField()->getFieldName() != 'city') {
                            $PrimaryField = $fld->getField()->getPrimaryField();
                            $DisplayField = $fld->getField()->getDisplayFields();
                            $TableNameAry = explode(',', $fld->getField()->getTableName());
                            $condition    = ' WHERE is_deleted = ? AND status = ? ';
                            $TableName    = $TableNameAry[0];
                            if (isset($TableNameAry[1])) {
                                $condition .= $TableNameAry[1];
                            }
                            if(!empty($specific_value)){
                                $condition .= ' AND id IN ('.$specific_value.')';    
                            }
                            if (isset($TableNameAry[2])) {
                                $orderBy = $TableNameAry[2];
                            } else {
                                $orderBy = $DisplayField . ' ASC';
                            }
                            $prdSql    = "SELECT " . $PrimaryField . ", " . $DisplayField . " FROM " . $TableName . $condition . " ORDER BY " . $orderBy;
                            $statement = $em->getConnection()->prepare($prdSql);
                            $statement->execute([0, 1]);
                            $SourceData = $statement->fetchAll();
                            $source     = [];
                            foreach ($SourceData as $sd) {
                                $source[$sd[$PrimaryField]] = $sd[$DisplayField];
                            }
                            $web['fields'][$field_name]['source'] = $source;
                        }
                        if($field_type == 'select' && $field_name == 'questionnaire'){
                            $QuestionData  = $this->getQuestionsListByLang($frontLangId, $defLangId, $specific_value);
                            foreach ($QuestionData as $sd) {
                                $source[$sd['id']] = $sd['questions'];
                            }
                            $web['fields'][$field_name]['source'] = $source;
                        }
                        if ($field_type == 'captcha') {
                            $SiteSetting = json_decode($GeneralService->getStoreMainConfig()['webmasterSetting'], true);
                            $web['fields'][$field_name]['captcha_site_key'] = "";
                            $web['fields'][$field_name]['captcha_version'] = "2";
                            if (!empty($SiteSetting['google_captcha_publickkey']) && !empty($SiteSetting['google_captcha_secretkey'])) {
                                $web['fields'][$field_name]['captcha_site_key'] = $SiteSetting['google_captcha_publickkey'];
                                $web['fields'][$field_name]['captcha_version'] = $SiteSetting['google_captcha_version'];
                            }
                        }
                        $tabindex++;
                    }
                    //echo "<pre>";print_r($web);exit;
                    $web['shortcode'] = $GeneralFunction->encryptString($id);
                    $is_submit_button = array_search('submit', array_column($web['fields'], 'type'));
                    $is_submit = 'N';
                    if($is_submit_button === 0 || $is_submit_button){
                        $is_submit = 'Y';
                    }
                    $Usertype_data =   $em->createQueryBuilder()
                    ->select('ut')
                    ->from('DealersBundle:UserType', 'ut')                               
                    ->where('ut.isDeleted = 0 AND ut.status = 1 AND ut.dealerOnfront = 1')
                    ->getQuery()
                    ->getScalarResult();                        
                    $form_data = $this->renderView('formshortcode.html.twig', array('usertypedata'=>$Usertype_data ,'web' => $web,'is_search'=> $is_submit));
                }
            }
            //}
            return $form_data;
        }
    }

    public function ShowTableFormatJsonData($jsonData, $created_date)
    {
        $decode_json_data = json_decode($jsonData, true);
        $data             = '';
        $data             = '<table class="table table-striped table-bordered ">';
        foreach ($decode_json_data as $key => $value) {
            if (strpos($key, 'hdn_form_id') === false) {
                $key_data = $this->removeUnderScores($key);
                $data .= '<tr><td style="text-align: left">' . $key_data . '</td><td>' . $value . '</td></tr>';
            }
        }
        $created_date = date('m/d/Y H:i:s', strtotime($created_date));
        $created_at   = 'Submitted Date';
        $data .= '<tr><td width="25%" style="text-align: left">' . $created_at . '</td><td  width="75%">' . $created_date . '</td></tr>';
        $data .= '</table>';
        return $data;
    }

    public function removeUnderScores($val)
    {
        $val = str_replace("_", " ", strtoupper($val));
        return $val;
    }

    public function getEmailFromFormPostData($data_array)
    {
        $email = '';
        if (!empty($data_array)) {
            foreach ($data_array as $key => $val) {
                if (strpos($key, 'mail') === false) {
                } else {
                    $email = $val;
                    break;
                }
            }
        }
        return $email;
    }

    public function getBrandShowPriceFlag($content)
    {
        $flag = false;
        if (!empty($content)) {
            $data = json_decode($content, true);
            if ($data['showPrice'] == 'Yes') {
                $flag = true;
            }
        }
        return $flag;
    }

    public function getMarkingonProduct($productId = "", $page = "", $SiteData, $isInstallment = '')
    {
        $GeneralService = $this->get(GeneralService::class);
        $MyFrontService = $this->get(MyFrontService::class);
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];
        $html           = '';
        $checkDate      = array();
        $rbnDetail      = array();
        $em             = $this->getDoctrine()->getManager();
        $markingData    = array();
        if (!empty($productId)) {
            $cookieLangCode = isset($_COOKIE['front-site-language'])?$_COOKIE['front-site-language']:'en';
            $langCode = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(array('code' => $cookieLangCode, 'status' => 1, 'isDeleted' => 0));
            $lncode = $langCode->getId();           
            $ProductPromotion =$MyFrontService->getProductPromotion($productId,$lncode);
            $promotopleft   = $promotopcenter   = $promotopright   = $promobottomleft   = $promobottomcenter   = $promobottomright   = $newtopleft   = $newtopcenter   = $newtopright   = $newbottomleft   = $newbottomcenter   = $newbottomright   = 0;
            $rbnDetail = array();
            if (!empty($ProductPromotion)) {
                foreach($ProductPromotion as $promotion){
                    $data = array();
                    $type = ($promotion['marking_image'] != null && $promotion['marking_ribbon_details'] == null) ? 'marking' : 'ribbon';
                    $ribbonDisPosCnt = $GeneralService->getCountProductRibbon($productId, $SiteData['commonVariable']['LangId'], $promotion['display_position']);
                    //Top property set for Ribbon & Marking
                    switch ($promotion['display_position']) {
                        case "promotopleft":
                            $promotopleft    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopleft, $promotopleft, $isInstallment);
                            $newtopleft = 1;
                            break;
                        case "promotopcenter":
                            $promotopcenter    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopcenter, $promotopcenter);
                            $newtopcenter = 1;
                            break;
                        case "promotopright":
                            $promotopright    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopright, $promotopright);
                            $newtopright = 1;
                            break;
                        case "promobottomleft":
                            $promobottomleft    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomleft, $promobottomleft);
                            $newbottomleft = 1;
                            break;
                        case "promobottomcenter":
                            $promobottomcenter    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomcenter, $promobottomcenter);
                            $newbottomcenter = 1;
                            break;
                        case "promobottomright":
                            $promobottomright    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomright, $promobottomright);
                            $newbottomright = 1;
                            break;
                    }
                    if ($type == "ribbon") {
                        $rbnDetail = json_decode($promotion['marking_ribbon_details'], true);
                        $sql_module = "SELECT module_setting,method_name FROM module_setting WHERE status='1' AND is_deleted='0' AND method_name='PROFIT Systems SIM'";
                        $statement = $em->getConnection()->prepare($sql_module);
                        $statement->execute();
                        $moduleSetting = $statement->fetchAll();
                        if($moduleSetting) {
                            foreach ($moduleSetting as $value) {
                                $mod = json_decode($value['module_setting']);
                            }
                            $sql_location = "SELECT name,address,city,state,zipcode,contact FROM warehouse WHERE status='1' AND is_deleted='0' AND id='" . $mod->location[0] . "' OR id='" . $mod->location[1] . "' OR id='" . $mod->location[2] . "' OR id='" . $mod->location[3] . "' OR id='" . $mod->location[4] . "' OR id='" . $mod->location[5] . "'";
                            $statement = $em->getConnection()->prepare($sql_location);
                            $statement->execute();
                            $Location = $statement->fetchAll();
                            // print_r($Location); exit();
                            $locationone = $Location[0];
                            $locationtwo = $Location[1];
                            $locationthree = $Location[2];
                            $locationfour = $Location[3];
                            $locationfive = $Location[4];
                            $locationsix = $Location[5];
                            $sql_floorlocation = "SELECT name,address,city,state,zipcode,contact FROM warehouse WHERE status='1' AND is_deleted='0' AND id='" . $mod->floor_display_location[0] . "' OR id='" . $mod->floor_display_location[1] . "' OR id='" . $mod->floor_display_location[2] . "' OR id='" . $mod->floor_display_location[3] . "' OR id='" . $mod->floor_display_location[4] . "' OR id='" . $mod->floor_display_location[5] . "'";
                            $statement = $em->getConnection()->prepare($sql_floorlocation);
                            $statement->execute();
                            $floorLocation = $statement->fetchAll();
                            // print_r($floorLocation); exit();
                            $floorone = $floorLocation[0];
                            $floortwo = $floorLocation[1];
                            $floorthree = $floorLocation[2];
                            $floorfour = $floorLocation[3];
                            $floorfive = $floorLocation[4];
                            $floorsix = $floorLocation[5];
                            $statenameone = '';
                            if (is_numeric($floorone['state'])) {
                                $statenameone = $this->getStateNameById($floorone['state']);
                            } else {
                                $statenameone = $floorone['state'];
                            }
                            if (is_numeric($floortwo['state'])) {
                                $statenametwo = $this->getStateNameById($floortwo['state']);
                            } else {
                                $statenametwo = $floortwo['state'];
                            }
                            if (is_numeric($floorthree['state'])) {
                                $statenamethree = $this->getStateNameById($floorthree['state']);
                            } else {
                                $statenamethree = $floorthree['state'];
                            }
                            if (is_numeric($floorfour['state'])) {
                                $statenamefour = $this->getStateNameById($floorfour['state']);
                            } else {
                                $statenamefour = $floorfour['state'];
                            }
                        }
                        $SiteSetting     = $GeneralService->getStoreMainConfig();
                        $widget_data = $this->getWidgetHtml($SiteSetting, '17,18,19,20,21,22,23,24,25,26,27,28,29,32,44,45,48,52,53', 0);

                        $LayoutSetting['headercolumnone'] = '';
                        if (!empty($widget_data['headercolumnone']['html'])) {
                            $LayoutSetting['headercolumnone'] = $widget_data['headercolumnone']['html'];
                        }

                        $LayoutSetting['headercolumntwo'] = '';
                        if (!empty($widget_data['headercolumntwo']['html'])) {
                            $LayoutSetting['headercolumntwo'] = $widget_data['headercolumntwo']['html'];
                        }

                        $LayoutSetting['headercolumnthree'] = '';
                        if (!empty($widget_data['headercolumnthree']['html'])) {
                            $LayoutSetting['headercolumnthree'] = $widget_data['headercolumnthree']['html'];
                        }

                        $LayoutSetting['headercolumnfour'] = '';
                        if (!empty($widget_data['headercolumnfour']['html'])) {
                            $LayoutSetting['headercolumnfour'] = $widget_data['headercolumnfour']['html'];
                        }
                        /* This query is only get location details for all the website which are not define in front end header location detail */
                        $sql_warehouse = "SELECT w.name,w.address,w.city,w.state,w.zipcode,w.contact,s.state_name FROM warehouse w LEFT JOIN state s ON w.state=s.id WHERE w.status=1 AND w.is_deleted=0 AND w.show_in_front=1 AND s.status=1 AND s.is_deleted=0";
                        $statement = $em->getConnection()->prepare($sql_warehouse);
                        $statement->execute();
                        $warehouseLocation = $statement->fetchAll();
                        // print_r($warehouseLocation); exit();
                    }
                    array_push($markingData, $promotion);
                    $showprm = 0;
                    if (!empty($promotion)) {
                        switch ($promotion['promotion_show_on']) {
                            case "dealer_only":
                                $session = new Session();
                                if (!empty($session->get('userTypeId')) && !empty($session->get('userTypeSlug')) && $session->get('userTypeSlug') == 'dealer') {
                                    $showprm = 1;
                                }
                                break;
                            case "customer_only":
                                $session = new Session();
                                if (!empty($session->get('userTypeId')) && $session->get('userTypeId') > 0) {
                                    $showprm = 0;
                                } else {
                                    $showprm = 1;
                                }
                                break;
                            default:
                                $showprm = 1;
                        }
                    }
                    $data     = array('markingData' => $promotion, 'page' => $page, 'promotopleft' => $promotopleft, 'promotopcenter' => $promotopcenter, 'promotopright' => $promotopright, 'promobottomleft' => $promobottomleft, 'promobottomcenter' => $promobottomcenter, 'promobottomright' => $promobottomright, 'rbnDetail' => $rbnDetail, 'markingDisplayPosition' => $promotion['display_position'], 'floorLocation' => $floorLocation, 'one' => $LayoutSetting['headercolumnone'], 'two' => $LayoutSetting['headercolumntwo'], 'three' => $LayoutSetting['headercolumnthree'], 'four' => $LayoutSetting['headercolumnfour'], 'floorone' => $floorone['name'], 'floortwo' => $floortwo['name'], 'floorthree' => $floorthree['name'], 'floorfour' => $floorfour['name'], 'floorfive' => $floorfive['name'], 'floorsix' => $floorsix['name'], 'flooraddressone' => $floorone['address'], 'floorcityone' => $floorone['city'], 'floorstateone' => $statenameone, 'floorzipcodeone' => $floorone['zipcode'], 'floorcontactone' => $floorone['contact'], 'flooraddresstwo' => $floortwo['address'], 'floorcitytwo' => $floortwo['city'], 'floorstatetwo' => $statenametwo, 'floorzipcodetwo' => $floortwo['zipcode'], 'floorcontacttwo' => $floortwo['contact'], 'flooraddressthree' => $floorthree['address'], 'floorcitythree' => $floorthree['city'], 'floorstatethree' => $statenamethree, 'floorzipcodethree' => $floorthree['zipcode'], 'floorcontactthree' => $floorthree['contact'], 'flooraddressfour' => $floorfour['address'], 'floorcityfour' => $floorfour['city'], 'floorstatefour' => $statenamefour, 'floorzipcodefour' => $floorfour['zipcode'], 'floorcontactfour' => $floorfour['contact'], 'locationone' => $locationone['name'], 'locationtwo' => $locationtwo['name'], 'locationthree' => $locationthree['name'], 'locationfour' => $locationfour['name'], 'locationfive' => $locationfive['name'], 'locationsix' => $locationsix['name'], 'nameone' => $warehouseLocation[0]['name'], 'addone' => $warehouseLocation[0]['address'], 'cityone' => $warehouseLocation[0]['city'], 'stateone' => $warehouseLocation[0]['state_name'], 'zipone' => $warehouseLocation[0]['zipcode'], 'contactone' => $warehouseLocation[0]['contact'], 'nametwo' => $warehouseLocation[1]['name'], 'addtwo' => $warehouseLocation[1]['address'], 'citytwo' => $warehouseLocation[1]['city'], 'statetwo' => $warehouseLocation[1]['state_name'], 'ziptwo' => $warehouseLocation[1]['zipcode'], 'contacttwo' => $warehouseLocation[1]['contact'], 'namethree' => $warehouseLocation[2]['name'], 'addthree' => $warehouseLocation[2]['address'], 'citythree' => $warehouseLocation[2]['city'], 'statethree' => $warehouseLocation[2]['state_name'], 'zipthree' => $warehouseLocation[2]['zipcode'], 'contactthree' => $warehouseLocation[2]['contact'], 'namefour' => $warehouseLocation[3]['name'], 'addfour' => $warehouseLocation[3]['address'], 'cityfour' => $warehouseLocation[3]['city'], 'statefour' => $warehouseLocation[3]['state_name'], 'zipfour' => $warehouseLocation[3]['zipcode'], 'contactfour' => $warehouseLocation[3]['contact'], 'inStock' => $mod->promotion_in_stock);
                    $Template = 'CatalogueBundle:' . $themename . ':product/' . $type . 'product.html.twig';
                    if (!$this->get('templating')->exists($Template)) {
                        $Template = 'CatalogueBundle:default:product/' . $type . 'product.html.twig';
                    }
                    if ($showprm > 0) {
                        $html .= $this->renderView($Template, $data);
                    } else {
                        $html .= '';
                    }
                }
            }
        }
        $return_array         = array();
        $return_array['data'] = $markingData;
        $return_array['html'] = $html;
        return $return_array;
    }

    public function getMarkingonProductOld($productId = "", $page = "", $SiteData, $isInstallment = '')
    {
        $GeneralService = $this->get(GeneralService::class);
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];
        $fetchAttId     = "";
        $html           = '';
        $checkDate      = array();
        $rbnDetail      = array();
        $em             = $this->getDoctrine()->getManager();
        $markingData    = array();
        if (!empty($productId)) {
            $field_data                   = 'pm.id as product_marking_id,pm.startDate as start_date,pm.endDate as end_date,pm.showalways,m.id as marking_id,m.name as marking_name,m.markingCode as marking_code,m.description as marking_description,m.image as marking_image,m.ribbonDetails as marking_ribbon_details,m.displayPosition as display_position,m.promotionShowOn as promotion_show_on';
            $join_array                   = array();
            $condition_array              = array('pm.isDeleted' => 0, 'pm.status' => 1, 'pm.product' => $productId, 'm.status' => 1, 'm.isDeleted'=>0);
            $operator_array               = array();
            
            $join_array[0]['type']        = '';
            $join_array[0]['join_from']   = 'pm.marking';
            $join_array[0]['join_to']     = 'm.id';
            $join_array[0]['join_allies'] = 'm';
            $join_array[0]['join_class']  = 'CatalogueBundle:Marking';
            
            $groupby                      = '';
            $fetchAttId                   = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:ProductMarking", $allies = 'pm', $condition_array, $operator_array, $field_data, $groupby, $sortby = 'pm.showalways', $orderby = 'ASC', $limit = 1, $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
            
            $topleft   = $topcenter   = $topright   = $bottomleft   = $bottomcenter   = $bottomright   = $newtopleft   = $newtopcenter   = $newtopright   = $newbottomleft   = $newbottomcenter   = $newbottomright   = 0;
            $rbnDetail = array();
            if (!empty($fetchAttId)) {
                foreach ($fetchAttId as $fetch) {
                    $data = array();
                    if ($fetch['start_date'] && $fetch['end_date']) {
                        $checkDate['from_date'] = $fetch['start_date']->format('Y-m-d H:i:s');
                        $checkDate['to_date']   = $fetch['end_date']->format('Y-m-d H:i:s');
                    }
                    $checkDate['always_show'] = $fetch['showalways'];
                    $checkData                = $this->isShowWidgets($checkDate);
                    if ($checkData) {
                        $type = ($fetch['marking_image'] != null && $fetch['marking_ribbon_details'] == null) ? 'marking' : 'ribbon';
                        $ribbonDisPosCnt = $GeneralService->getCountProductRibbon($productId, $SiteData['commonVariable']['LangId'], $fetch['display_position']);
                        //Top property set for Ribbon & Marking
                        switch ($fetch['display_position']) {
                            case "topleft":
                                $topleft    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopleft, $topleft, $isInstallment);
                                $newtopleft = 1;
                                break;
                            case "topcenter":
                                $topcenter    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopcenter, $topcenter);
                                $newtopcenter = 1;
                                break;
                            case "topright":
                                $topright    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newtopright, $topright);
                                $newtopright = 1;
                                break;
                            case "bottomleft":
                                $bottomleft    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomleft, $bottomleft);
                                $newbottomleft = 1;
                                break;
                            case "bottomcenter":
                                $bottomcenter    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomcenter, $bottomcenter);
                                $newbottomcenter = 1;
                                break;
                            case "bottomright":
                                $bottomright    = $this->ribbonDisplayPosition($ribbonDisPosCnt, $newbottomright, $bottomright);
                                $newbottomright = 1;
                                break;
                        }
                        if ($type == "ribbon") {
                            $rbnDetail = json_decode($fetch['marking_ribbon_details'], true);
                        }
                        array_push($markingData, $fetch);
                        $showprm = 0;
                        if (!empty($fetch)) {
                            switch ($fetch['promotion_show_on']) {
                                case "dealer_only":
                                    $session = new Session();
                                    if (!empty($session->get('userTypeId')) && !empty($session->get('userTypeSlug')) && $session->get('userTypeSlug') == 'dealer') {
                                        $showprm = 1;
                                    }
                                    break;
                                case "customer_only":
                                    $session = new Session();
                                    if (!empty($session->get('userTypeId')) && $session->get('userTypeId') > 0) {
                                        $showprm = 0;
                                    } else {
                                        $showprm = 1;
                                    }
                                    break;
                                default:
                                    $showprm = 1;
                            }
                        }
                        $data     = array('markingData' => $fetch, 'page' => $page, 'topleft' => $topleft, 'topcenter' => $topcenter, 'topright' => $topright, 'bottomleft' => $bottomleft, 'bottomcenter' => $bottomcenter, 'bottomright' => $bottomright, 'rbnDetail' => $rbnDetail, 'markingDisplayPosition' => $fetch['display_position']);
                        $Template = 'CatalogueBundle:' . $themename . ':product/' . $type . 'product.html.twig';
                        if (!$this->get('templating')->exists($Template)) {
                            $Template = 'CatalogueBundle:default:product/' . $type . 'product.html.twig';
                        }
                        if ($showprm > 0) {
                            $html .= $this->renderView($Template, $data);
                        } else {
                            $html .= '';
                        }
                    }
                }
            }
        }
        $return_array         = array();
        $return_array['data'] = $markingData;
        $return_array['html'] = $html;
        return $return_array;
    }

    public function ribbonDisplayPosition($ribbonDisPosCnt = '', $new = 0, $position = 0, $isInstallment = 0)
    {
        if ($ribbonDisPosCnt >= 1) {
            if ($new == 0) {
                $position = 0;
                if ($isInstallment == 1) {
                    $position = $position + 40;
                }
            } else {
                $position = $position + 40;
            }
        }
        return $position;
    }

    public function getEcircularFormHtml($widgetTypeData)
    {
        $html = '';
        $em   = $this->getDoctrine()->getManager();
        if (!empty($widgetTypeData)) {
            $datetime       = new \DateTime('now');
            $GeneralService = $this->get(GeneralService::class);            
            //Get Store Main Configuration
            $SiteSetting = $GeneralService->getStoreMainConfig();
            $BaseUrl     = $GeneralService->getBaseUrl();
            $today_date  = $datetime->format('Y-m-d H:i:s');
            //$sql         = "SELECT * FROM ecircular WHERE show_always=0 AND is_deleted=0 AND status=1 AND (valid_from IS NOT NULL AND valid_to IS NOT NULL AND ( '" . $today_date . "' >= valid_from AND '" . $today_date . "' <= valid_to))";
            $session = new Session();
            $lang_ref_id = $session->get('front_lang_ref_id');
            $sql = "SELECT e.id,el.name,e.thumbnail FROM ecircular AS e "
                    . " JOIN ecircular_lang AS el ON el.ecircular_ref_id = e.uu_id "
                    . " WHERE e.show_always=0 AND e.is_deleted=0 AND e.status=1 "
                    . " AND el.lang_ref_id = '$lang_ref_id' "
                    . " AND (valid_from IS NOT NULL AND valid_to IS NOT NULL "
                    . " AND ( '" . $today_date . "' >= valid_from AND '" . $today_date . "' <= valid_to))";
            $statement   = $em->getConnection()->prepare($sql);
            $statement->execute();
            $data      = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $image_url = $BaseUrl . 'assets/uploads/ecircular/thumb/';
            if (!empty($data)) {
                if (!empty($widgetTypeData['title'])) {
                    $html = '<strong>' . $widgetTypeData['title'] . '</strong><br />';
                }
                $html .= '<ul>';
                foreach ($data as $value) {
                    $image_url_link      = $image_url . $value['thumbnail'];
                    $show_ecircular_link = $BaseUrl . 'ecircular/show/id/' . $value['id'];
                    $ecircularId         = $value['id'];
                    $title               = $value['name'];
                    $html .= '<li><a href="' . $show_ecircular_link . '" target="_blank"><img style="padding:2px;width:100px;height:100px;" src="' . $image_url_link . '" title="' . $title . '"></a></li>';
                }
                $html .= '</ul>';
            }
        }
        return $html;
    }

    public function getEcircularList()
    {
        //$datetime   = new \DateTimeStamp('now');
        //$today_date = $datetime->format('Y-m-d H:i:00');
        $datetime       = new \DateTime('now');
        $today_date = $datetime->format('Y-m-d H:i:s');        
        $em         = $this->getDoctrine()->getManager();
        $result     = array();
        /* Make Ecircular Enabled */
        //$sql       = "SELECT id,name,valid_from,valid_to FROM ecircular WHERE is_deleted=0 AND status=1 AND (('" . $today_date . "' <= valid_to) OR show_always=1 )";
        $GeneralService = $this->get(GeneralService::class); 
        $lang_ref_id = $GeneralService->getDefaultLangRefId();
        $sql = "SELECT e.id,el.name,e.valid_from,e.valid_to FROM ecircular AS e "
                . " JOIN ecircular_lang AS el ON el.ecircular_ref_id = e.uu_id "
                . " WHERE e.is_deleted=0 AND e.status=1 "
                . " AND el.lang_ref_id = '$lang_ref_id' "
                . " AND (('" . $today_date . "' <= valid_to) OR show_always=1 )";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($data)) {
            $result = $data;
        }
        return $result;
    }

    //CODE TO CALL EAZZY API
    public function eazzyAPIRequest($eazzyPostFields, $consumerKey, $secretKey)
    {
        $returnArr     = array();
        $curl_eazzyurl = "https://api-test.equitybankgroup.com/identity-uat/v1/token";
        $url_param     = http_build_query($eazzyPostFields);
        $ch            = curl_init($curl_eazzyurl);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $url_param);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/x-www-form-urlencoded',
            'authorization: Basic ' . base64_encode("$consumerKey:$secretKey"), 'cache-control: no-cache',
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        $result = curl_exec($ch);
        curl_error($ch);
        $returnArr = json_decode($result, true);
        return $returnArr;
    }

    public function getProductRawItemDimension($pid)
    {
        $em              = $this->getDoctrine()->getManager();
        $result          = array();
        $GeneralService  = $this->get(GeneralService::class);
        $GeneralFunction = new GeneralFunctionController();
        /* Make Ecircular Enabled */

        $condition_array = array('p.id' => $pid);
        $join_array      = array();
        $productData     = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Product", $allies = 'p', $condition_array, $operator_array = array(), $data = 'p.productType', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);

        if (isset($productData[0]['productType']) && !empty($productData[0]['productType'])) {
            if ($productData[0]['productType'] == 1) {
                $condition_array              = array('rp.product' => $pid, 'rp.status' => 1, 'rp.isDeleted' => 0);
                $join_array                   = array();
                $join_array[0]['type']        = '';
                $join_array[0]['join_from']   = 'rp.rawItem';
                $join_array[0]['join_to']     = 'r.id';
                $join_array[0]['join_allies'] = 'r';
                $join_array[0]['join_class']  = 'CatalogueBundle:RawItem';

                $rowItemData = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:RawItemProduct", $allies = 'rp', $condition_array, $operator_array = array(), $data = 'rp.rawItemName,r.itemDepth,r.itemHeight,r.itemlength,r.weight,r.volume,r.rawItemDimensionImage,r.rawItemAssemblyPdf,r.rawItemProductVideo,r.rawItemName as raw_item_tbl_name,r.rawItemName as label', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = false);
                if (!empty($rowItemData)) {
                    $result = $rowItemData;
                }
            } else {
                $condition_array      = array('pv.product' => $pid, 'pv.status' => 1, 'pv.isDeleted' => 0);
                $join_array           = array();
                $productVariationData = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:ProductVariation", $allies = 'pv', $condition_array, $operator_array = array(), $data = 'pv.variationDescription', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
                $returnVarRawItem     = array();
                if (isset($productVariationData[0]['variationDescription']) && !empty($productVariationData[0]['variationDescription'])) {
                    $variationDescription = json_decode($productVariationData[0]['variationDescription'], true);
                    if (!empty(array_values($variationDescription)[0]['products'])) {
                        $varProductsData = array_values($variationDescription)[0]['products'];
                        foreach ($varProductsData as $key => $rawitem) {
                            if (isset($rawitem) && !empty($rawitem)) {
                                $data                  = 'r.rawItemName, r.rawItemSku, r.itemDepth, r.itemHeight, r.itemlength, pr.rawItemName as rawitemLable,r.id, pr.id as productRawitemId, r.weight, r.rawItemAssemblyPdf, r.rawItemDimensionImage, r.rawItemProductVideo, r.weight, r.volume,r.rawItemName as raw_item_tbl_name,r.rawItemName as label';
                                $join_condition        = " AND pr.status = 1 AND pr.isDeleted = 0 AND pr.product=" . $pid;
                                $join_rawitem_array[0] = array('type' => 'left', 'join_from' => 'r.id', 'join_to' => 'pr.rawItem', 'join_allies' => 'pr', 'join_class' => 'CatalogueBundle:RawItemProduct', 'join_condition' => $join_condition);
                                $condition_array       = array('r.id' => $rawitem['id']);
                                $rawitemData           = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:RawItem", $allies = 'r', $condition_array, $operator_array = array(), $data, $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_rawitem_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
                                array_push($returnVarRawItem, $rawitemData[0]);
                            }
                        }
                    }
                }
                $result = $returnVarRawItem;
            }
        }
        return $result;
    }

    public function getVariationProductRawItemDimension($pid)
    {
        $em              = $this->getDoctrine()->getManager();
        $result          = array();
        $GeneralService  = $this->get(GeneralService::class);
        $GeneralFunction = new GeneralFunctionController();
        /* Make Ecircular Enabled */

        $condition_array              = array('rp.product' => $pid, 'rp.status' => 1, 'rp.isDeleted' => 0);
        $join_array                   = array();
        $join_array[0]['type']        = '';
        $join_array[0]['join_from']   = 'rp.rawItem';
        $join_array[0]['join_to']     = 'r.id';
        $join_array[0]['join_allies'] = 'r';
        $join_array[0]['join_class']  = 'CatalogueBundle:RawItem';

        $rowItemData = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:RawItemProduct", $allies = 'rp', $condition_array, $operator_array = array(), $data = 'rp.rawItemName,r.itemDepth,r.itemHeight,r.itemlength,r.weight,r.volume,r.rawItemDimensionImage,r.rawItemAssemblyPdf,r.rawItemProductVideo,r.rawItemName as raw_item_tbl_name,r.rawItemName as label', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = false);

        if (!empty($rowItemData)) {
            $result = $rowItemData;
        }
        return $result;
    }

    public function getActiveProductPromotions()
    {
        $product_promotion_data = array();
        $lang_id                = $this->get('session')->get('front_lang_id');
        $GeneralService         = $this->get(GeneralService::class);
        $current_date           =  date('Y-m-d H:i:s');        
        if (empty($lang_id)) {
            $SiteSetting = $GeneralService->getStoreMainConfig();
            $lang_id     = $SiteSetting['langId'];
        }
        $em               = $this->getDoctrine()->getManager();
        $customer_reviews = array();
        //Changed by Gayatri on 18.07.2023 due to changes in Marking Module.
        $sql = "SELECT p.id as product_id,m.* FROM product p
                INNER JOIN product_marking pm ON p.id = pm.product_id
                INNER JOIN marking m ON m.id=pm.marking_id
                INNER JOIN marking_lang ml on ml.uu_id = m.uu_id
                INNER JOIN language l on ml.lang_ref_id = l.ctb_ref_id
                WHERE p.status=1 AND p.is_deleted=0 AND l.id = $lang_id AND (pm.showalways=1 OR (pm.start_date < '".$current_date."' AND pm.end_date >= '".$current_date."') ) AND pm.status = 1 AND pm.is_deleted = 0 AND m.status = 1 AND m.is_deleted = 0 GROUP BY m.id
                ORDER BY p.id DESC";
        //End by Gayatri
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            $product_promotion_data = $result;
        }
        return $product_promotion_data;
    }

    /**
     *  @Route("/getcityadmin",name="admin_getcity")
     */
    public function ajaxadmingetcity(Request $request)
    {
        $session      = $request->getSession();
        $em           = $this->getDoctrine()->getManager();
        $address_city = '';
        if ($request->request->get('city_id')) {
            $address_city = $request->request->get('city_id');
        }
        $langCode = $this->getDefaultLanguage();
        $lnCode   = $langCode->getCode();
        $response = array();
        $StateId  = "";
        $StateId  = $request->get('stateid');
        $OptHtm   = '<option value="">Select City</option>';
        $em       = $this->getDoctrine()->getManager();
        if (!empty($StateId)) {
            $prdSql    = "SELECT id, city_name ,city_language FROM cities WHERE is_deleted='0' AND status = '1' AND state_id = '$StateId' ORDER BY city_name ASC";
            $statement = $em->getConnection()->prepare($prdSql);
            $statement->execute();
            $City = $statement->fetchAll();
            if (!empty($City)) {
                foreach ($City as $cty) {
                    $selected = '';
                    if ($address_city == $cty['id']) {
                        $selected = 'selected="selected"';
                    }
                    $cityLanguage = json_decode($cty['city_language']);
                    $cityName     = $this->getLocationListLang($lnCode, $cityLanguage, $cty['city_name']);

                    $OptHtm .= '<option value="' . $cty['id'] . '" ' . $selected . '>' . $cityName . '</option>';
                }
            }
            echo $OptHtm;
            exit;
        } else {
            echo 0;
            exit;
        }
    }

    /**
     * @Route("/getstateadmin", name="admin_getstate")
     */
    public function ajaxadmingetstate(Request $request)
    {
        $session                     = $request->getSession();
        $em                          = $this->getDoctrine()->getManager();
        $CtyId                       = "";
        $CtyId                       = $request->get('ctrid');
        $langCode                    = $this->getDefaultLanguage();
        $lnCode                      = $langCode->getCode();
        $hdn_commaseparated_state_id = $request->request->get('hdn_commaseparated_state_id');
        if (!empty($hdn_commaseparated_state_id)) {
            $hdn_commaseparated_state_id = explode(",", $hdn_commaseparated_state_id);
        }
        $address_state = '';
        $state_id      = '';
        if ($request->request->get('state_id')) {
            $state_id = $request->request->get('state_id');
        }
        $OptHtm = '<option value="">Select State / County</option>';

        if (!empty($CtyId) && $CtyId > 0) {
            $prdSql    = "SELECT id, state_name,iso_code,state_language FROM state WHERE is_deleted='0' AND status = '1' AND country_id = '$CtyId' ORDER BY state_name ASC";
            $statement = $em->getConnection()->prepare($prdSql);
            $statement->execute();
            $State = $statement->fetchAll();
            if (!empty($State)) {
                foreach ($State as $sts) {
                    $selected      = '';
                    $stateLanguage = json_decode($sts['state_language']);
                    $stateName     = $this->getLocationListLang($lnCode, $stateLanguage, $sts['state_name']);
                    if ($state_id == $sts['id']) {
                        //if (in_array($sts['id'], $hdn_commaseparated_state_id)) {
                        $selected = 'selected="selected"';
                    }
                    //$OptHtm .= '<option value="' . $sts['iso_code'] . '"  ' . $selected . '>' . $sts['name'] . '</option>';
                    $OptHtm .= '<option value="' . $sts['id'] . '"  ' . $selected . '>' . $stateName . '</option>';
                }
            }
            echo $OptHtm;
            exit;
        } else {
            echo 0;
            exit;
        }
    }

    public function sortBased($sorting = '')
    {
        switch ($sorting) {
            case "A-Z":
                $sort_based = 'ORDER BY pl.name ASC';
                break;
            case "AtoZ":
                $sort_based = 'ORDER BY pl.name ASC';
                break;
            case "Z-A":
                $sort_based = 'ORDER BY pl.name DESC';
                break;
            case "ZtoA":
                $sort_based = 'ORDER BY pl.name DESC';
                break;
            case "price(High-Low)":
                $sort_based = 'ORDER BY p.sale_price DESC';
                break;
            case "HightoLow":
                $sort_based = 'ORDER BY p.sale_price DESC';
                break;
            case "price(Low-High)":
                $sort_based = 'ORDER BY p.sale_price ASC';
                break;
            case "LowtoHigh":
                $sort_based = 'ORDER BY p.sale_price ASC';
                break;
            case "Rating(High-Low)":
                $sort_based = 'ORDER BY total_rating DESC';
                break;
            case "sku(A-Z)":
                $sort_based = 'ORDER BY p.sku ASC';
                break;
            case "SkuAtoZ":
                $sort_based = 'ORDER BY p.sku ASC';
                break;
            case "NewestFirst":
                $sort_based = 'ORDER BY p.created_date ASC';
                break;
            case "OldestFirst":
                $sort_based = 'ORDER BY p.created_date DESC';
                break;
            default:
                $sort_based = 'ORDER BY p.sort_order ASC';
                break;
        }
        return $sort_based;
    }

    public function getPoShoppingCart()
    {
        $session = new session();
        if (!$session->has('po_shopping_cart')) {
            $session->set('po_shopping_cart', new sfPoShoppingCart());
        }
        return $session->get('po_shopping_cart');
    }

    public function getShoppingCart()
    {
        $session = new session();
        if (!$session->has('shopping_cart')) {
            $session->set('shopping_cart', new sfShoppingCart());
        }
        return $session->get('shopping_cart');
    }

    public function getNewsLetterFormHtml($widgetTypeData)
    {
        $html = '';
        if (!empty($widgetTypeData)) {
            $GeneralService = $this->get(GeneralService::class);
            //Get Store Main Configuration
            $baseUrl     = $GeneralService->getBaseUrl();
            $SiteSetting = $GeneralService->getStoreMainConfig();
            if (!empty($SiteSetting)) {
                $webmasterSetting = json_decode($SiteSetting['webmasterSetting']);
                $captcha_site_key = $webmasterSetting->google_captcha_publickkey;
                if (!empty($widgetTypeData['title'])) {
                    $html = '<h3 class="title-default">' . $widgetTypeData['title'] . '</h3>';
                }
                $chkCaptcha = 0;
                $captchaSub = '';
                if (!empty($captcha_site_key)) {
                    $chkCaptcha = 1;
                    if(property_exists($webmasterSetting,'google_captcha_version') && $webmasterSetting->google_captcha_version == 3){
                        $captchaSub ='<input type="hidden" id="g-recaptcha-response" name="g-recaptcha-response">
                            <input type="hidden" name="action" value="validate_captcha">';
                    }else{
                        $captchaSub = '<div class="form-group col-md-12 clearfix"><div class="g-recaptcha" id="header_fc_captcha" data-sitekey="' . $captcha_site_key . '" data-callback="recaptcha_callback" >&nbsp;</div></div>';
                    }
                }
                $csrf =  $this->container->get('security.csrf.token_manager');
                $html .= '<div class="Subscribe">
                                <form method="post" action="" class="form-horizontal" data-toggle="validator" name="frmsubscribenewsletter" id="frmsubscribenewsletter">
                                    <div class="form-group">
                                        <input name="emailid" type="email" value="" class="form-control input-lg c-square" placeholder="' . $this->get('translator')->trans('front_enter_your_email_address') . '" maxlength="100" />
                                        <input type="submit" name="btnSubscribe" id="btnSubscribenewsletter" value="' . $this->get('translator')->trans('front_signup') . '" class="" />
                                        <input type="hidden" name="_csrf_token" value="'.$csrf->getToken('authsubscriber').'">
                                    </div>'.$captchaSub.'<input type="hidden" name="hdn_secSub" value="' . $chkCaptcha . '"/>
                                </form>
                            </div>';
            }
        }
        return $html;
    }

    public function getWidgetHtml($SiteSetting, $widgetAreaId, $return_html = 1, $special_widget = '', $is_specify = '')
    {   static $cnt;
        $GeneralService     = $this->get(GeneralService::class);
        $baseUrl            = $GeneralService->getBaseUrl();
        $themename          = $SiteSetting["themename"];
        $html_data_typewise = array();
        $html               = '';
        $em                 = $this->getDoctrine()->getManager();
        $widget_area        = $em->getRepository('AppearanceBundle:WidgetArea')->findBy(array('status' => 1));
        foreach ($widget_area as $wa) {
            $widget_html_columns[$wa->getId()]                = $wa->getSlug();
            $widget_html_columns_data_content[$wa->getSlug()] = array('html' => '');
        }
        $session = new Session();
        $lang_id = $session->get('front_lang_id');
        // widget lang change --
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        // -- widget lang change 
        if (!empty($widgetAreaId)) {
            //$where_condition = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (' . $widgetAreaId . ') AND ws.lang_id =' . $lang_id;
            // widget lang change --
            $where_condition = " ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (" . $widgetAreaId . ") AND wsl.lang_ref_id = '$lang_ref_id'";
            if (!empty($special_widget)) {
                $special_widget  = str_replace(",", "','", $special_widget);
                //$where_condition = " ws.status=1 AND ws.is_deleted=0 AND (ws.widget_area_id IN ('" . $widgetAreaId . "') OR ws.slug IN ('$special_widget')) AND ws.lang_id =" . $lang_id;
                // widget lang change --
                $where_condition = " ws.status=1 AND ws.is_deleted=0 AND (ws.widget_area_id IN (" . $widgetAreaId . ") OR ws.slug IN ('$special_widget')) AND wsl.lang_ref_id = '$lang_ref_id'";
            }
            $sql       = "SELECT ws.*,wsl.title,wsl.body_text FROM widget_setting ws  "
                    . " LEFT JOIN widget_setting_lang AS wsl ON wsl.widget_setting_ref_id = ws.ctb_ref_id "
                    . " WHERE $where_condition ORDER BY ws.sort_order,ws.widget_area_id ASC ";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result     = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $html_data  = array();            
            if (!empty($result)) {
                $k=1;
                foreach ($result as $val) {
                    $widget_content = $this->getWidgetContent($val, $themename);
                    $html_data[]    = $widget_content;
                    if($val['widget_area_id'] == 32 && !empty($widget_content)){
                        $widget_content1 = '<style type="text/css">#abovebar-'.$k.'{background-color:'.$val['commaseparated_id'].'!important;}#abovebar-'.$k.'::before{background-color:'.$val['commaseparated_id'].'!important;}</style><div class="sticky-top-bar" id="abovebar-'.$k.'">'.str_replace("sticky-","",$widget_content).'</div>';
                        $widget_html_columns_data_content[$widget_html_columns[$val['widget_area_id']]]['html'] .= $widget_content1;
                    }else if($val['widget_area_id'] == 52 && !empty($widget_content)){
                        $widget_content1 = '<style type="text/css">.aftermenuallpage{background-color:'.$val['commaseparated_id'].'!important;}.aftermenuallpage::before{background-color:'.$val['commaseparated_id'].'!important;}</style><div class="aftermenuallpage">'.str_replace("sticky-","",$widget_content).'</div>';
                        $widget_html_columns_data_content[$widget_html_columns[$val['widget_area_id']]]['html'] .= $widget_content1;
                    }else{
                        $widget_html_columns_data_content[$widget_html_columns[$val['widget_area_id']]]['html'] .= $widget_content;
                    }
                    $k++;
                }
            }
            if (!empty($html_data)) {
                $number_of_widgets = count($html_data);
                for ($i = 0; $i < $number_of_widgets; $i++) {
                    $html .= $html_data[$i];
                }
            }
            if ($return_html == 0) {
                $html = $widget_html_columns_data_content;
            }
        }        
        return $html;
    }

    public function getLocalShippingReturnData($extra_data)
    {
        $em = $this->getDoctrine()->getManager();

        $session         = new session();
        $CheckoutService = $session->get('CheckoutService');
        $GeneralService = $extra_data['GeneralService'];
        $ShoppingCart   = $extra_data['ShoppingCart'];
        $shipperAddress = $extra_data['shipperAddress'];
        $SiteSetting    = $extra_data['SiteSetting'];

        $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
        $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];
        
        $session_shipping_options_id = $CheckoutService->getShippingOptionId();
        $shipping_method_id          = $CheckoutService->getShippingMethodId();
        $method_name                 = $CheckoutService->getShippingMethodName();
        if ($shipping_calculate_base_on == 'billing_address') {
            $zipcode    = $CheckoutService->getBilZip();
            $city_id    = $CheckoutService->getBilCity();
            $state_id   = $CheckoutService->getBilState();
            $country_id = $CheckoutService->getBilCountry();
        } else {
            $zipcode    = $CheckoutService->getShipZip();
            $city_id    = $CheckoutService->getShipCity();
            $state_id   = $CheckoutService->getShipState();
            $country_id = $CheckoutService->getShipCountry();
        }
        $FoundShippingOption = array();
        $zoneFoundArray      = array(0);
        $methodFoundArray    = array(0);
        $shipping_data       = array();
        $shipping_zone_ids_exists = array();
        $shipping_zone_ids_exists = $this->checkShippingZonesExists($zipcode,$city_id,$state_id,$country_id); //Function to Check zone wise entry exsists or not
        if($shipping_zone_ids_exists){
            $select_ship_zone = "SELECT szm.*,m.slug FROM `shipping_zone` sz 
            INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
            INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
            INNER JOIN module m ON sm.module_id = m.id AND m.slug = 'localshipping' AND m.is_deleted = '0' AND m.status = '1' WHERE sz.id in (".implode(',',$shipping_zone_ids_exists).") AND sz.is_deleted=0 and sz.status=1 GROUP BY szm.id";
            //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
            $statement = $em->getConnection()->prepare($select_ship_zone);
            $statement->execute();
            $all_ship_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);        
            if ($all_ship_zones) {            
                foreach ($all_ship_zones as $key => $value) {
                    if (!empty($value['options_data'])) {
                        $json_decode_shipping_data = json_decode($value['options_data']);
                        foreach ($json_decode_shipping_data as $json_data) {
                            $shipping_option_id_available = $this->checkShippingOptionAvailability($json_data->option_id);
                            if ($shipping_option_id_available == 1) {
                                if ($json_data->status == 1) {
                                    if ($json_data->based_on == 'by_percentage') {
                                        $percentage = str_replace('%','',$json_data->cost->percentage);
                                        $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $ShoppingCart['totalcart'] * $percentage / 100);
                                        if (!empty($ShoppingCart)) {
                                            $shipping_tax   = $ShoppingCart['totalshipping_taxrate'];
                                            $shipping_tax   = ($shippingcharge * $shipping_tax / 100);
                                            $shippingcharge = $shippingcharge + $shipping_tax;
                                        }
                                        if ($shippingcharge < $json_data->cost->min) {
                                            $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost->min);
                                        }
                                        if ($shippingcharge > $json_data->cost->max) {
                                            $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost->max);
                                        }
                                    } else if ($json_data->based_on == 'by_cost') {
                                        $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost);
                                        if (!empty($ShoppingCart)) {
                                            $shipping_tax = $ShoppingCart['totalshipping_taxrate'];
                                            $shipping_tax = ($shippingcharge * $shipping_tax / 100);
                                            $GeneralService->getPriceRoundAmount('tax', $shipping_tax);
                                            $shippingcharge = $shippingcharge + $GeneralService->getPriceRoundAmount('tax', $shipping_tax);
                                        }
                                    } else if ($json_data->based_on == 'by_weight') {
                                        $shippingcharge = $weight * $GeneralService->getPriceRoundAmount('shipping', $json_data->cost);
                                        if (!empty($ShoppingCart)) {
                                            $shipping_tax   = $ShoppingCart['totalshipping_taxrate'];
                                            $shipping_tax   = ($shippingcharge * $shipping_tax / 100);
                                            $shippingcharge = $shippingcharge + $shipping_tax;
                                        }
                                    }
                                    $option_description = $json_data->option_label;
                                    $option_data        = $this->getLocalShippingOptionDescription($json_data->option_id, 'description'); // second param commaseptared fields of table
                                    if (!empty($option_data)) {
                                        $option_description = $option_data['description'];
                                    }
                                    $shipping_data[$json_data->option_id] = array('option_label' => $json_data->option_label, 'option_description' => $option_description, 'delivery_days' => $json_data->delivery_days, 'shippingcharge' => round($shippingcharge, 2), 'error' => '', 'is_default' => $json_data->is_default);
                                }
                            }
                        }
                        return $shipping_data;
                    }
                }
            }
        }
        return $shipping_data;
    }

    public function getProductImageGalleryPortion($imageData, $galleryStyle, $productTemplate, $brand_slug_main_product, $brand_place_from_main_product, $SiteSetting, $product_type = '1')
    {
        $GeneralService = $this->get(GeneralService::class);
        $themename      = $SiteSetting['themename'];
        $baseUrl        = $GeneralService->getBaseUrl();
        $col_class      = 'col-md-6';
        $imageDir       = $this->container->getParameter('kernel.root_dir') . '/../web';
        $cdnurl         = $this->container->getParameter('cdnurl');
        $html_gallery   = '';
        $data           = array('imageData' => $imageData, 'galleryStyle' => $galleryStyle, 'productTemplate' => $productTemplate, 'brand_slug_main_product' => $brand_slug_main_product, 'brand_place_from_main_product' => $brand_place_from_main_product);
        if ($product_type == 2) {
            $Template = 'CatalogueBundle:' . $themename . ':product/_variation_imagegallery.html.twig';
            if (!$this->get('templating')->exists($Template)) {
                $Template = 'CatalogueBundle:default:product/_variation_imagegallery.html.twig';
            }
            $html_gallery = $this->renderView($Template, array('data' => $data));
        } else {
            $Template = 'CatalogueBundle:' . $themename . ':product/imagegallery.html.twig';
            if (!$this->get('templating')->exists($Template)) {
                $Template = 'CatalogueBundle:default:product/imagegallery.html.twig';
            }
            $html_gallery = $this->renderView($Template, array('data' => $data));
        }
        return $html_gallery;
    }

    public function getQuickViewImageGalleryPortion($imageData, $galleryStyle, $productTemplate, $brand_slug_main_product, $brand_place_from_main_product, $SiteSetting)
    {

        $GeneralService = $this->get(GeneralService::class);
        $themename      = $SiteSetting['themename'];
        $baseUrl        = $GeneralService->getBaseUrl();
        $col_class      = 'col-md-6';
        $imageDir       = $this->container->getParameter('kernel.root_dir') . '/../web';
        $cdnurl         = $this->container->getParameter('cdnurl');
        $html_gallery   = '';
        $data           = array('imageData' => $imageData, 'galleryStyle' => $galleryStyle, 'productTemplate' => $productTemplate, 'brand_slug_main_product' => $brand_slug_main_product, 'brand_place_from_main_product' => $brand_place_from_main_product);

        $Template = 'CatalogueBundle:' . $themename . ':product/quickviewimagegallery.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:product/quickviewimagegallery.html.twig';
        }
        $html_gallery = $this->renderView($Template, array('data' => $data));
        return $html_gallery;
    }

    public function getDimentionArrayData($product_raw_item_dimension, $default_dimension = 'in')
    {
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting = $GeneralService->getStoreMainConfig();
        (!empty($SiteSetting['allotherSetting'])) ? $AllOtherSetting = json_decode($SiteSetting['allotherSetting'], true) : $AllOtherSetting = "";
        $dimention_data = array();
        if (!empty($product_raw_item_dimension)) {
            foreach ($product_raw_item_dimension as $dimension_value) {
                $label                 = $dimension_value['rawItemName'];
                $height                = $dimension_value['itemHeight'];
                $length                = $dimension_value['itemlength'];
                $depth                 = $dimension_value['itemDepth'];
                $rawItemAssemblyPdf    = $dimension_value['rawItemAssemblyPdf'];
                $rawItemDimensionImage = $dimension_value['rawItemDimensionImage'];
                $rawItemProductVideo   = $dimension_value['rawItemProductVideo'];

                if (empty($dimension_value['rawItemName'])) {
                    $label = $dimension_value['raw_item_tbl_name'];
                }
                $rawItemProductVideo = $dimension_value['rawItemProductVideo'];
                if ($default_dimension == 'cm') {
                    $depth  = $this->convertSize($depth, 'in', $default_dimension);
                    $height = $this->convertSize($height, 'in', $default_dimension);
                    $length = $this->convertSize($length, 'in', $default_dimension);
                } elseif ($default_dimension == 'mm') {
                    $depth  = $this->convertSize($depth, 'in', $default_dimension);
                    $height = $this->convertSize($height, 'in', $default_dimension);
                    $length = $this->convertSize($length, 'in', $default_dimension);
                }
                if(!empty($AllOtherSetting['show_dimension_fraction']) && $AllOtherSetting['show_dimension_fraction'] == 'Yes'){
                    $height = number_format($height).' &frac12';
                    $length = number_format($length).' &frac12';
                    $depth  = number_format($depth).' &frac12';
                }
                $dimention_data[] = array(
                    'label'                 => $label,
                    'height'                => $height,
                    'length'                => $length,
                    'depth'                 => $depth,
                    'rawItemProductVideo'   => $rawItemProductVideo,
                    'rawItemDimensionImage' => $rawItemDimensionImage,
                    'rawItemAssemblyPdf'    => $rawItemAssemblyPdf,
                    'dimensionType'         => $default_dimension,
                );
            }
        }
        return $dimention_data;
    }

    public function getRawItemDimensionData($ids = '', $fields = '*')
    {
        $em   = $this->getDoctrine()->getManager();
        $data = array();
        if (!empty($ids)) {
            $sql       = "SELECT $fields FROM raw_item ri WHERE ri.is_deleted=0 AND ri.status=1 AND ri.id IN ($ids) ";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result)) {
                $data = $result[0];
            }
        }
        return $data;
    }

    public function getProductOtherDetailsPortion($productPageSetting, $productData, $currency = '$', $product_attribute_data = '', $category_page_layout, $SiteSetting)
    {
        $cart_open_style = 'show-popup';
        if ($productPageSetting->add_to_cart_event != 'show-popup') {
            $cart_open_style = 'show-minicart';
        }
        $em              = $this->getDoctrine()->getManager();
        $GeneralService  = $this->get(GeneralService::class);
        $MyFrontService  = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $msrp_percentage = $GeneralService->getMsrpData();
        $baseUrl         = $GeneralService->getBaseUrl();
        $session         = new Session();
        $themename       = $SiteSetting['themename'];
        $GeneralFunction = new GeneralFunctionController();
        //list($SiteSetting) = $this->commonData;
        $webmasterSetting            = json_decode($SiteSetting['webmasterSetting']);
        $bullet_features             = '';
        $advance_dimension           = '';
        $advance_features            = '';
        $captcha_site_key            = $webmasterSetting->google_captcha_publickkey;
        $captcha_version             = $webmasterSetting->google_captcha_version;
        $show_affirm_on_product_page = 0;
        $affirm_mode                 = 'sandbox';
        $affirm_module_setting       = $this->getModuleSettingBySlug('affirm');
        $affirm_sandbox_base_url     = "https://cdn1-sandbox.affirm.com/js/v2/affirm.js";
        $affirm_live_base_url        = "https://api.affirm.com/api/v2/";
        $affirm_public_key           = '';
        $affirm_private_key          = '';
        $affirm_script               = $affirm_sandbox_base_url;
        if (!empty($affirm_module_setting) && !empty($affirm_module_setting->ModuleSetting)) {
            $module_setting_data = $affirm_module_setting->ModuleSetting;
            $affirm_public_key   = $module_setting_data->public_key;
            $affirm_private_key  = $module_setting_data->private_key;
            if ($module_setting_data->show_on_product_page == 1) {
                $show_affirm_on_product_page = 1;
            }
            if ($module_setting_data->islive == 1) {
                $affirm_mode   = 'live';
                $affirm_script = $affirm_live_base_url;
            }
        }
        $show_zibby_on_product_page = 0;
        $zibby_module_setting       = $this->getModuleSettingBySlug('zibby');
        $zibby_mode_url             = "https://sandbox.zibby.com";
        $zibby_pubilc_token         = '';
        if (!empty($zibby_module_setting) && !empty($zibby_module_setting->ModuleSetting)) {
            $module_setting_data = $zibby_module_setting->ModuleSetting;
            $zibby_pubilc_token  = $module_setting_data->zibby_pubilc_token;
            if ($module_setting_data->show_on_product_page == 1) {
                $show_zibby_on_product_page = 1;
            }
            $zibby_mode_url = 'https://sandbox.zibby.com'; // 'https://sandbox.zibby.com';
            if ($module_setting_data->islive == 1) {
                $zibby_mode_url = 'https://www.zibby.com'; //'https://www.zibby.com';
            }
        }
        $affirm_zibby_html = '';
        if ($show_zibby_on_product_page == 1) {
            $affirm_zibby_html = '<div class="ZibbyFinanceBtn"><a id="zibby-preapprove" href="javascript:void(0);">&nbsp;</a></div><input type="hidden" id="zibby_mode_url" name="zibby_mode_url" value="' . $zibby_mode_url . '"><input type="hidden" id="zibby_pubilc_token" name="zibby_pubilc_token" value="' . $zibby_pubilc_token . '">';
        }
        if ($show_affirm_on_product_page == 1) {
            if ($affirm_zibby_html != '') {
                $affirm_zibby_html .= ' OR ';
            }
            $affirm_zibby_html .= '<div class="as-low-as">
                  <div  id="affrim_aslowas"><div id="amounut-info" style="visibility: hidden"></div><img src="https://cdn-assets.affirm.com/images/blue_logo-transparent_bg.png" accesskey="" width="81px" height="25px">
                  <div id="checkout-text" style="visibility: hidden"> </div>
                    <a id="afirm-learn-more" style="visibility: hidden" href="#"></a>
                    </div></div>
                    <input type="hidden" id="affirm_public_api_key" name="affirm_public_api_key" value="' . $affirm_public_key . '">
                    <input type="hidden" id="affirm_script" name="affirm_script" value="' . $affirm_script . '">';
        }
        $Installment     = array();
        $installmentData = $this->getDoctrine()->getRepository(Installment::class)->findOneBy(array('isDefault' => '1', 'status' => '1', 'isDeleted' => '0'));
        if (!empty($installmentData)) {
            $Installment['id']   = $installment_id   = $installmentData->getId();
            $Installment['name'] = $installment_name = $installmentData->getName();
            $installmentSetting  = $this->getDoctrine()->getRepository(InstallmentSetting::class)->findOneBy(array('installment' => $installment_id));
            if (!empty($installmentSetting)) {
                $Installment['installmentSettingId'] = $installmentSetting->getId();
                $Installment['installmentType']      = $installmentSetting->getInstallmentType();
                $Installment['noOfInstallment']      = $installmentSetting->getNoOfInstallment();
                $Installment['allowAllBrand']        = $installmentSetting->getAllowAllBrand();
                $Installment['downPayment']          = $installmentSetting->getDownPayment();
                $Installment['downPaymentType']      = $installmentSetting->getDownPaymentType();
                $Installment['additionalSalePrice']  = $installmentSetting->getAdditionalSalePrice();
                $Installment['allowOnTax']           = $installmentSetting->getAllowOnTax();
                $Installment['allowOnShipping']      = $installmentSetting->getAllowOnShipping();
                $Installment['allowOnWarranty']      = $installmentSetting->getAllowOnWarranty();
            }
        }
        $title_style         = $productPageSetting->header_style->product_detail_title_style;
        $bread_crum_tracking = '';
        $category_data       = array();
        $show_breadcrumb     = $productPageSetting->header_style->product_detail_show_breadcrumb;
        //     if ($title_style == 'product-default-title' ) {
        $commaseptared_cateid = explode(",", $productData['category_id']);
        $mainCategoryId       = $commaseptared_cateid[0];
        //$category_data        = $em->getRepository('CatalogueBundle:Category')->find($mainCategoryId);
        $langRefId = $SiteSetting['langRefId'];
        $categoryService = $this->get(\AppBundle\Service\CategoryService::class);
        $category_data = $categoryService->findByCatNLang($mainCategoryId,$langRefId);
        if (!empty($category_data)) {
            $breadCrumData           = array('categroy' => $category_data, 'baseUrl' => $baseUrl, 'page' => 'product', 'SiteSetting' => $SiteSetting, 'is_anchar_less' => 1);
            $breadcrumb_parent_title = $this->getDataForBreadcrumTitle($breadCrumData);

            $bread_crum_tracking = $breadcrumb_parent_title;
        }
        //        }
        /* Rating Star Calculation Start */
        $prod_review = $em->getRepository(ReviewRating::class)->findBy(array('orderId' => $productData['id'], 'status' => 2, 'reviewBasedOn' => 1, 'isDeleted' => 0));
        $avgStar     = $this->starAvg($prod_review);

        $prdStarData = array('cw' => 80, 'productStar' => $avgStar['average']);
        $starWidth   = $this->starWidth($prdStarData);
        if (is_nan($starWidth)) {
            $starWidth = 0;
        }
        $popover_content = "";
        if (!empty($prod_review)) {
            $staricon = '<i class=fa fa-star></i>';
            $popover_content .= '<div class="rating_box">';
            for ($i = 5; $i >= 1; $i--) {
                $progressBarWidth = $this->progressBarWidth(array('avgprdStar' => $avgStar['cntprdStar'], 'prodStarVal' => $avgStar['prodStarIntVal'][$i] ? $avgStar['prodStarIntVal'][$i] : 0));
                $popover_content .= '<div class=starLabel>' . $i . ' ' . $staricon . ' </div><div class=progressbar><div class=progress style=width:' . $progressBarWidth . '%;></div><div class=percentCount>' . $avgStar['prodStarIntVal'][$i] . '</div></div>';
            }
            // $popover_content .= '<div class=text-center><button class=btn>Read ' . $avgStar['cntprdStar'] . ' Reviews</button></div>';
        }
        //  echo $popover_content;exit();
        /* Rating Star Calculation Start */
        $label_marking_html_data = "";
        if (!empty($productData['marking_data'])) {
            $marking_data            = $productData['marking_data'];
            $markingData             = $this->getMarkingonProduct($productData['id'], $page = 'product', $SiteData);
            $label_marking_html_data = $markingData['html'];
            $label_marking_html_data .= '<div class="clearfix"></div>';
        }
        $total_columns = 12;
        if (!empty($productData)) {
            $encId = $productData['encId'];
            
            /* SHOW HIDE BUTTON SETTING START */
            $productShowCart = array();
            if (isset($productData['brand_buttons'])) {
                $brand_buttons   = $productData['brand_buttons'];
                $data            = array('brandId' => $productData['brand_id'], 'product_page_layout' => $productPageSetting, 'brand_buttons' => $brand_buttons, 'button_setting' => $productData['button_setting']);
                $buttonType      = array('showCart', 'showWishlist', 'showGiftRegistry', 'showInquiry', 'showPrice', 'showRatings', 'showColorSwatches', 'showInstallment', 'showMsrp', 'showMsrpPromotion', 'showQuickView', 'showImageDownload', 'showSku', 'showBrand', 'showAttribute');
                $productShowCart = $this->pageHideShowSetting($buttonType, $data, $page = 'product', $SiteData);
            }
            /* SHOW HIDE BUTTON SETTING END */
            $productTitle                  = htmlspecialchars($productData['name'], ENT_QUOTES, 'UTF-8');
            $dimension                     = ''; //$productData['dimension'];
            $productSlug                   = $productData['slug'];
            $productOtherContent           = json_decode($productData['other_content'], true);
            $brandId                       = $productData['brand_id'];
            $brand_data                    = $em->getRepository('CatalogueBundle:Brand')->find($brandId);
            $cdnurl                        = $this->container->getParameter('cdnurl');
            $brand_slug_main_product       = '';
            $brand_place_from_main_product = 'M';
            $show_dimention                = '';
            $product_raw_item_dimension    = $this->getProductRawItemDimension($productData['id']);

            $dimention_data = array();
            if (!empty($product_raw_item_dimension)) {
                $dimention_data = $this->getDimentionArrayData($product_raw_item_dimension);
                $show_dimention = $productPageSetting->product_data_option->show_dimention;
            }
            
            if (!empty($brand_data)) {
                $brand_slug_main_product       = $brand_data->getSlug();
                $brand_place_from_main_product = $brand_data->getPlaceFrom();
            }
            if (!empty($productData['main_image'])) {
                $params                  = array();
                $params['option_type']   = 'catalog';
                $params['option_value']  = $productData['main_image'];
                $params['option_folder'] = $brand_slug_main_product . '/high';
                $productMainImg          = $GeneralService->getAWSUploadImages($params);
            } else {
                $productMainImg = $baseUrl . 'assets/uploads/notimage.png';
            }
        }
        $userTypeEcommerceOn = '';
        $userTypeId          = $this->get('session')->get('userTypeId');
        if ($userTypeId) {
            $getUserType         = $this->getUserTypeInfo($userTypeId);
            $userTypeEcommerceOn = $getUserType->getEcommerce();
        }
        $show_social_icon                            = $productPageSetting->product_data_option->show_social_icon;
        $product_other_detail_width                  = $productPageSetting->other_image_style->main_image_width;
        $advertisement                               = $this->getWidgetHtml($SiteSetting, 30);
        $PageTitleSetting                            = array();
        $PageTitleSetting['show_breadcrumb']         = $productPageSetting->header_style->product_detail_show_breadcrumb;
        $PageTitleSetting['breadcrumb_title']        = $productData['name'];
        $PageTitleSetting['breadcrumb_parent_title'] = $breadcrumb_parent_title;
        $PageTitleSetting['show_page_title']         = $productPageSetting->header_style->product_detail_show_header_title;
        $PageTitleSetting['page_title']              = $productData['name'];
        $PageTitleSetting['page_title_style']        = $productPageSetting->header_style->product_detail_title_style;
        $PageTitleSetting['page_title_bgoption']     = $productPageSetting->header_style->product_detail_title_background_option;
        $PageTitleSetting['page_title_bgcolor']      = $productPageSetting->header_style->product_detail_title_background_color;
        $PageTitleSetting['page_title_bgimage']      = $productPageSetting->header_style->product_detail_title_background_image;

        $session_attr_id             = new Session();
        $commaseparated_attribute_id = $session_attr_id->get('commaseparated_attribute_id');
        $html_attributewise_price    = '<input type="hidden" value="' . $productData['id'] . '" name="prdDataId" id="prdDataId">';
        $html_attributewise_price .= '<input type="hidden" value="' . $productData['sale_price'] . '" name="hdn_sale_price" id="hdn_sale_price">';
        $html_attributewise_price .= '<input type="hidden" value="' . $commaseparated_attribute_id . '" name="commaseparated_attribute_id" id="commaseparated_attribute_id">';
        $product_raw_pdf   = '';
        $product_raw_video = '';
        $product_raw_image = '';
        $youtube_base_url  = 'https://www.youtube.com/watch?v=';
        if (!empty($productData['other_content'])) {
            $product_other_content = json_decode($productData['other_content']);
            if (!empty($product_other_content)) {
                $dimention_raw_time_ids = array('assembly_pdf', 'product_video', 'dimension_image');
                if (!empty($product_other_content->assembly_pdf)) {
                    $product_raw_pdf = $this->getRawItemDimensionData($product_other_content->assembly_pdf, 'raw_item_assembly_pdf');
                    if (!empty($product_raw_pdf)) {
                        $product_raw_pdf = $product_raw_pdf['raw_item_assembly_pdf'];
                    }
                }
                if (!empty($product_other_content->product_video)) {
                    $product_raw_video = $this->getRawItemDimensionData($product_other_content->product_video, 'raw_item_product_video');
                    if (!empty($product_raw_video)) {
                        $product_raw_video = $youtube_base_url . $product_raw_video['raw_item_product_video'];
                    }
                }
                if (!empty($product_other_content->dimension_image)) {
                    $product_raw_image = $this->getRawItemDimensionData($product_other_content->dimension_image, 'raw_item_dimension_image');
                    if (!empty($product_raw_image)) {
                        $product_raw_image = $product_raw_image['raw_item_dimension_image'];
                    }
                }

                if (!empty($product_other_content->advance_dimension)) {
                    $advance_dimension = $product_other_content->advance_dimension;
                }
                if (!empty($product_other_content->bullet_features)) {
                    $bullet_features = $product_other_content->bullet_features;
                }
                if (!empty($product_other_content->advance_features)) {
                    $advance_features = $product_other_content->advance_features;
                }
            }
        }
        $bullet_features = $productData['bullet_features'];
        $advance_features = $productData['advance_features'];
        $product_raw_data = array('assembly_pdf' => $product_raw_pdf, 'product_video' => $product_raw_video, 'dimension_image' => $product_raw_image);        
        $data             = array(
            'productPageSetting'         => $productPageSetting,
            'productData'                => $productData,
            'currency'                   => $currency,
            'product_attribute_data'     => $product_attribute_data,
            'category_page_layout'       => $category_page_layout,
            'product_other_detail_width' => $product_other_detail_width,
            'show_social_icon'           => $show_social_icon,
            'affirm_html'                => $affirm_zibby_html,
            'SiteSetting'                => $SiteSetting,
            'productShowCart'            => $productShowCart,
            'captcha_site_key'           => $captcha_site_key,
            'captcha_version'            => $captcha_version,
            'starWidth'                  => $starWidth,
            'popover_content'            => $popover_content,
            'cart_open_style'            => $cart_open_style,
            'productTitle'               => $productTitle,
            'baseUrl'                    => $baseUrl,
            'productMainImg'             => $productMainImg,
            'label_marking_html_data'    => $label_marking_html_data,
            'encId'                      => $encId,
            'themename'                  => $themename,
            'GeneralService'             => $GeneralService,
            'avgStar'                    => $avgStar, 'advertisement' => $advertisement, 'html_attributewise_price' => $html_attributewise_price, 'dimention_data' => $dimention_data, 'bullet_features' => $bullet_features, 'advance_features' => $advance_features, 'advance_dimension' => $advance_dimension, 'product_raw_data' => $product_raw_data, 'show_dimention' => $show_dimention,
        );

        $Template = 'CatalogueBundle:' . $themename . ':product/productdetailsleft.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:product/productdetailsleft.html.twig';
        }
        $html_productDetails = $this->renderView($Template, array('data' => $data, 'PageTitleSetting' => $PageTitleSetting, 'userTypeId' => $userTypeId, 'userTypeEcommerceOn' => $userTypeEcommerceOn, 'SiteSetting' => $SiteSetting));
        return $html_productDetails;
    }

    /**
     * @Route("getProductInquiry", name="getProductInquiry")
     */
    public function getProductInquiry(Request $request)
    {

        list($SiteSetting, $StoreImgSetting, $Language, $PrimaryMenu, $SecondaryMenu, $Country, $GeneralService, $GeneralFunction, $LayoutSetting, $socialLinkArray, $CommonVariable, $CommonAvailableData, $ShoppingCartData) = $this->commonFrontData();
        $em  = $this->getDoctrine()->getManager();
        $themename = $SiteSetting['themename'];
        $webmasterSetting = json_decode($SiteSetting['webmasterSetting']);
        $captcha_site_key = isset($webmasterSetting->google_captcha_publickkey) ? $webmasterSetting->google_captcha_publickkey : "";
        $captcha_version = isset($webmasterSetting->google_captcha_version) ? $webmasterSetting->google_captcha_version : 2;
        $productId = $request->request->get('productId');
        $session = new Session();
        $front_lang_ref_id = $session->get('front_lang_ref_id');
        //$product = $this->getFieldData($table_name = "product", $field = "name,trade_name,id,main_image,slug,brand_id", $condition = "id=" . $productId);
        $sql = "SELECT pl.name,p.trade_name,p.id,p.main_image,p.slug,p.brand_id "
            . "FROM  product p"
            ." JOIN product_lang pl ON pl.product_ref_id = p.ctb_ref_id "
            ." WHERE pl.lang_ref_id ='" . $front_lang_ref_id . "' "
            ." AND p.id = " . $productId . ""
            ." GROUP BY p.id";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $product = $statement->fetchAll();
        
        /* Get Countrydata as per Store Profile Setting Start */
        $country_store_setting = (json_decode($SiteSetting['allotherSetting']));
        $country_html          = '';
        $state_html            = '';
        $selected              = '';
        $country_html .= '<select name="countryId" id="countryId' . $productId . '" class="form-control select2 product_inquiry_countryId c-square" tabindex="5"> <option value="">' . $this->get('translator')->trans('front_login_regcountry_placeholder') . '</option>';

        $country_otherdata = array('sell_bill_to' => 'bill_to');
        $CountryData       = $this->getCountryData($country_store_setting, $country_otherdata);
        $CountCountryData  = count($CountryData);
        $langCode          = $this->getFrontLanguage($SiteSetting);
        foreach ($CountryData as $cntry) {
            $country_html .= '<option value="' . $cntry['id'] . '"';
            $countryLanguage = json_decode($cntry['country_language']);
            $countryName     = $this->getLocationListLang($langCode, $countryLanguage, $cntry['country_name']);
            if ($cntry['id'] == $SiteSetting['countryId']) {
                $selected = ' selected="selected"';
                $country_html .= $selected;
                // if ($CountCountryData == 1) {
                $prdSql    = "SELECT id, state_name,state_language FROM state WHERE is_deleted='0' AND status = '1' AND country_id = '" . $cntry['id'] . "'";
                $statement = $em->getConnection()->prepare($prdSql);
                $statement->execute();
                $State = $statement->fetchAll();
                if (!empty($State)) {
                    foreach ($State as $sts) {
                        $stateLanguage = json_decode($sts['state_language']);
                        $stateName     = $this->getLocationListLang($langCode, $stateLanguage, $sts['state_name']);
                        $state_html .= '<option value="' . $sts['id'] . '">' . $stateName . '</option>';
                    }
                }
                //}
            }
            $country_html .= '>' . $countryName . '</option>';
        }
        $country_html .= '</select>';
        /* Get Countrydata as per Store Profile Setting END */
        $condition = "is_deleted = '0' AND status = 1 AND lang_id = ".$this->get('session')->get('front_lang_id');
        $StoreData = $this->getFieldData($table_name = "warehouse", $field = "name,id", $condition);

        $brandId         = $product[0]['brand_id'];
        $brand_data      = $em->getRepository('CatalogueBundle:Brand')->find($brandId);
        $imag_folderName = '';
        $brand_slug      = '';
        if (!empty($brand_data)) {
            $brand_slug      = $brand_data->getSlug();
            $imag_folderName = $brand_data->getFolderName();
        }
        $productImage = $this->getProductImageUrl($product[0]['main_image'], $imag_folderName)['small'];
        $data         = array(
            'productId'        => $productId,
            'product'          => $product,
            'productImage'     => $productImage,
            'captcha_site_key' => $captcha_site_key,
            'captcha_version'  => $captcha_version,
            'themename'        => $themename,
            'StoreData'        => $StoreData,
            'Country'          => $country_html,
            'state_html'       => $state_html,
            'GeneralService'   => $GeneralService,
        );

        $Template = 'CatalogueBundle:' . $themename . ':product/productinquiry.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:product/productinquiry.html.twig';
        }
        $html_productdinquiry = $this->render($Template, array('data' => $data));
        return $html_productdinquiry;
    }

    public function generatePagination($pagination_param, $themename)
    {
        $paginationData                = array();
        $paginationData['pLinks']      = $pLinks      = $pagination_param['linksPerPage'];
        $paginationData['pMids']       = $pMids       = $pagination_param['midRange'];
        $paginationData['pTot']        = $pTot        = $pagination_param['pTot'];
        $paginationData['pSel']        = $pSel        = $pagination_param['pageno'];
        $paginationData['url']         = $url         = $pagination_param['current_url'];
        $paginationData['total_count'] = $total_count = $pagination_param['total_count'];
        $paginationData['offset']      = $offset      = $pagination_param['offset'];
        $paginationData['limit']       = $limit       = $pagination_param['limit'];

        $Template = 'CatalogueBundle:' . $themename . ':category/_pagination.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:category/_pagination.html.twig';
        }
        $html_pagination = $this->renderView($Template, array('paginationData' => $paginationData));
        return $html_pagination;
    }

    public function generateShowItem($SiteData, $limit = '', $isShow = true)
    {
        $themename                   = $SiteData['themename'];
        $showItemData                = array();
        $showItemData['itemPerPage'] = $SiteData['category_listbox_style']['product_item_per_page'];

        $Template = 'CatalogueBundle:' . $themename . ':category/_showitems.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:category/_showitems.html.twig';
        }
        $html_showitem = $this->renderView($Template, array('showItemData' => $showItemData, 'limit' => $limit));
        return $html_showitem;
    }

    public function getDataForBreadcrumTitle($data)
    {
        $breadcrumb_parent_title = '';
        if (!empty($data)) {
            $page                  = $data['page'];
            $categoryData          = $data['categroy'];            
            $SiteSetting           = $data['SiteSetting'];
            $baseUrl               = $data['baseUrl'];
            //$cate_url              = $baseUrl . 'c/' . $categoryData->getSlug();            
            //$child_parent_category = $this->getRecursiveSubcateoryDataChildToGrandParents($categoryData->getParentId(), $SiteSetting['langId']);
            $cate_url              = $baseUrl . 'c/' . $categoryData['slug'];            
            $child_parent_category = $this->getRecursiveSubcateoryDataChildToGrandParents($categoryData['parentId'], $SiteSetting['langRefId']);
            if (!empty($child_parent_category)) {
                if (!empty($child_parent_category['parent_cat'])) {
                    $child_parent_category = array_reverse($child_parent_category['parent_cat']);
                    foreach ($child_parent_category as $catKey => $catVal) {
                        $child_cate_url = $baseUrl . 'c/' . $catVal['slug'];
                        if (!empty($catVal['name'])) {
                            $breadcrumb_parent_title .= '<li><a href="' . $child_cate_url . '">' . $catVal['name'] . '</a></li>';
                        }
                        $breadcrumb_parent_title .= '<li>&nbsp;›&nbsp;</li>';
                    }
                    if (!empty($categoryData['name']) && $page == 'product') {
                        $breadcrumb_parent_title .= '<li><a href="' . $cate_url . '">' . $categoryData['name'] . '</a></li>';
                        //$breadcrumb_parent_title .= '<li>&nbsp;›</li>';
                    }
                } else {
                    if (!empty($categoryData['name']) && $page == 'product') {
                        $breadcrumb_parent_title .= '<li><a href="' . $cate_url . '">' . $categoryData['name'] . '</a></li>';
                    }
                }
            } else {
                if (!empty($categoryData['name']) && $page == 'product') {
                    $breadcrumb_parent_title .= '<li><a href="' . $cate_url . '">' . $categoryData['name'] . '</a></li>';
                }
                // $breadcrumb_parent_title .= '<li>&nbsp;›</li>';
            }
        }
        return $breadcrumb_parent_title;
    }

    public function getProductListData($productData, $SiteSetting, $CommonVariable)
    {
        $userTypeEcommerceOn = '';
        $userTypeId          = $this->get('session')->get('userTypeId');
        if ($userTypeId) {
            $getUserType         = $this->getUserTypeInfo($userTypeId);
            $userTypeEcommerceOn = $getUserType->getEcommerce();
        }
        $themename      = $SiteSetting['themename'];
        $GeneralService = $this->get(GeneralService::class);
        $column         = $this->getColumnList();

        $partialTemplate = 'CatalogueBundle:' . $themename . ':category/_productlist.html.twig';
        if (!$this->get('templating')->exists($partialTemplate)) {
            $partialTemplate = 'CatalogueBundle:default:category/_productlist.html.twig';
        }
        $html = $this->renderView($partialTemplate, array('productData' => $productData, 'SiteSetting' => $SiteSetting, 'CommonVariable' => $CommonVariable, 'userTypeId' => $userTypeId, 'userTypeEcommerceOn' => $userTypeEcommerceOn, 'column' => $column, 'GeneralService' => $GeneralService));
        return $html;
    }

    public function getModuleDetailsByCommaseparatedSlug($slugs = array())
    {
        $data = array();
        if (!empty($slugs)) {
            $slugs_string = implode(",", $slugs);
            //echo $slugs_string;die;
            $module_data = array();
            $em          = $this->getDoctrine()->getManager();
            $sql         = "SELECT id,slug,module_name,current_version,sort_order FROM module WHERE status=1 AND is_deleted=0 AND slug IN ($slugs_string)";
            $statement   = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result_data = $statement->fetchAll();
            if (!empty($result_data)) {
                foreach ($result_data as $val) {
                    $slg        = $val['slug'];
                    $data[$slg] = $val;
                }
            }
        }
        return $data;
    }

    public function getWholeShippingHtml($extra_data)
    {        
        $em                         = $this->getDoctrine()->getManager();
        $session                    = new session();
        $CheckoutService            = $session->get('CheckoutService');
        $this->shippingChargesArray = array();
        $GeneralService             = $extra_data['GeneralService'];
        $ShoppingCart               = $extra_data['ShoppingCart'];
        $shipperAddress             = $extra_data['shipperAddress'];
        $SiteSetting                = $extra_data['SiteSetting'];
        $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
        $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];
        //REN02
        $coShippingOptionId   = $CheckoutService->getShippingOptionId();
        $coShippingMethodId   = $CheckoutService->getShippingMethodId();
        $coShippingMethodName = $CheckoutService->getShippingMethodName();
        $coShippingMethodSlug = $CheckoutService->getShippingMethodSlug();
        if ($shipping_calculate_base_on == 'billing_address') {
            $coShipZip     = $CheckoutService->getBilZip();
            $coShipCity    = $CheckoutService->getBilCity();
            $coShipState   = $CheckoutService->getBilState();
            $coShipCountry = $CheckoutService->getBilCountry();
        } else {
            $coShipZip     = $CheckoutService->getShipZip();
            $coShipCity    = $CheckoutService->getShipCity();
            $coShipState   = $CheckoutService->getShipState();
            $coShipCountry = $CheckoutService->getShipCountry();
        }
      
        $FoundShippingOption                = array();
        $zoneFoundArray                     = array(0);
        $methodFoundArray                   = array(0);
        $shipping_zone_ids_exists           = array();
        $returnShippingHtml['ShippingHtml'] = $returnShippingHtml['InstallmentShippingHtml'] = '';
        $returnedHtml                       = '';
        // $select_zipcode_zone                = "SELECT szm.*,m.slug,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id  FROM `shipping_zone` sz             
        //     INNER JOIN shipping_zone_zipcode szz ON sz.id = szz.shipping_zone_id AND (szz.zipcode = '" . $coShipZip . "')
        //     INNER JOIN  shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city LIKE '%" . trim($coShipCity) . "%')
        //     INNER JOIN shipping_zone_state szs ON sz.id = szs.shipping_zone_id AND (szs.state_id = '" . $coShipState . "')
        //     INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
        //     INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        //     INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.country_id = '" . $coShipCountry . "' AND sz.is_deleted=0 and sz.status=1 GROUP BY szm.id";
           
        // //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
        // $statement = $em->getConnection()->prepare($select_zipcode_zone);
        // $statement->execute();
        // $all_zip_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
        $shipping_zone_ids_exists = $this->checkShippingZonesExists($coShipZip,$coShipCity,$coShipState,$coShipCountry); //Function to Check zone wise entry exsists or not       
        if($shipping_zone_ids_exists){
            $selected_zone = "SELECT szm.*,m.slug,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM `shipping_zone` sz             
             INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
             INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
             INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.is_deleted=0 and sz.status=1 AND sz.id in (".implode(',',$shipping_zone_ids_exists).") GROUP BY szm.id";            $statement = $em->getConnection()->prepare($selected_zone);
            $statement->execute();
            $all_shipping_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);                          
            $shipping_method_id_arr = array();
            $method_id = array();
            if ($all_shipping_zones) {
                foreach ($all_shipping_zones as $key => $value) {
                    if (!empty($value['options_data'])) {
                        $mOptions              = json_decode($value['options_data']);
                        $sm_shipping_method_id = $value['sm_shipping_method_id'];
                        $module_name           = $value['module_name'];
                        $module_id             = $value['module_id'];
                        $shipping_id_arr[] = $value['shipping_zone_id'];
                        $method_id[] = $value['method_id'];
                        $slug_arr[] = $value['slug'];
                        $options_data_arr[] = $value['options_data'];
                        $shipping_method_id_arr[] = $value['sm_shipping_method_id'];
                        $extra_data            = array('ShoppingCart' => $ShoppingCart, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'shipperAddress' => $shipperAddress, 'sm_shipping_method_id' => $sm_shipping_method_id);
                        $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_data);
                        //Made changes for display installment in checkout page -REN11--START
                        $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
                        $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
                        //Made changes for display installment in checkout page -REN11--END
                        $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);

                        // if (!empty($returnedHtml)) {
                        //     array_push($methodFoundArray, $value['method_id']);
                        // }
                    }
                }
            }
        }
        $this->setChekcoutServiceSession();
        return $returnShippingHtml;
        //Ashley Template change,remove city from shipping calculation --REMOVECITY --START
        /*$commaseptared_method_id = implode(",", $methodFoundArray);
        $select_city_zone = "SELECT szm.*,m.slug,count(szz.id) as mZip,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM  shipping_zone_method szm
        INNER JOIN  `shipping_zone` sz  ON sz.id=szm.shipping_zone_id
        LEFT JOIN shipping_zone_zipcode szz ON szz.shipping_zone_id=sz.id
        INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1'
        INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id)
        INNER JOIN shipping_zone_state szs ON sz.id = szs.shipping_zone_id AND (szs.state_id = $state_id)
        WHERE szm.is_enabled=1 AND szm.is_deleted=0  AND sz.is_deleted=0 AND sz.status=1  AND szm.method_id NOT IN ($commaseptared_method_id) GROUP BY szm.id HAVING  mZip=0";
        $statement = $em->getConnection()->prepare($select_city_zone);
        $statement->execute();
        $all_city_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if ($all_city_zones) {
        foreach ($all_city_zones as $key => $value) {
        if (!empty($value['options_data'])) {
        $method_id = $value['method_id'];
        if (!in_array($method_id, $methodFoundArray)) {
        $mOptions = json_decode($value['options_data']);
        $sm_shipping_method_id = $value['sm_shipping_method_id'];
        $module_name = $value['module_name'];
        $module_id = $value['module_id'];
        $extra_param = array('addressDeliveryCharge' => $addressDeliveryCharge, 'shipperAddress' => $shipperAddress, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'shipping_method_id' => $shipping_method_id, 'method_name' => $method_name, 'session_shipping_options_id' => $session_shipping_options_id, 'sm_shipping_method_id' => $sm_shipping_method_id, 'module_name' => $module_name, 'module_id' => $module_id);
        $returnedHtml = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_param);
        //Made changes for display installment in checkout page -REN11--START
        $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
        $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
        //Made changes for display installment in checkout page -REN11--END
        $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);
        if (!empty($returnedHtml)) {
        array_push($methodFoundArray, $value['method_id']);
        }
        }
        }
        }
        }*/
        //Ashley Template change,remove city from shipping calculation --REMOVECITY --END

        //REN08 : start - Shipping By City Added - Dt: 06/08/2021
        // $commaseptared_method_id = implode(",", $methodFoundArray);
        // $select_city_zone                = "SELECT szm.*,m.slug,count(szz.id) as mZip,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id  FROM `shipping_zone` sz             
        //         LEFT JOIN shipping_zone_zipcode szz ON sz.id = szz.shipping_zone_id
        //         INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city LIKE '%" . trim($coShipCity) . "%')
        //         INNER JOIN shipping_zone_state szs ON sz.id = szs.shipping_zone_id AND (szs.state_id = '" . $coShipState . "')
        //         INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
        //         INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        //         INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.country_id = '" . $coShipCountry . "' AND sz.is_deleted=0 and sz.status=1 AND szm.method_id NOT IN ($commaseptared_method_id) GROUP BY szm.id HAVING  mZip=0";
         

        // //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
        // $statement = $em->getConnection()->prepare($select_city_zone);
        // $statement->execute();
        // $all_city_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // if ($all_city_zones) {
        //     foreach ($all_city_zones as $key => $value) {
        //         if (!empty($value['options_data'])) {
        //             $method_id = $value['method_id'];
        //             if (!in_array($method_id, $methodFoundArray)) {
        //                 $mOptions              = json_decode($value['options_data']);
        //                 $sm_shipping_method_id = $value['sm_shipping_method_id'];
        //                 $module_name           = $value['module_name'];
        //                 $module_id             = $value['module_id'];
        //                 $extra_data            = array('ShoppingCart' => $ShoppingCart, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'shipperAddress' => $shipperAddress, 'sm_shipping_method_id' => $sm_shipping_method_id);
        //                 $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_data);
        //                 //Made changes for display installment in checkout page -REN11--START
        //                 $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
        //                 $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
        //                 //Made changes for display installment in checkout page -REN11--END
        //                 $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);
        //                 if (!empty($returnedHtml)) {
        //                     array_push($methodFoundArray, $value['method_id']);
        //                 }
        //             }                    
        //         }
        //     }
        // }
        //REN08 : end 
        // $commaseptared_method_id = implode(",", $methodFoundArray);
        // $select_state_zone       = "SELECT szm.*,m.slug,count(szz.id) as mzip,count(szc.id) as mcity,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM `shipping_zone` sz
        //                       LEFT JOIN shipping_zone_zipcode szz on szz.shipping_zone_id=sz.id
        //                       LEFT JOIN  shipping_zone_city szc ON sz.id = szc.shipping_zone_id
        //                       INNER JOIN shipping_zone_state szs ON sz.id = szs.shipping_zone_id AND (szs.state_id = '" . $coShipState . "')
        //                       INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0 
        //                       INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        //                       INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1'
        //                       WHERE sz.country_id ='" . $coShipCountry . "' AND sz.is_deleted=0 and sz.status=1 AND szm.method_id NOT IN ($commaseptared_method_id)  GROUP BY szm.id
        //                       HAVING mzip=0 AND mcity=0"; //LEFT JOIN shipping_zone_city szc on szc.shipping_zone_id=sz.id //count(szc.id) as mcity //mcity=0 and //REMOVE CITY
        // $statement = $em->getConnection()->prepare($select_state_zone);
        // $statement->execute();
        // $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // if ($all_state_zones) {
        //     foreach ($all_state_zones as $key => $value) {
        //         if (!empty($value['options_data'])) {
        //             $method_id = $value['method_id'];
        //             if (!in_array($method_id, $methodFoundArray)) {
        //                 $mOptions              = json_decode($value['options_data']);
        //                 $sm_shipping_method_id = $value['sm_shipping_method_id'];
        //                 $module_name           = $value['module_name'];
        //                 $module_id             = $value['module_id'];
        //                 $extra_param           = array('shipperAddress' => $shipperAddress, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'sm_shipping_method_id' => $sm_shipping_method_id, 'module_name' => $module_name, 'module_id' => $module_id);
        //                 $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_param);
        //                 //Made changes for display installment in checkout page -REN11--START
        //                 $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
        //                 $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
        //                 //Made changes for display installment in checkout page -REN11--END
        //                 $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);
        //                 if (!empty($returnedHtml)) {
        //                     array_push($methodFoundArray, $value['method_id']);
        //                 }
        //             }
        //         }
        //     }
        // }
        // $commaseptared_method_id = implode(",", $methodFoundArray);
        // $select_country_zone     = "SELECT szm.*,m.slug,count(szs.id) as mstate,count(szz.id) as mzip,count(szc.id) as mcity,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM `shipping_zone` sz 
        //                         LEFT JOIN shipping_zone_state szs on szs.shipping_zone_id=sz.id
        //                         LEFT JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id
        //                         LEFT JOIN shipping_zone_zipcode szz on szz.shipping_zone_id=sz.id
        //                         INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
        //                         INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        //                         INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.country_id='" . $coShipCountry . "' AND sz.is_deleted=0 and sz.status=1 AND szm.method_id NOT IN (" . $commaseptared_method_id . ")
        //                         GROUP BY szm.id
        //                         HAVING mstate=0 AND mzip=0 AND mcity=0"; //LEFT JOIN shipping_zone_city szc on szc.shipping_zone_id=sz.id //count(szc.id) as mcity //mcity=0 and //REMOVECITY
        // $statement = $em->getConnection()->prepare($select_country_zone);
        // $statement->execute();
        // $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // if ($all_country_zones) {
        //     foreach ($all_country_zones as $key => $value) {
        //         if (!empty($value['options_data'])) {
        //             $method_id = $value['method_id'];
        //             if (!in_array($method_id, $methodFoundArray)) {
        //                 $sm_shipping_method_id = $value['sm_shipping_method_id'];
        //                 $mOptions              = json_decode($value['options_data']);
        //                 $module_name           = $value['module_name'];
        //                 $module_id             = $value['module_id'];
        //                 $extra_param           = array('shipperAddress' => $shipperAddress, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'sm_shipping_method_id' => $sm_shipping_method_id, 'module_name' => $module_name, 'module_id' => $module_id);
        //                 $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_param);
        //                 //Made changes for display installment in checkout page -REN11--START
        //                 $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
        //                 $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
        //                 //Made changes for display installment in checkout page -REN11--END
        //                 $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);
        //                 if (!empty($returnedHtml)) {
        //                     array_push($methodFoundArray, $value['method_id']);
        //                 }
        //             }
        //         }
        //     }
        // }
        // $select_world_zone = "SELECT szm.*,m.slug,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM `shipping_zone` sz
        // INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
        // INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        // INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.is_deleted=0 and sz.status=1 AND sz.country_id IS NULL ";
        // $statement = $em->getConnection()->prepare($select_world_zone);
        // $statement->execute();
        // $all_world_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        // if ($all_world_zones) {
        //     foreach ($all_world_zones as $key => $value) {
        //         if (!empty($value['options_data'])) {
        //             $method_id = $value['method_id'];
        //             if (!in_array($method_id, $methodFoundArray)) {
        //                 $mOptions              = json_decode($value['options_data']);
        //                 $sm_shipping_method_id = $value['sm_shipping_method_id'];
        //                 $module_name           = $value['module_name'];
        //                 $module_id             = $value['module_id'];
        //                 $extra_param           = array('shipperAddress' => $shipperAddress, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'sm_shipping_method_id' => $sm_shipping_method_id, 'module_name' => $module_name, 'module_id' => $module_id);
        //                 $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_param);
        //                 //Made changes for display installment in checkout page -REN11--START
        //                 $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
        //                 $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
        //                 //Made changes for display installment in checkout page -REN11--END
        //                 $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id']);
        //                 if (!empty($returnedHtml)) {
        //                     array_push($methodFoundArray, $value['method_id']);
        //                 }
        //             }
        //         }
        //     }
        // }
        // $CheckoutService = $session->get('CheckoutService');
        // // SET DATA INTO CHECKLIST SERVICE : REN02
        // $checkoutData = array();
        // //REN02
        // $coShippingOptionId   = $CheckoutService->getShippingOptionId();
        // $coShippingMethodId   = $CheckoutService->getShippingMethodId();
        // $coShippingMethodName = $CheckoutService->getShippingMethodName();
        // $coShipZip            = $CheckoutService->getShipZip();
        // $coShipCity           = $CheckoutService->getShipCity();
        // $coShipState          = $CheckoutService->getShipState();
        // $coShipCountry        = $CheckoutService->getShipCountry();
        // if (!empty($this->shippingChargesArray)) {
        //     if (empty($coShippingMethodId) && empty($coShippingOptionId)) {
        //         $checkoutData['shippingMethodId']   = $this->shippingChargesArray[0]['shipping_method_id'];
        //         $checkoutData['shippingMethodName'] = $this->shippingChargesArray[0]['shipping_method_name'];
        //         $checkoutData['shippingMethodSlug'] = $this->shippingChargesArray[0]['shipping_method_slug'];
        //         $checkoutData['shippingLabel']      = $this->shippingChargesArray[0]['shipping_label'];
        //         $checkoutData['shippingCharge']     = $this->shippingChargesArray[0]['shipping_charge'];
        //         $checkoutData['shippingOptionId']   = $this->shippingChargesArray[0]['shipping_options_id'];
        //     } else if (!empty($coShippingMethodId) && !empty($coShippingOptionId)) {
        //         $flag_localshipping = false;
        //         foreach ($this->shippingChargesArray as $shipKey => $shipValue) {
        //             if (($shipValue['shipping_method_id'] == $coShippingMethodId) && ($shipValue['shipping_options_id'] == $coShippingOptionId)) {
        //                 $flag_localshipping             = true;
        //                 $checkoutData['shippingCharge'] = $shipValue['shipping_charge'];
        //                 $this->updateCheckoutData($checkoutData);
        //             }
        //         }
        //         if ($flag_localshipping == false) {
        //             $checkoutData['shippingMethodId']   = $this->shippingChargesArray[0]['shipping_method_id'];
        //             $checkoutData['shippingMethodName'] = $this->shippingChargesArray[0]['shipping_method_name'];
        //             $checkoutData['shippingMethodSlug'] = $this->shippingChargesArray[0]['shipping_method_slug'];
        //             $checkoutData['shippingLabel']      = $this->shippingChargesArray[0]['shipping_label'];
        //             $checkoutData['shippingCharge']     = $this->shippingChargesArray[0]['shipping_charge'];
        //             $checkoutData['shippingOptionId']   = $this->shippingChargesArray[0]['shipping_options_id'];
        //         }
        //     }
        //     $this->updateCheckoutData($checkoutData);
        // } else {
        //     $checkoutData['shippingMethodId']   = "";
        //     $checkoutData['shippingMethodName'] = "";
        //     $checkoutData['shippingMethodSlug'] = "";
        //     $checkoutData['shippingLabel']      = "";
        //     $checkoutData['shippingCharge']     = 0;
        //     $checkoutData['shippingOptionId']   = "";
        //     $this->updateCheckoutData($checkoutData);
        // }
        //$this->updateCheckoutData($checkoutData);
        // SET DATA INTO CHECKLIST SERVICE : REN02
        return $returnShippingHtml;
    }

    public function returnShippingHTML($ShoppingCart, $slug, $options_data, $extra_param)
    {
        $json_decode_shipping_data      = $options_data;
        $shipping_html['shipping_html'] = $shipping_html['installment_shipping_html'] = '';
        $session                        = new Session();
        if (!empty($options_data) && $slug == 'localshipping') {
            $local_shipping_options_html = $this->getLocalShippingHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
        }
        if (!empty($options_data) && $slug == 'instorepickup') {
            $local_shipping_options_html = $this->getInstockPickupHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
        }
        if (!empty($options_data) && $slug == 'fedex') {            
            $local_shipping_options_html = $this->getFedexShippingHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);           
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
        }
        if (!empty($options_data) && $slug == 'freeshipping') {
            $json_decode_shipping_data   = $options_data;
            $local_shipping_options_html = $this->getFreeShippingHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
            return $shipping_html;
        }
        if (!empty($options_data) && $slug == 'usps') {
            $json_decode_shipping_data   = $options_data;
            $local_shipping_options_html = $this->getUSPSShippingHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
        }
        if (!empty($options_data) && $slug == 'ups') {
            $json_decode_shipping_data   = $options_data;
            $local_shipping_options_html = $this->getUPSShippingHtml($ShoppingCart, $json_decode_shipping_data, $extra_param);
            //Made changes for display installment in checkout page -REN11--START
            $shipping_html['shipping_html'] .= $local_shipping_options_html['shipping_options_html'];
            $shipping_html['installment_shipping_html'] .= $local_shipping_options_html['installment_shipping_options_html'];
            //Made changes for display installment in checkout page -REN11--END
        }
        return $shipping_html;
    }

    public function getLocalShippingHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $GeneralService                                  = $this->get(GeneralService::class);
        $returnLocalShippingArr                          = array();
        $returnLocalShippingArr['shipping_options_html'] = $returnLocalShippingArr['installment_shipping_options_html'] = '';
        $shipping_data                                   = array();
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $returnLocalShippingArr;
        } else {
            $session = new Session();

            if (empty($extra_param['module_id'])) {
                $localshipping_module_setting = $this->getModuleSettingBySlug('localshipping');
                $module_id                    = $localshipping_module_setting->getModule()->getId();
                $mothod_name                  = $localshipping_module_setting->getModule()->getModuleName();
            } else {
                $module_id   = $extra_param['module_id'];
                $mothod_name = $extra_param['module_name'];
            }
            $shipping_method_id = $extra_param['sm_shipping_method_id'];
            if (empty($shipping_method_id)) {
                $shipping_method_data = $this->getEnalbedShippingMethods($module_id);
                if (!empty($shipping_method_data)) {
                    $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
                }
            }
            $SiteSetting                = $extra_param['SiteSetting'];
            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];
            $GeneralService             = $extra_param['GeneralService'];
            $langCode                   = $session->get('front_lang_code');
            //REN02
            $CheckoutService = $session->get('CheckoutService');
            if ($shipping_calculate_base_on == 'billing_address') {
                $coShipZip     = $CheckoutService->getBilZip();
                $coShipCity    = $CheckoutService->getBilCity();
                $coShipState   = $CheckoutService->getBilState();
                $coShipCountry = $CheckoutService->getBilCountry();
            } else {
                $coShipZip     = $CheckoutService->getShipZip();
                $coShipCity    = $CheckoutService->getShipCity();
                $coShipState   = $CheckoutService->getShipState();
                $coShipCountry = $CheckoutService->getShipCountry();
            }
            $coShippingMethodId = $CheckoutService->getShippingMethodId();
            $coShippingCharge   = $CheckoutService->getShippingCharge();
            $coShippingOptionId = $CheckoutService->getShippingOptionId();

            $langCode                          = $session->get('front_lang_code');
            $slug                              = 'localshipping';
            $label                             = '';
            $shipping_options_id               = '';
            $shipping_charge_with_shipping_tax = '';
            $shipping_method_name              = '';
            $shipping_method_slug              = '';
            $shipping_label                    = '';
            $option_description                = '';
            foreach ($json_decode_shipping_data as $json_data) {
                $option_label                 = '';
                $shipping_option_id_available = $this->checkShippingOptionAvailability($json_data->option_id);
                if ($shipping_option_id_available == 1) {
                    if ($json_data->status == 1) {
                        if ($json_data->based_on == 'by_percentage') {
                            $percentage = str_replace('%', '',$json_data->cost->percentage);
                            $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $cart['totalcart'] * $percentage / 100);
                            //$shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $cart['totalcart'] * $json_data->cost->percentage / 100);
                            
                            if (!empty($cart)) {
                                // $shipping_tax   = $cart['totalshipping_taxrate'];
                                // $shipping_tax   = ($shippingcharge * $shipping_tax / 100);
                                // $shippingcharge = $shippingcharge + $shipping_tax;
                            }
                            if ($shippingcharge < $json_data->cost->min) {
                                $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost->min);
                            }
                            if ($shippingcharge > $json_data->cost->max) {
                                $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost->max);
                            }
                        } else if ($json_data->based_on == 'by_cost') {
                            $shippingcharge = $GeneralService->getPriceRoundAmount('shipping', $json_data->cost);
                            if (!empty($cart)) {
                                // $shipping_tax   = $cart['totalshipping_taxrate'];
                                // $shipping_tax   = ($shippingcharge * $shipping_tax / 100);
                                // $shippingcharge = $shippingcharge + $GeneralService->getPriceRoundAmount('tax', $shipping_tax);
                            }
                        } else if ($json_data->based_on == 'by_weight') {
                            //R002
                            $weight = $cart['totalweight'];
                            $weight = $this->convertWeight($weight, 'lb', 'lb');
                            //R002
                            $shippingcharge = $weight * $GeneralService->getPriceRoundAmount('shipping', $json_data->cost);
                            if (!empty($cart)) {
                                // $shipping_tax   = $cart['totalshipping_taxrate'];
                                // $shipping_tax   = ($shippingcharge * $shipping_tax / 100);
                                // $shippingcharge = $shippingcharge + $shipping_tax;
                            }
                        }
                        $option_description = $json_data->option_label;
                        if (isset($json_data->option_label) && !empty($json_data->option_label)) {
                            if (is_object($json_data->option_label)) {
                                $option_label = (isset($json_data->option_label->$langCode) && !empty($json_data->option_label->$langCode)) ? $json_data->option_label->$langCode : '';
                            } else {
                                $option_label = $json_data->option_label;
                            }
                        } else {
                            $option_label = $json_data->option_label_original;
                        }
                       
                        $shipping_data[$json_data->option_id] = array('option_label' => $option_label, 'option_description' => $json_data->option_description, 'option_label_original' => $json_data->option_label_original, 'delivery_days' => $json_data->delivery_days, 'shippingcharge' => round($shippingcharge, 2), 'error' => '', 'is_default' => $json_data->is_default);
                        $this->shippingChargesArray[]         = array(
                            'shipping_method_id'   => $shipping_method_id,
                            'shipping_charge'      => $shippingcharge,
                            'shipping_label'       => $option_label,
                            'shipping_method_slug' => $slug,
                            'shipping_options_id'  => $json_data->option_id,
                            'shipping_method_name' => $mothod_name . '(' . $option_label . ')',
                        );
                    }
                }
            }
            if (!empty($shipping_data)) {
                //Made changes for display installment in checkout page -REN11--START
                $returnLocalShippingArr['shipping_options_html'] .= '<div class="row">';
                $returnLocalShippingArr['installment_shipping_options_html'] .= '<div class="col-xs-12 col-sm-12 col-md-12 ">';
                //Made changes for display installment in checkout page -REN11--END
                foreach ($shipping_data as $key => $value) {
                    $check_is_default = $value['is_default'];
                    if (isset($value['option_label']) && !empty($value['option_label'])) {
                        if (is_object($value['option_label'])) {
                            $label = (isset($value['option_label']->$langCode) && !empty($value['option_label']->$langCode)) ? $value['option_label']->$langCode : '';
                        } else {
                            $label = $value['option_label'];
                        }
                    } else {
                        $label = $value['option_label_original'];
                    }
                    if (isset($value['option_description']) && !empty($value['option_description'])) {
                        if (is_object($value['option_description'])) {
                            $option_description = (isset($value['option_description']->$langCode) && !empty($value['option_description']->$langCode)) ? $value['option_description']->$langCode : '';
                        } else {
                            $option_description = $value['option_description'];
                        }
                    }
                    $option_description                = (!empty($option_description)) ? $option_description : $label;
                    $shipping_charge_with_shipping_tax = $value['shippingcharge'];
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $is_checked                        = '';
                    if (!empty($coShippingOptionId)) {
                        if ($key == $coShippingOptionId) {
                            $is_checked = ' checked="checked" ';
                        }
                    } else {
                        if ($check_is_default == 1) {
                            $is_checked           = ' checked="checked" ';
                            $shipping_options_id  = $key;
                            $shipping_method_name = $mothod_name . '(' . $label . ')';
                            $shipping_method_slug = $slug;
                            $shipping_label       = $label;

                            //REN02
                            $checkoutData                       = array();
                            $checkoutData['shippingMethodId']   = $shipping_method_id;
                            $checkoutData['shippingMethodName'] = $shipping_method_name;
                            $checkoutData['shippingMethodSlug'] = $shipping_method_slug;
                            $checkoutData['shippingLabel']      = $shipping_label;
                            $checkoutData['shippingCharge']     = $shipping_charge_with_shipping_tax;
                            $checkoutData['shippingOptionId']   = $shipping_options_id;
                            $this->updateCheckoutData($checkoutData);
                            //REN02
                        }
                    }
                    //Made changes for display installment in checkout page -REN11--START
                    $returnLocalShippingArr['shipping_options_html'] .= '<div class="c-radio col-xs-12 col-sm-12 col-md-12">
                                                            <input data-radiobtnshippingslug="' . $slug . '" data-shipping-method="' . $mothod_name . '(' . $label . ')' . '" data-shipping-slug="' . $slug . '"  value="' . $key . '" ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="localshipping_option_' . $key . '" data-label="' . $label . '" class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" data-inst="localshipping" name="radio_shipping_method_name"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '"><label for="localshipping_option_' . $key . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $label . '</strong> </label><strong class="pull-right"> ' . $shippingcharge . '</strong>&nbsp;<a class="popovers" data-container="body" data-trigger="hover" data-placement="top" data-toggle="popover" data-html="true" data-content="<table><tr><td>' . $label . '</td></tr><tr><td>' . $option_description . '</td></tr></table>" data-original-title="' . $option_description . '" title="' . $option_description . '"><span aria-hidden="true" class="icon-info"></span></a></div>';
                    $returnLocalShippingArr['installment_shipping_options_html'] .= '<div class="c-radio col-xs-12 col-sm-12 col-md-12">
                                                            <input data-radiobtnshippingslug="' . $slug . '" data-shipping-method="' . $mothod_name . '(' . $label . ')' . '" data-shipping-slug="' . $slug . '"  value="' . $key . '" ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="installment_localshipping_option_' . $key . '" data-label="' . $label . '" class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" data-inst="localshipping" name="radio_shipping_method_name_installment"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '"><label for="installment_localshipping_option_' . $key . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $label . '</strong>&nbsp;<a class="popovers" data-container="body" data-trigger="hover" data-placement="top" data-toggle="popover" data-html="true" data-content="<table><tr><td>' . $this->get('translator')->trans('front_local_shipping') . '</td></tr><tr><td>' . $option_description . '</td></tr></table>" data-original-title="' . $option_description . '" title="' . $option_description . '"><span aria-hidden="true" class="icon-info"></span></a> </label><strong class="pull-right"> ' . $shippingcharge . '</strong></div>';
                }
                $returnLocalShippingArr['shipping_options_html'] .= '</div>';
                $returnLocalShippingArr['installment_shipping_options_html'] .= '</div>';
                //Made changes for display installment in checkout page -REN11--END
            }
        }

        return $returnLocalShippingArr;
    }

    public function getFreeShippingHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $retrunShippingArr                                      = array();
        $retrunShippingArr['installment_shipping_options_html'] = $retrunShippingArr['shipping_options_html'] = '';
        $shipping_data                                          = array();
        $ShoppingCart                                           = $cart;
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $retrunShippingArr;
        } else {
            $session = new Session();
            if (empty($extra_param['module_id'])) {
                $freeshipping_module_setting = $this->getModuleSettingBySlug('freeshipping');
                $module_id                   = $freeshipping_module_setting->getModule()->getId();
                $mothod_name                 = $freeshipping_module_setting->getModule()->getModuleName();
            } else {
                $module_id   = $extra_param['module_id'];
                $mothod_name = $extra_param['module_name'];
            }

            $shipping_method_id = $extra_param['sm_shipping_method_id'];
            if (empty($shipping_method_id)) {
                $shipping_method_data = $this->getEnalbedShippingMethods($module_id);
                if (!empty($shipping_method_data)) {
                    $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
                }
            }
            $SiteSetting    = $extra_param['SiteSetting'];
            $GeneralService = $extra_param['GeneralService'];
            $langCode       = $session->get('front_lang_code');
            $slug           = 'freeshipping';
            $label          = '';
            //REN02

            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];

            $CheckoutService = $session->get('CheckoutService');
            if ($shipping_calculate_base_on == 'billing_address') {
                $coShipZip     = $CheckoutService->getBilZip();
                $coShipCity    = $CheckoutService->getBilCity();
                $coShipState   = $CheckoutService->getBilState();
                $coShipCountry = $CheckoutService->getBilCountry();
            } else {
                $coShipZip     = $CheckoutService->getShipZip();
                $coShipCity    = $CheckoutService->getShipCity();
                $coShipState   = $CheckoutService->getShipState();
                $coShipCountry = $CheckoutService->getShipCountry();
            }

            $coShippingMethodId = $CheckoutService->getShippingMethodId();
            $coShippingCharge   = $CheckoutService->getShippingCharge();
            $coShippingOptionId = $CheckoutService->getShippingOptionId();

            $shipping_options_id               = '';
            $shipping_charge_with_shipping_tax = '';
            $shipping_method_name              = '';
            $shipping_method_slug              = '';
            $shipping_label                    = '';

            $shipping_method_slug    = $slug;
            $free_shipping_zone_data = array();
            $free_shipping_zone_data = $json_decode_shipping_data;
            $show_free_shipping      = false;
            if (!empty($free_shipping_zone_data)) {
                $free_shipping_zone_data           = (array) ($free_shipping_zone_data);
                $label                             = (isset($free_shipping_zone_data['title']->$langCode) && !empty($free_shipping_zone_data['title']->$langCode)) ? $free_shipping_zone_data['title']->$langCode : 'Free Shipping';
                $shipping_charge_with_shipping_tax = 0;
                $is_checked                        = '';
                $freeshipping_option               = isset($free_shipping_zone_data['option']) ? $free_shipping_zone_data['option'] : "";
                if (!empty($coShippingOptionId)) {
                    if ($freeshipping_option == $coShippingOptionId) {
                        $is_checked = ' checked="checked" ';
                    }
                }
                $shippingcharge = $shipping_charge_with_shipping_tax;

                if ($freeshipping_option == 'coupon' && $session->has('applied_coupon')) {
                    $applied_coupon = $session->get('applied_coupon');
                    foreach ($applied_coupon as $coupon_data) {
                        if ($coupon_data['free_shipping'] == 'Yes') {
                            $show_free_shipping = true;
                        }
                    }
                } else if ($freeshipping_option == 'min_amount') {
                    $free_shipping_min_amount = $free_shipping_zone_data['free_shipping_min_amount'];
                    if ($free_shipping_min_amount == 0) {
                        $show_free_shipping = true;
                    } else if ($ShoppingCart['totalcart'] >= $free_shipping_min_amount) {
                        $show_free_shipping = true;
                    }
                } else if ($freeshipping_option == 'either') {
                    // min_amount may greater > totalcart or apply coupon
                    $free_shipping_min_amount = $free_shipping_zone_data['free_shipping_min_amount'];
                    if ($free_shipping_min_amount == 0) {
                        $show_free_shipping = true;
                    } else if ($ShoppingCart['totalcart'] >= $free_shipping_min_amount) {
                        $show_free_shipping = true;
                    } else if ($session->has('applied_coupon')) {
                        $applied_coupon = $session->get('applied_coupon');
                        foreach ($applied_coupon as $coupon_data) {
                            if ($coupon_data['free_shipping'] == 'Yes') {
                                $show_free_shipping = true;
                            }
                        }
                    }
                } else if ($freeshipping_option == 'both') {
                    // min_amount may greater > totalcart and apply coupon
                    $free_shipping_min_amount = $free_shipping_zone_data['free_shipping_min_amount'];
                    if ($free_shipping_min_amount == 0 && $session->has('applied_coupon')) {
                        $applied_coupon = $session->get('applied_coupon');
                        foreach ($applied_coupon as $coupon_data) {
                            if ($coupon_data['free_shipping'] == 'Yes') {
                                $show_free_shipping = true;
                            }
                        }
                    } else if ($ShoppingCart['totalcart'] >= $free_shipping_min_amount && $session->has('applied_coupon')) {
                        $applied_coupon = $session->get('applied_coupon');
                        foreach ($applied_coupon as $coupon_data) {
                            if ($coupon_data['free_shipping'] == 'Yes') {
                                $show_free_shipping = true;
                            }
                        }
                    }
                } else if ($freeshipping_option == 'notapplication') {
                    $show_free_shipping = true;
                }
                if ($show_free_shipping == true) {
                    $this->shippingChargesArray[] = array(
                        'shipping_method_id'   => $shipping_method_id,
                        'shipping_charge'      => $shippingcharge,
                        'shipping_label'       => $label,
                        'shipping_method_slug' => $slug,
                        'shipping_options_id'  => $freeshipping_option,
                        'shipping_method_name' => $mothod_name,
                    );
                    $shipping_charge_with_shipping_tax = 0;
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $shipping_method_name              = $mothod_name;
                    $shipping_label                    = $label;
                    //Made changes for display installment in checkout page -REN11--START
                    $retrunShippingArr['shipping_options_html'] .= '<div class="row">';
                    $retrunShippingArr['shipping_options_html'] .= '<div class="c-radio col-xs-12 col-sm-12 col-md-12"><input data-radiobtnshippingslug="' . $slug . '" data-for="radio_shipping_method_name" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $freeshipping_option . '" ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="freeshipping_option" data-label="' . $label . '" class="c-radio show_shipping_charge" name="radio_shipping_method_name" data-inst="freeshipping" type="radio" data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '"><label for="freeshipping_option"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $label . '</strong> </label><strong class="pull-right">' . $shippingcharge . ' </strong></div>';
                    $retrunShippingArr['shipping_options_html'] .= '</div>';
                    $retrunShippingArr['installment_shipping_options_html'] .= '<div class="col-xs-12 col-sm-12 col-md-12 ">';
                    $retrunShippingArr['installment_shipping_options_html'] .= '<div class="c-radio col-xs-12 col-sm-12 col-md-12"><input data-radiobtnshippingslug="' . $slug . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $freeshipping_option . '" ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="installment_freeshipping_option" data-label="' . $label . '" class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" data-inst="freeshipping" name="radio_shipping_method_name_installment"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '"><label for="installment_freeshipping_option"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $label . '</strong> </label><strong class="pull-right">' . $shippingcharge . ' </strong></div>';
                    $retrunShippingArr['installment_shipping_options_html'] .= '</div>';
                    //Made changes for display installment in checkout page -REN11--END
                }
            }
        }
        return $retrunShippingArr;
    }

    public function getFedexShippingHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $returnFedexArr                          = array();
        $installment_radio_button                = '';
        $returnFedexArr['shipping_options_html'] = $returnFedexArr['installment_shipping_options_html'] = '';
        $ShoppingCart                            = $cart;
        $shipping_data                           = array();
        $SiteSetting                             = $extra_param['SiteSetting'];
        $langCode                                = $this->getFrontLanguage($SiteSetting);
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $returnFedexArr;
        } else {
            $session = new Session();
            if (empty($extra_param['module_id'])) {
                $fedexshipping_module_setting = $this->getModuleSettingBySlug('fedex');
                $module_id                    = $fedexshipping_module_setting->getModule()->getId();
                $mothod_name                  = $fedexshipping_module_setting->getModule()->getModuleName();
            } else {
                $module_id   = $extra_param['module_id'];
                $mothod_name = $extra_param['module_name'];
            }
            $shipping_method_id = $extra_param['sm_shipping_method_id'];
            if (empty($shipping_method_id)) {
                $shipping_method_data = $this->getEnalbedShippingMethods($module_id);
                if (!empty($shipping_method_data)) {
                    $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
                }
            }
            $SiteSetting                       = $extra_param['SiteSetting'];
            $GeneralService                    = $extra_param['GeneralService'];
            $slug                              = 'fedex';
            $label                             = '';
            $shipping_charge_with_shipping_tax = '';
            $shipping_label                    = '';
            //REN02
            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];

            $CheckoutService = $session->get('CheckoutService');
            if ($shipping_calculate_base_on == 'billing_address') {
                $coShipZip     = $CheckoutService->getBilZip();
                $coShipCity    = $CheckoutService->getBilCity();
                $coShipState   = $CheckoutService->getBilState();
                $coShipCountry = $CheckoutService->getBilCountry();
            } else {
                $coShipZip     = $CheckoutService->getShipZip();
                $coShipCity    = $CheckoutService->getShipCity();
                $coShipState   = $CheckoutService->getShipState();
                $coShipCountry = $CheckoutService->getShipCountry();
            }

            $coShippingMethodId = $CheckoutService->getShippingMethodId();
            $coShippingCharge   = $CheckoutService->getShippingCharge();
            $coShippingOptionId = $CheckoutService->getShippingOptionId();

            $shipperAddress            = $extra_param['shipperAddress'];
            $country_code              = 'US';
            $recipient_state_code      = 'CA';
            $recipientAddressIds       = array('country_id' => $coShipCountry, 'state_id' => $coShipState, 'city_id' => $coShipCity, 'zipcode' => $coShipZip);
            $recipient_state_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:State')->find($coShipState);
            if (!empty($recipient_state_code_data)) {
                $recipient_state_code = $recipient_state_code_data->getIsoCode();
            }

            $recipient_country_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:Country')->find($coShipCountry);
            if (!empty($recipient_country_code_data)) {
                $country_code = $recipient_country_code_data->getIsoCode();
            }

            $configured_service_type = array();
            $configured_service_type = $json_decode_shipping_data;
            if (is_numeric($coShipCity)) {
                $city_name = $this->getCityNameById($coShipCity, $langCode);
            } else {
                $city_name = $coShipCity;
            }
            $recipientAddress                           = array('country_code' => $country_code, 'state_code' => $recipient_state_code, 'city_name' => $city_name, 'zipcode' => $coShipZip);            
            $fedex_result_data                          = $this->getFedexShippingData($ShoppingCart, $shipping_method_id, $recipientAddress, $shipperAddress, $configured_service_type);            
            $fedex_front_select_box                     = '';
            $radio_button_charge                        = 0;
            $selected_store_session_shipping_options_id = 0;
            if (!empty($fedex_result_data) && !empty($fedex_result_data['delivery_data'])) {
                $fedex_result_data = $fedex_result_data['delivery_data'];
                $radio_button      = '';
                $display_block     = ' style="display:none" ';
                if ($shipping_method_id == $coShippingMethodId && $coShippingCharge > 0) {
                    $display_block = ' style = " display:block" ';
                }
                //Made changes for display installment in checkout page -REN11--START
                $returnFedexArr['shipping_options_html'] .= '<div class="row">';
                $returnFedexArr['installment_shipping_options_html'] .= '<div class="col-xs-12 col-sm-12 col-md-12 ">';
                //Made changes for display installment in checkout page -REN11--END
                //$shipping_options_html .= '<div class="pull-left">Fedex : </div>';
                $select_dropdown                               = '<div class="col-xs-12 col-sm-12 col-md-6"><select name="shipping_method" ' . $display_block . ' id="shipping_method_fedex" class="thirdparty_shipping form-control pull-left" ><option value="" data-radiobtnshippingslug="' . $slug . '">' . $this->get('translator')->trans('front_select_fedex_option') . '</option>';
                $fedex_array_key_value                         = array_values($this->fedex_service_options);
                $fedex_array_key_value                         = array_column($fedex_array_key_value, 'name', 'id');
                $shipping_charge_with_shipping_tax_store_value = 0;
                $is_radio_button_checked                       = '';

                foreach ($fedex_result_data as $key => $value) {
                    $label                             = $value['service_type'];
                    $label_name                        = $fedex_array_key_value[$label];
                    $shipping_charge_with_shipping_tax = $value['rate'];
                    if (!empty($ShoppingCart)) {
                        // $shipping_tax                      = $ShoppingCart['totalshipping_taxrate'];
                        // $shipping_tax                      = ($shipping_charge_with_shipping_tax * $shipping_tax / 100);
                        // $shipping_charge_with_shipping_tax = $shipping_charge_with_shipping_tax + $shipping_tax;
                    }
                    $shipping_charge_with_shipping_tax = $GeneralService->getPriceRoundAmount('shipping', $shipping_charge_with_shipping_tax);
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $is_checked                        = '';
                    if (!empty($coShippingOptionId)) {
                        if ($label == $coShippingOptionId) {
                            $is_checked                                    = ' selected="selected" ';
                            $is_radio_button_checked                       = ' checked="checked" ';
                            $shipping_charge_with_shipping_tax_store_value = $shipping_charge_with_shipping_tax;
                            $radio_button_charge                           = $shippingcharge;
                            $selected_store_session_shipping_options_id    = $coShippingOptionId;
                        }
                    }
                    if($value['freightCharge'] == "freight")
                    {                        
                        $select_dropdown .= '<option data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '" value="' . $label . '"  ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="localshipping_option_' . $label . '" data-label="' . $label_name . '"  data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '" data-value="' . $label . '">' . $label . '</option> ';
                    }
                    else
                    {
                        $select_dropdown .= '<option data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '" value="' . $label . '"  ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="localshipping_option_' . $label . '" data-label="' . $label_name . '"  data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '" data-value="' . $label . '">' . $label_name . '</option> ';
                    }

                }
                $select_dropdown .= '</select></div>';
                //Made changes for display installment in checkout page -REN11--START
                $radio_button .= '<div class="c-radio col-xs-12 col-sm-12 col-md-6"><input id="fedex_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $slug . '" ' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"  class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" name="radio_shipping_method_name" data-inst="fedex" data-radiobtnshippingslug="fedex"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="fedex_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>Fedex</strong> </label></div>';
                $installment_radio_button .= '<div class="c-radio col-xs-12 col-sm-12 col-md-6"><input id="installment_fedex_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $slug . '" ' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"  class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" data-inst="fedex" name="radio_shipping_method_name_installment" data-radiobtnshippingslug="fedex"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="installment_fedex_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>Fedex</strong> </label></div>';
                $returnFedexArr['shipping_options_html'] .= $radio_button . $select_dropdown;
                $returnFedexArr['shipping_options_html'] .= '</div>';
                $returnFedexArr['installment_shipping_options_html'] .= $installment_radio_button . $select_dropdown;
                $returnFedexArr['installment_shipping_options_html'] .= '</div>';
                //Made changes for display installment in checkout page -REN11--END
                $this->shippingChargesArray[] = array(
                    'shipping_method_id'   => $shipping_method_id,
                    'shipping_charge'      => $shipping_charge_with_shipping_tax_store_value,
                    'shipping_label'       => $label,
                    'shipping_method_slug' => $slug,
                    'shipping_options_id'  => $coShippingOptionId,
                    'shipping_method_name' => $mothod_name,
                );
            }
        }
        return $returnFedexArr;
    }

    public function getUSPSShippingHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $returnUSPSArr                          = array();
        $returnUSPSArr['shipping_options_html'] = $returnUSPSArr['installment_shipping_options_html'] = '';
        $ShoppingCart                           = $cart;
        $shipping_data                          = array();
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $returnUSPSArr;
        } else {
            $session = new Session();
            if (empty($extra_param['module_id'])) {
                $uspsshipping_module_setting = $this->getModuleSettingBySlug('usps');
                $module_id                   = $uspsshipping_module_setting->getModule()->getId();
                $mothod_name                 = $uspsshipping_module_setting->getModule()->getModuleName();
            } else {
                $module_id   = $extra_param['module_id'];
                $mothod_name = $extra_param['module_name'];
            }
            $shipping_method_id = $extra_param['sm_shipping_method_id'];
            if (empty($shipping_method_id)) {
                $shipping_method_data = $this->getEnalbedShippingMethods($module_id);
                if (!empty($shipping_method_data)) {
                    $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
                }
            }
            $SiteSetting                       = $extra_param['SiteSetting'];
            $GeneralService                    = $extra_param['GeneralService'];
            $slug                              = 'usps';
            $label                             = '';
            $shipping_charge_with_shipping_tax = '';
            //REN02
            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];

            $CheckoutService = $session->get('CheckoutService');
            if ($shipping_calculate_base_on == 'billing_address') {
                $coShipZip     = $CheckoutService->getBilZip();
                $coShipCity    = $CheckoutService->getBilCity();
                $coShipState   = $CheckoutService->getBilState();
                $coShipCountry = $CheckoutService->getBilCountry();
            } else {
                $coShipZip     = $CheckoutService->getShipZip();
                $coShipCity    = $CheckoutService->getShipCity();
                $coShipState   = $CheckoutService->getShipState();
                $coShipCountry = $CheckoutService->getShipCountry();
            }
            $coShippingMethodId = $CheckoutService->getShippingMethodId();
            $coShippingCharge   = $CheckoutService->getShippingCharge();
            $coShippingOptionId = $CheckoutService->getShippingOptionId();

            $shipperAddress            = $extra_param['shipperAddress'];
            $country_code              = 'US';
            $recipient_state_code      = 'CA';
            $recipient_state_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:State')->find($coShipState);
            if (!empty($recipient_state_code_data)) {
                $recipient_state_code = $recipient_state_code_data->getIsoCode();
            }

            $recipient_country_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:Country')->find($coShipCountry);
            if (!empty($recipient_country_code_data)) {
                $country_code = $recipient_country_code_data->getIsoCode();
            }

            $configured_service_type = array();
            $configured_service_type = $json_decode_shipping_data;
            if (is_numeric($coShipCity)) {
                $city_name = $this->getCityNameById($coShipCity);
            } else {
                $city_name = $coShipCity;
            }
            $recipientAddress = array('country_code' => $country_code, 'state_code' => $recipient_state_code, 'city_name' => $city_name, 'zipcode' => $coShipCity);
            $usps_result_data = $this->getUspsShippingData($ShoppingCart, $shipping_method_id, $recipientAddress, $shipperAddress, $configured_service_type);

            $usps_front_select_box   = '';
            $select_dropdown         = '';
            $is_radio_button_checked = '';
            if (!empty($usps_result_data)) {
                $display_block = ' style="display:none" ';
                if ($shipping_method_id == $coShippingMethodId && $coShippingCharge > 0) {
                    $display_block = ' style = " display:block" ';
                }
                $selected_store_session_shipping_options_id = 0;
                $radio_button_charge                        = 0;
                //Made changes for display installment in checkout page -REN11--START
                $returnUSPSArr['shipping_options_html'] .= '<div class="row">';//col-xs-12 col-sm-12 col-md-12 
                $returnUSPSArr['installment_shipping_options_html'] .= '<div class="row">';//<div class="col-xs-12 col-sm-12 col-md-12 ">
                //Made changes for display installment in checkout page -REN11--END
                $select_dropdown                               = '<div class="col-xs-12 col-sm-12 col-md-6"><select name="shipping_method" ' . $display_block . ' id="shipping_method_usps" class="thirdparty_shipping form-control pull-left" ><option value="" data-radiobtnshippingslug="' . $slug . '">' . $this->get('translator')->trans('front_select_usps_option') . '</option>';
                $usps_array_key_value                          = array_values($this->usps_service_options);
                $usps_array_key_value                          = array_column($usps_array_key_value, 'name', 'id');
                $shipping_charge_with_shipping_tax_store_value = 0;
                foreach ($usps_result_data as $key => $value) {
                    $label                             = 'USPS_' . $key;
                    $label_name                        = $usps_array_key_value[$label];
                    $shipping_charge_with_shipping_tax = $value['rate'];
                    $shipping_charge_with_shipping_tax = $GeneralService->getPriceRoundAmount('shipping', $shipping_charge_with_shipping_tax);
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $is_checked                        = '';
                    if (!empty($coShippingOptionId)) {
                        if ($label == $coShippingOptionId && $shipping_method_id == $coShippingMethodId) {
                            $is_checked                                    = ' selected="selected" ';
                            $is_radio_button_checked                       = ' checked="checked" ';
                            $shipping_charge_with_shipping_tax_store_value = $shipping_charge_with_shipping_tax;
                            $radio_button_charge                           = $shippingcharge;
                            $selected_store_session_shipping_options_id    = $coShippingOptionId;
                        }
                    }
                    $select_dropdown .= '<option data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '" value="' . $label . '"  ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="localshipping_option_' . $label . '" data-label="' . $label_name . '"  data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '" data-value="' . $label . '">' . $label_name . '</option> ';
                }
                $select_dropdown .= '</select></div>';
                //Made changes for display installment in checkout page -REN11--START
                $radio_button             = '<div class="c-radio col-xs-12 col-sm-12 col-md-6"><input id="usps_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $slug . '" ' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"  class="c-radio show_shipping_charge" name="radio_shipping_method_name" data-for="radio_shipping_method_name" data-inst="usps" data-radiobtnshippingslug="usps" type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="usps_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> USPS </label></div></div>';
                $installment_radio_button = '<div class="c-radio col-xs-12 col-sm-12 col-md-6"><input id="installment_usps_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $slug . '" ' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"  class="c-radio show_shipping_charge" data-for="radio_shipping_method_name" data-inst="usps" name="radio_shipping_method_name_installment" data-radiobtnshippingslug="usps" type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="installment_usps_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> USPS </label></div></div>';
                $returnUSPSArr['shipping_options_html'] .= $radio_button . $select_dropdown;
                $returnUSPSArr['shipping_options_html'] .= '</div>';
                $returnUSPSArr['installment_shipping_options_html'] .= $installment_radio_button . $select_dropdown;
                $returnUSPSArr['installment_shipping_options_html'] .= '</div>';
                //Made changes for display installment in checkout page -REN11--END
                $this->shippingChargesArray[] = array(
                    'shipping_method_id'   => $shipping_method_id,
                    'shipping_charge'      => $shipping_charge_with_shipping_tax,
                    'shipping_label'       => $label,
                    'shipping_method_slug' => $slug,
                    'shipping_options_id'  => $coShippingOptionId,
                    'shipping_method_name' => $mothod_name,
                );
            }
        }
        return $returnUSPSArr;
    }

    public function getUPSShippingHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $returnUPSArr                          = array();
        $returnUPSArr['shipping_options_html'] = $returnUPSArr['installment_shipping_options_html'] = '';
        $ShoppingCart                          = $cart;
        $shipping_data                         = array();
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $returnUPSArr;
        } else {
            $session = new Session();
            if (empty($extra_param['module_id'])) {
                $upsshipping_module_setting = $this->getModuleSettingBySlug('ups');
                $module_id                  = $upsshipping_module_setting->getModule()->getId();
                $mothod_name                = $upsshipping_module_setting->getModule()->getModuleName();
            } else {
                $module_id   = $extra_param['module_id'];
                $mothod_name = $extra_param['module_name'];
            }
            $shipping_method_id = $extra_param['sm_shipping_method_id'];
            if (empty($shipping_method_id)) {
                $shipping_method_data = $this->getEnalbedShippingMethods($module_id);
                if (!empty($shipping_method_data)) {
                    $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
                }
            }
            $SiteSetting                       = $extra_param['SiteSetting'];
            $GeneralService                    = $extra_param['GeneralService'];
            $slug                              = 'ups';
            $label                             = '';
            $shipping_charge_with_shipping_tax = '';

            //REN02
            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];

            $CheckoutService = $session->get('CheckoutService');
            if ($shipping_calculate_base_on == 'billing_address') {
                $coShipZip     = $CheckoutService->getBilZip();
                $coShipCity    = $CheckoutService->getBilCity();
                $coShipState   = $CheckoutService->getBilState();
                $coShipCountry = $CheckoutService->getBilCountry();
            } else {
                $coShipZip     = $CheckoutService->getShipZip();
                $coShipCity    = $CheckoutService->getShipCity();
                $coShipState   = $CheckoutService->getShipState();
                $coShipCountry = $CheckoutService->getShipCountry();
            }
            $coShippingMethodId = $CheckoutService->getShippingMethodId();
            $coShippingCharge   = $CheckoutService->getShippingCharge();
            $coShippingOptionId = $CheckoutService->getShippingOptionId();

            $shipperAddress            = $extra_param['shipperAddress'];
            $country_code              = 'US';
            $recipient_state_code      = 'CA';
            $recipient_state_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:State')->find($coShipState);
            if (!empty($recipient_state_code_data)) {
                $recipient_state_code = $recipient_state_code_data->getIsoCode();
            }

            $recipient_country_code_data = $this->getDoctrine()->getRepository('LocalizationBundle:Country')->find($coShipCountry);
            if (!empty($recipient_country_code_data)) {
                $country_code = $recipient_country_code_data->getIsoCode();
            }

            $configured_service_type = array();
            $configured_service_type = $json_decode_shipping_data;
            if (is_numeric($coShipCity)) {
                $city_name = $this->getCityNameById($coShipCity);
            } else {
                $city_name = $coShipCity;
            }
            $recipientAddress = array('country_code' => $country_code, 'state_code' => $recipient_state_code, 'city_name' => $city_name, 'zipcode' => $coShipZip);
            $ups_result_data  = $this->getUpsShippingData($ShoppingCart, $shipping_method_id, $recipientAddress, $shipperAddress, $configured_service_type);
            //$localshippingMethodId = $shipping_method_id;
            $radio_button_charge  = 0;
            $ups_front_select_box = '';
            if (!empty($ups_result_data)) {
                $display_block = ' style="display:none" ';
                if ($shipping_method_id == $coShippingMethodId && $coShippingCharge > 0) {
                    $display_block = ' style = " display:block" ';
                }
                //Made changes for display installment in checkout page -REN11--START
                $returnUPSArr['shipping_options_html'] .= '<div class="row">';//col-xs-12 col-sm-12 col-md-12 
                $returnUPSArr['installment_shipping_options_html'] .= '<div class="row">';//col-xs-12 col-sm-12 col-md-12 
                //Made changes for display installment in checkout page -REN11--END
                $select_dropdown                               = '<div class="col-xs-12 col-sm-12 col-md-6"><select name="shipping_method" ' . $display_block . ' id="shipping_method_ups" class="thirdparty_shipping form-control pull-left" ><option value="" data-radiobtnshippingslug="' . $slug . '">' . $this->get('translator')->trans('front_select_ups_option') . '</option>';
                $ups_array_key_value                           = array_values($this->ups_service_options);
                $ups_array_key_value                           = array_column($ups_array_key_value, 'name', 'id');
                $shipping_charge_with_shipping_tax_store_value = 0;
                $is_radio_button_checked                       = '';
                $selected_store_session_shipping_options_id    = 0;
                foreach ($ups_result_data as $key => $value) {
                    $label                             = $key;
                    $label_name                        = $value['servicename'];
                    $shipping_charge_with_shipping_tax = $value['rate'];
                    $shipping_charge_with_shipping_tax = $GeneralService->getPriceRoundAmount('shipping', $shipping_charge_with_shipping_tax);
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $is_checked                        = '';
                    if (!empty($coShippingOptionId)) {
                        if ($label == $coShippingOptionId && $shipping_method_id == $coShippingMethodId) {
                            $is_checked                                    = ' selected="selected" ';
                            $shipping_charge_with_shipping_tax_store_value = $shipping_charge_with_shipping_tax;
                            $is_radio_button_checked                       = ' checked="checked" ';
                            $radio_button_charge                           = $shippingcharge;
                            $selected_store_session_shipping_options_id    = $coShippingOptionId;
                        }
                    }
                    $select_dropdown .= '<option data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"   ' . $is_checked . ' data-shipping-method-id="' . $shipping_method_id . '" id="localshipping_option_' . $label . '" data-label="' . $label_name . '"  data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '" data-value="' . $label . '" value="' . $label . '">' . $label_name . '</option> ';
                }

                $select_dropdown .= '</select></div>';

                //Made changes for display installment in checkout page -REN11--START
                $radio_button = '<div class="c-radio col-xs-12 col-sm-12 col-md-6">
                 <input class="show_shipping_charge c-radio " id="ups_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $selected_store_session_shipping_options_id . '"' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"  data-for="radio_shipping_method_name" name="radio_shipping_method_name" data-radiobtnshippingslug="ups"  data-inst="ups" type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="ups_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span><strong> UPS</strong> </label></div>';
                $installment_radio_button = '<div class="c-radio col-xs-12 col-sm-12 col-md-6">
                 <input class="show_shipping_charge c-radio " id="installment_ups_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $selected_store_session_shipping_options_id . '"' . $is_radio_button_checked . ' data-shipping-method-id="' . $shipping_method_id . '"   data-for="radio_shipping_method_name" name="radio_shipping_method_name_installment" data-inst="ups" data-radiobtnshippingslug="ups"  type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="installment_ups_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span><strong> UPS</strong> </label></div>';
                $returnUPSArr['shipping_options_html'] .= $radio_button . $select_dropdown;
                $returnUPSArr['shipping_options_html'] .= '</div>';
                $returnUPSArr['installment_shipping_options_html'] .= $installment_radio_button . $select_dropdown;
                $returnUPSArr['installment_shipping_options_html'] .= '</div>';
                //Made changes for display installment in checkout page -REN11--END
                $this->shippingChargesArray[] = array(
                    'shipping_method_id'   => $shipping_method_id,
                    'shipping_charge'      => $shipping_charge_with_shipping_tax_store_value,
                    'shipping_label'       => $label,
                    'shipping_method_slug' => $slug,
                    'shipping_options_id'  => $coShippingOptionId,
                    'shipping_method_name' => $mothod_name,
                );
            }
        }
        return $returnUPSArr;
    }

    public function getEnalbedShippingMethods($module_id = '')
    {
        $em                  = $this->getDoctrine()->getManager();
        $module_id_condition = '';
        if (!empty($module_id)) {
            $module_id_condition = ' AND m.id = ' . $module_id . ' GROUP BY m.id ';
        }
        $sql = "SELECT m.id,m.module_name as module_name,m.slug as module_slug,sm.id as shipping_method_id FROM module m INNER JOIN shipping_method sm ON m.id=sm.module_id
      AND sm.status='1' AND sm.is_deleted='0' INNER JOIN shipping_zone_method szm ON sm.id=szm.method_id AND szm.is_enabled='1' AND szm.is_deleted = '0'
      WHERE  m.status='1' AND m.is_deleted='0' $module_id_condition ";

        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return $result;
    }

    public function getInstallmentData()
    {
        $GeneralService  = $this->get(GeneralService::class);
        $condition_array    = array('i.isDefault' => 1, 'i.status' => 1, 'i.isDeleted' => 0);
        $getInstallmentData = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:Installment", $allies = 'i', $condition_array, $operator_array = array(), $data = 'i', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        $installmentData    = array();
        $Installment        = array();
        if (!empty($getInstallmentData)) {
            $installmentData = $getInstallmentData[0];
        }
        if (!empty($installmentData)) {
            $Installment['id']    = $installmentId    = $installmentData['id'];
            $Installment['name']  = $installmentName  = $installmentData['name'];
            $Installment['title'] = $installmentName = $installmentData['title'];
            $condition_array      = array('iss.installment' => $installmentId);
            $installmentSetting   = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:InstallmentSetting", $allies = 'iss', $condition_array, $operator_array = array(), $data = 'iss', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
            if (!empty($installmentSetting)) {
                $Installment['installmentSettingId'] = $installmentSetting[0]['id'];
                $Installment['installmentType']      = $installmentSetting[0]['installmentType'];
                $Installment['noOfInstallment']      = $installmentSetting[0]['noOfInstallment'];
                $Installment['allowAllBrand']        = $installmentSetting[0]['allowAllBrand'];
                $Installment['downPayment']          = $installmentSetting[0]['downPayment'];
                $Installment['downPaymentType']      = $installmentSetting[0]['downPaymentType'];
                $Installment['additionalSalePrice']  = $installmentSetting[0]['additionalSalePrice'];
                $Installment['RibbonDetails']        = $installmentSetting[0]['ribbonDetails'];
                $Installment['ImageDetails']        = $installmentSetting[0]['image'];
                $Installment['DisplayPosition']      = $installmentSetting[0]['displayPosition'];
                $Installment['PromotionShowOn']      = $installmentSetting[0]['promotionShowOn'];
                $Installment['allowOnTax']           = $installmentSetting[0]['allowOnTax'];
                $Installment['allowOnShipping']      = $installmentSetting[0]['allowOnShipping'];
                $Installment['allowOnWarranty']      = $installmentSetting[0]['allowOnWarranty'];
            }
        }
        return $Installment;
    }

    public function getSliderGallery($param = array())
    {
        $galleryId     = $param['galleryId'];
        $themename     = $param['themename'];
        $LayoutSetting = $param['LayoutSetting'];
        $em            = $this->getDoctrine()->getManager();
        $slider_data   = $em->createQuery("SELECT S.alwaysShow as sliderAlwaysShow,S.fromDate as sliderFromDate,S.toDate as sliderToDate,SI.imgName,SI.title,SI.link,SI.linkTarget,SI.alwaysShow as sliderImageAlwaysShow,SI.fromDate as sliderImageFromDate,SI.toDate as sliderImageToDate,S.sliderType,S.sliderMethod
                        FROM ContentcmsBundle:Slider S INNER JOIN ContentcmsBundle:SliderImage SI WITH SI.slider=S.id AND SI.isDeleted=0 WHERE S.id='" . $galleryId . "' AND S.isDeleted=0  AND S.status=1 ORDER BY SI.sortOrder ASC")->getResult();

        $sliderImage = '';
        if (!empty($slider_data)) {
            $sliderMethod    = $slider_data[0]['sliderMethod'];
            $sliderType      = Slider::$sliderTypeArr[$sliderMethod];
            $sliderType      = str_replace("Slider", "", trim($sliderType));
            $template_suffix = strtolower(str_replace(" ", "_", trim($sliderType)));
            $params          = array('themename' => $themename, 'slidermethod' => $sliderMethod, 'LayoutSetting' => $LayoutSetting, 'template_suffix' => $template_suffix);
            $sliderImage     = $this->getCmsPageSliderHtml($slider_data, $params);
        }

        return $sliderImage;
    }

    public function getProductImageUrl($imageName = '', $brandSlug = '', $container = false)
    {
        $return_url = array();
        if ($container) {
            $imageDir       = $container->getParameter('kernel.root_dir') . '/../web';
            $cdnUrl         = $container->getParameter('cdnurl');
            $GeneralService = $container->get(GeneralService::class);
        } else {
            $imageDir       = $this->container->getParameter('kernel.root_dir') . '/../web';
            $cdnUrl         = $this->container->getParameter('cdnurl');
            $GeneralService = $this->get(GeneralService::class);
        }
        $baseUrl = $GeneralService->getBaseUrl();
        if (!empty($imageName)) {
            $params                  = array();
            $params['option_type']   = 'catalog';
            $params['option_value']  = $imageName;
            $params['option_folder'] = $brandSlug . '/high';
            $return_url['print']     = $return_url['high']     = $return_url['small']     = $GeneralService->getAWSUploadImages($params);
        } else {
            $return_url['print'] = $return_url['high'] = $return_url['small'] = $baseUrl . 'assets/uploads/product/notimage.png';
        }
        
        return $return_url;
    }

    public function getInstockPickupHtml($cart, $json_decode_shipping_data, $extra_param)
    {
        $retrunShippingArr                          = array();
        $retrunShippingArr['shipping_options_html'] = $retrunShippingArr['installment_shipping_options_html'] = '';
        $ShoppingCart                               = $cart;
        $shipping_data                              = array();
        if (empty($cart) || empty($json_decode_shipping_data)) {
            return $retrunShippingArr;
        } else {
            $em      = $this->getDoctrine()->getManager();
            $session = new Session();

            $SiteSetting                = $extra_param['SiteSetting'];
            $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
            $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];
            //REN02
            $CheckoutService             = $session->get('CheckoutService');
            $session_shipping_options_id = $CheckoutService->getShippingOptionId();
            $language_id   = $session->get('front_lang_id');
            //$shipping_method_id = $CheckoutService->getShippingMethodId();
            $method_name = $CheckoutService->getShippingMethodName();
            if ($shipping_calculate_base_on == 'billing_address') {
                $zipcode    = $CheckoutService->getBilZip();
                $city_id    = $CheckoutService->getBilCity();
                $state_id   = $CheckoutService->getBilState();
                $country_id = $CheckoutService->getBilCountry();
            } else {
                $zipcode    = $CheckoutService->getShipZip();
                $city_id    = $CheckoutService->getShipCity();
                $state_id   = $CheckoutService->getShipState();
                $country_id = $CheckoutService->getShipCountry();
            }

            $instorepickup_shipping_module_setting = $this->getModuleSettingBySlug('instorepickup');
            $module_id                             = $instorepickup_shipping_module_setting->getModule()->getId();
            $shipping_method_data                  = $this->getEnalbedShippingMethods($module_id);
            $shipping_method_id                    = '';
            if (!empty($shipping_method_data)) {
                $shipping_method_id = $shipping_method_data[0]['shipping_method_id'];
            }
            $mothod_name    = $instorepickup_shipping_module_setting->getModule()->getModuleName();
            $SiteSetting    = $extra_param['SiteSetting'];
            $GeneralService = $extra_param['GeneralService'];
            $slug                  = 'instorepickup';
            $label                 = 'In-Store Pickup';
            $localshippingMethodId = $shipping_method_id;
            $ups_front_select_box  = '';
            $enabled_store_pickup  = "";
            $field_data                      = 'w.name,w.id,i.cost,i.status as pickup_status';
            $join_array                      = array();
            $groupby                         = '';
            $condition_array                 = array('w.isDeleted' => 0, 'w.status' => 1,'w.lang' =>$language_id);
            $operator_array                  = array();
            $join_array[0]['type']           = '';
            $join_array[0]['join_from']      = 'i.warehouseId';
            $join_array[0]['join_to']        = 'w.id';
            $join_array[0]['join_allies']    = 'i';
            $join_array[0]['join_class']     = 'SalesBundle:Instorepickup';
            $join_array[0]['join_condition'] = " AND i.status = 1 ";
            $sortby                          = 'ASC';
            $orderby                         = ' w.sortOrder ';
            $store_locations_data            = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:Warehouse", $allies = 'w', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);

            $is_radio_button_checked                    = '';
            $select_dropdown                            = '';
            $display_block                              = "style = 'display:none' ";
            $selected_store_session_shipping_options_id = 0;
            $radio_button_installment                   = $radio_button                   = '';
            if (!empty($store_locations_data)) {
                if (empty($mothod_name)) {
                    $mothod_name = 'In-Store Pickup';
                }
                //if ($shipping_method_id == $CheckoutService->getShippingMethodId() && $CheckoutService->getShippingCharge() > 0) {
                if ($shipping_method_id == $CheckoutService->getShippingMethodId()) {
                    $display_block = ' style = " display:block" ';
                }
                //Made changes for display installment in checkout page -REN11--START
                $retrunShippingArr['shipping_options_html'] .= '<div class="row">';//col-xs-12 col-sm-12 col-md-12 
                $retrunShippingArr['installment_shipping_options_html'] .= '<div class="row">';//col-xs-12 col-sm-12 col-md-12 
                //Made changes for display installment in checkout page -REN11--END
                $select_dropdown .= '<div class="col-xs-12 col-sm-12 col-md-6"> <select name="shipping_method" id="shipping_method_instorepickup" class="form-control pull-left thirdparty_shipping " ' . $display_block . ' ><option value="" data-radiobtnshippingslug="' . $slug . '">' . $this->get('translator')->trans('front_select_store_option') . '</option>';
                $shipping_charge_with_shipping_tax_store_value = 0;
                $radio_button_charge                           = 0;
                foreach ($store_locations_data as $key => $value) {
                    $label                             = "instorepickup_" . $value['id']; // 'instorepickup_'.$key;
                    $label_name                        = $store_address                        = $value['name'];
                    $shipping_charge_with_shipping_tax = $value['cost'];
                    $shipping_charge_with_shipping_tax = $GeneralService->getPriceRoundAmount('shipping', $shipping_charge_with_shipping_tax);
                    $shippingcharge                    = $GeneralService->currencyFormatting($shipping_charge_with_shipping_tax);
                    $is_checked                        = '';
                    if (!empty($value['id'])) {
                        $store_data = $this->getWarehouseAddress($value['id']);
                        if (!empty($store_data)) {
                            $store_address = $label_name . ', ' . $store_data['address'] . ', ' . $store_data['city_name'] . ',' . $store_data['state_name'] . ', ' . $store_data['store_zipcode'];
                        }
                    }
                    if (!empty($session_shipping_options_id)) {
                        if ($label == $session_shipping_options_id && $shipping_method_id == $CheckoutService->getShippingMethodId()) {
                            $is_checked                                    = ' selected="selected" ';
                            $shipping_charge_with_shipping_tax_store_value = $shipping_charge_with_shipping_tax;
                            $is_radio_button_checked                       = ' checked="checked" ';
                            $radio_button_charge                           = $shippingcharge;
                            $selected_store_session_shipping_options_id    = $session_shipping_options_id;
                        }
                    }
                    $select_dropdown .= '<option data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"   ' . $is_checked . ' data-shipping-method-id="' . $localshippingMethodId . '" id="instorepickup_option_' . $label . '" data-label="' . $label_name . '"  data-charge="' . $shipping_charge_with_shipping_tax . '" data-charge-symbol="' . $shippingcharge . '" data-value="' . $label . '" value="' . $label . '">' . $store_address . '</option> ';
                }
                $select_dropdown .= '</select></div>';
                //Made changes for display installment in checkout page -REN11--START
                $radio_button = '<div class="c-radio col-xs-12 col-sm-12 col-md-6">
                <input class="show_shipping_charge c-radio " id="instorepickup_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $selected_store_session_shipping_options_id . '"' . $is_radio_button_checked . ' data-shipping-method-id="' . $localshippingMethodId . '"   name="radio_shipping_method_name" data-radiobtnshippingslug="instorepickup" type="radio" data-inst="instorepickup" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="instorepickup_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $this->get('translator')->trans('front_instore_pickup') . '</strong> </label></div>';
                $radio_button_installment = '<div class="c-radio col-xs-12 col-sm-12 col-md-6">
                <input class="show_shipping_charge c-radio " id="installment_instorepickup_botton_' . $selected_store_session_shipping_options_id . '" data-shipping-method="' . $mothod_name . '" data-shipping-slug="' . $slug . '"  value="' . $selected_store_session_shipping_options_id . '"' . $is_radio_button_checked . ' data-shipping-method-id="' . $localshippingMethodId . '"   data-for="radio_shipping_method_name" name="radio_shipping_method_name_installment" data-inst="instorepickup" data-radiobtnshippingslug="instorepickup" type="radio" data-charge="' . $shipping_charge_with_shipping_tax_store_value . '" data-charge-symbol="' . $radio_button_charge . '"><label for="installment_instorepickup_botton_' . $selected_store_session_shipping_options_id . '"> <span class="inc"></span> <span class="check"></span> <span class="box"></span> <strong>' . $this->get('translator')->trans('front_instore_pickup') . '</strong> </label></div>';
                $retrunShippingArr['shipping_options_html'] .= $radio_button . $select_dropdown;
                $retrunShippingArr['shipping_options_html'] .= '</div>';
                $retrunShippingArr['installment_shipping_options_html'] .= $radio_button_installment . $select_dropdown;
                $retrunShippingArr['installment_shipping_options_html'] .= '</div>';
                //Made changes for display installment in checkout page -REN11--END
                $this->shippingChargesArray[] = array(
                    'shipping_method_id'   => $localshippingMethodId,
                    'shipping_charge'      => $shipping_charge_with_shipping_tax_store_value,
                    'shipping_label'       => $label,
                    'shipping_method_slug' => $slug,
                    'shipping_options_id'  => $session_shipping_options_id,
                    'shipping_method_name' => $mothod_name,
                );
            }
        }

        return $retrunShippingArr;
    }

    public function getWarehouseAddress($warehouse_id = 0)
    {
        $data = array();
        if (!empty($warehouse_id)) {
            $em             = $this->getDoctrine()->getManager();
            $GeneralService = $this->get(GeneralService::class);
            
            $field_data                   = 'w.name as store_name,w.city as city_name,w.city as city_id,s.stateName as state_name,cntry.countryName as country_name,cntry.countryLanguage as country_language,w.zipcode as store_zipcode,w.address,s.id as state_id,cntry.id as country_id';
            $join_array                   = array();
            $groupby                      = '';
            $condition_array              = array('w.isDeleted' => 0, 'w.status' => 1, 'w.id' => $warehouse_id);
            $operator_array               = array();
            $join_array[0]['type']        = '';
            $join_array[0]['join_from']   = 'w.countryId';
            $join_array[0]['join_to']     = 'cntry.id';
            $join_array[0]['join_allies'] = 'cntry';
            $join_array[0]['join_class']  = 'LocalizationBundle:Country';

            $join_array[1]['type']        = '';
            $join_array[1]['join_from']   = 'w.state';
            $join_array[1]['join_to']     = 's.id';
            $join_array[1]['join_allies'] = 's';
            $join_array[1]['join_class']  = 'LocalizationBundle:State';

           /* $join_array[2]['type']        = '';
            $join_array[2]['join_from']   = 'w.city';
            $join_array[2]['join_to']     = 'c.id';
            $join_array[2]['join_allies'] = 'c';
            $join_array[2]['join_class']  = 'LocalizationBundle:Cities';*/

            $sortby                       = 'ASC';
            $orderby                      = ' w.sortOrder ';
            $data    = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:Warehouse", $allies = 'w', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);

            if (!empty($data)) {
                $data = $data[0];
            }
        }
        return $data;
    }

    public function getShippingAddredByOrderId($orderId = 0)
    {
        $em     = $this->getDoctrine()->getManager();
        $result = array();
        if (!empty($orderId)) {
        $GeneralService = $this->get(GeneralService::class);
        $field_data                   = ' c.cityName as city_name,s.stateName as state_name,cntry.countryName as country_name,ord.shippingZipcode as shipping_zipcode,ord.shippingAddress1 as shipping_address_1,ord.shippingAddress2 as shipping_address_2,ord.shippingCity as city_id,ord.shippingState as state_id,s.isoCode as state_iso_code, ord.shippingCountryId as country_id,cntry.isoCode as country_iso_code';
            $join_array                   = array();
            $groupby                      = '';
            $condition_array              = array('ord.id' => $orderId);
            $operator_array               = array();
            $join_array[0]['type']        = '';
            $join_array[0]['join_from']   = 'ord.shippingCountryId';
            $join_array[0]['join_to']     = 'cntry.id';
            $join_array[0]['join_allies'] = 'cntry';
            $join_array[0]['join_class']  = 'LocalizationBundle:Country';

            $join_array[1]['type']        = '';
            $join_array[1]['join_from']   = 'ord.shippingState';
            $join_array[1]['join_to']     = 's.id';
            $join_array[1]['join_allies'] = 's';
            $join_array[1]['join_class']  = 'LocalizationBundle:State';

            $join_array[2]['type']        = '';
            $join_array[2]['join_from']   = 'ord.shippingCity';
            $join_array[2]['join_to']     = 'c.id';
            $join_array[2]['join_allies'] = 'c';
            $join_array[2]['join_class']  = 'LocalizationBundle:Cities';

            //$join_array[0]['join_condition'] = " AND i.status = 1 ";
            $sortby  = '';
            $orderby = '';
            $data    = $GeneralService->selectDataByCondition($tableclass = "SalesBundle:Orders", $allies = 'ord', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = '', $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
            if (!empty($data)) {
                $result = $data[0];
            }
        }
        return $result;
    }
    public function getUserTypeInfo($userTypeId)
    {
        $userTypeData = array();
        $em           = $this->getDoctrine()->getManager();
        $userTypeData = $em->getRepository(UserType::class)->findBy(array('id' => $userTypeId, 'isDeleted' => 0, 'status' => 1))[0];
        if ($userTypeData) {
            return $userTypeData;
        }
    }
    public function getColumnList()
    {
        $return_array                 = array();
        $return_array['desktop']['6'] = 'col-md-2';
        $return_array['desktop']['4'] = 'col-md-3';
        $return_array['desktop']['3'] = 'col-md-4';
        $return_array['desktop']['2'] = 'col-md-6';
        $return_array['tablet']['4']  = 'col-sm-3';
        $return_array['tablet']['3']  = 'col-sm-4';
        $return_array['tablet']['2']  = 'col-sm-6';
        $return_array['tablet']['1']  = 'col-sm-12';
        $return_array['mobile']['2']  = 'col-xs-6';
        $return_array['mobile']['1']  = 'col-xs-12';

        return $return_array;
    }

    public function getDefaultSortOrder($defaultSorting)
    {
        $return_array = array();
        switch ($defaultSorting) {
            case "1-9":
                $orderby = 'p.sortOrder';
                $sortby  = 'ASC';
                break;
            case "A-Z":
                $orderby = 'pl.name';
                $sortby  = 'ASC';
                break;
            case "AtoZ":
                $orderby = 'pl.name';
                $sortby  = 'ASC';
                break;
            case "Z-A":
                $orderby = 'pl.name';
                $sortby  = 'DESC';
                break;
            case "ZtoA":
                $orderby = 'pl.name';
                $sortby  = 'DESC';
                break;
            case "price(High-Low)":
                $orderby = 'final_price';
                $sortby  = 'DESC';
                break;
            case "HightoLow":
                $orderby = 'final_price';
                $sortby  = 'DESC';
                break;
            case "price(Low-High)":
                $orderby = 'final_price';
                $sortby  = 'ASC';
                break;
            case "LowtoHigh":
                $orderby = 'final_price';
                $sortby  = 'ASC';
                break;
            case "Rating(High-Low)":
                $orderby = 'productRating';
                $sortby  = 'DESC';
                break;
            case "sku(A-Z)":
                $orderby = 'p.sku';
                $sortby  = 'ASC';
                break;
            case "SkuAtoZ":
                $orderby = 'p.sku';
                $sortby  = 'ASC';
                break;
            case "NewestFirst":
                $orderby = 'p.id';
                $sortby  = 'DESC';
                break;
            case "OldestFirst":
                $orderby = 'p.id';
                $sortby  = 'ASC';
                break;
            case is_numeric($defaultSorting):
                $orderby = 'mark';
                $sortby  = 'DESC';
                break;
            case "ProductPromotions":
                $orderby = 'promotion_sort, b.sortOrder, p.sortOrder';
                $sortby  = 'ASC';
                break;
            case "BrandsOrder":
                $orderby = 'b.sortOrder, promotion_sort, p.sortOrder';
                $sortby  = 'ASC';
                break;
            default:
                $orderby = 'p.sortOrder';
                $sortby  = 'ASC';
        }

        $return_array['orderby'] = $orderby;
        $return_array['sortby']  = $sortby;

        return $return_array;
    }

    private function _getProductIdsByKeyword($keyword) 
    {
        $matchKeywordArr = explode(' ', trim($keyword));
        $match_condition1='('; 
        $match_condition2='('; 
        $counter = 1;
        foreach($matchKeywordArr as $matchKeyword)
        {
            //$match_condition1 .= "MATCH(pl.name) AGAINST('".trim($matchKeyword)."' IN BOOLEAN MODE) AND ";
            //$match_condition2 .= "MATCH(pl.product_tags) AGAINST('".trim($matchKeyword)."' IN BOOLEAN MODE) AND ";
            $match_condition1 .= "pl.name LIKE '%".trim($matchKeyword)."%' AND ";
            $match_condition2 .= "pl.product_tags LIKE '%".trim($matchKeyword)."%' AND ";
            $counter++;
        }
        $match_condition1= trim($match_condition1, ' AND ').')'; 
        $match_condition2= trim($match_condition2, ' AND ').')';

        $ids = [];
        if($counter > 1)
        {
            $combine_match_condition = $match_condition1.' OR '.$match_condition2;
            //$sqlbkp = "SELECT DISTINCT(p.id) FROM product as p LEFT JOIN product_lang as pl on p.ctb_ref_id = pl.product_ref_id WHERE pl.name LIKE '%" . trim($keyword) . "%' OR p.sku LIKE '%" . $keyword . "%'  OR pl.product_tags LIKE '%" . trim($keyword) . "%'";
            $sql = "SELECT DISTINCT(p.id) FROM product as p LEFT JOIN product_lang as pl on p.ctb_ref_id = pl.product_ref_id WHERE p.sku LIKE '%" . trim($keyword) . "%' OR p.sku_group LIKE '%" . trim($keyword) ."%' OR ".$combine_match_condition;
            $em         = $this->getDoctrine()->getManager();
            $statement  = $em->getConnection()->prepare($sql);
            $statement->execute();
            $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $ids = !empty($data) ? array_column($data, 'id') : [];
        }
        return $ids;
    }

    public function getProductData($param = array())
    {        
        $request = Request::createFromGlobals();
        $session = new Session();
        $productData     = array();
        $paginationData  = array();
        $MyFrontService  = $this->get(MyFrontService::class);
        $GeneralService  = $this->get(GeneralService::class);
        $productService = $this->get(ProductService::class);
        $theme_config = $GeneralService->getThemeOptionConfiguration();
        $SiteData = $MyFrontService->getSiteData();
        $GeneralFunction = new GeneralFunctionController;
        $themename      = $SiteData['themename'];
        //$categoryId      = isset($param['categoryId']) ? $param['categoryId'] : '';
        $categoryId      = ($param['categoryId'] != 'undefined') ? $param['categoryId'] : '';
        $comma_category  = isset($param['commaSeparatedCategoryId']) ? $param['commaSeparatedCategoryId'] : '';
        $productCommaValue  = isset($param['productCommaValue']) ? $param['productCommaValue'] : '';
        $productCommaValueSql = (!empty($categoryId)) ? $productService->getProductCommaSql($param, $SiteData)  : '';
        
        $imageDir        = $this->container->getParameter('kernel.root_dir') . '/../web';
        //$CommonVariable  = $otherParam['CommonVariable'];
        $language_code   = $session->get('front_lang_code');        
        $baseUrl         = $SiteData['commonVariable']['BaseUrl'];
        $pageLimit = $request->query->get('limit');
        if (isset($_COOKIE['show_item_per_page']) && $_COOKIE['show_item_per_page'] > 0) {
            $pageLimit = $_COOKIE['show_item_per_page'];
        }        
        // Categoryrelated changes start--
        $defaultLangRefId = $GeneralService->getDefaultLangRefId();
        if ($this->get('session')->get('front_lang_ref_id')) {
            $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
        }
        // Category lang related changes end--
        $brandId         = '';
        $recentProduct   = '';
        $reletedProduct  = '';
        $collectionProduct = '';
        $QuickViewFor = '';
        if (!empty($param['brandId']) && $param['brandId'] != 'undefined') {
            $brandId = $param['brandId'];
        }
        if (!empty($param['recentProduct'])) {
            $recentProduct = $param['recentProduct'];
        }
        if (!empty($param['reletedProduct'])) {
            $reletedProduct = $param['reletedProduct'];
        }
        if (!empty($param['collectionProduct'])) {
            $collectionProduct = $param['collectionProduct'];
        }
        $searchKeyword = '';
        if(isset($param['searchKeyword']) && $param['searchKeyword'] != 'undefined'){
            $searchKeyword     = $param['searchKeyword'];
        }
        $userTypeEcommerceOn = '';
        $userTypeId          = $this->get('session')->get('userTypeId');
        $userTypeSlug        = $this->get('session')->get('userTypeSlug');
        if ($userTypeId) {
            $getUserType         = $this->getUserTypeInfo($userTypeId);
            $userTypeEcommerceOn = $getUserType->getEcommerce();
        }
        $InstallmentData = $this->getInstallmentData();
        $sort            = $request->query->get('sort');
        /* if (isset($_COOKIE['sort_item']) && $_COOKIE['sort_item'] != '') {
            $sort = $_COOKIE['sort_item'];
        } */
        $searchData = array();
        if(empty($reletedProduct) || empty($collectionProduct)){
            $searchData['attribute'] = $request->query->get('attribute');
            $searchData['category'] = $request->query->get('category');
            $searchData['brand'] = $request->query->get('brand');
            $searchData['price'] = $request->query->get('pricerange');
            $searchData['rating'] = $request->query->get('rating');
            $searchData['manufacturer'] = $request->query->get('manufacturer');
            $searchData['promotion'] = $request->query->get('promotion');
            $searchData['productCommaValue'] = $productCommaValue;
        }
        
        $promotionId = '';
        if(isset($param['promotionId']) && $param['promotionId'] != 'undefined'){
            $promotionId     = $param['promotionId'];
        }
        $ecircularId = '';
        if(isset($param['ecircularId']) && $param['ecircularId'] != 'undefined'){
            $ecircularId     = $param['ecircularId'];
        }

        $sortby            = '';
        $orderby           = '';
        $totalProductCount = 0;
        if (!empty($sort)) {
            $defaultSorting = $sort;
        } else {
            $defaultSorting = $SiteData['advfilter']['set_default_sorting'];
        }
        $orderby          = $this->getDefaultSortOrder($defaultSorting)['orderby'];
        $sortby           = $this->getDefaultSortOrder($defaultSorting)['sortby'];
        $pagination       = '';
        $gtaData          = array();
        $gtaPromotionData = array();
        $paginationData   = array();
        $item_limit       = '';

        $item_per_page = $SiteData['category_listbox_style']['product_item_per_page'];
        if (!empty($pageLimit)) {
            $item_limit = $pageLimit;
        } else {
            if (!empty($item_per_page)) {
                $item_limit = $item_per_page;
            } else {
                $item_limit = $SiteData['page_setting'];
            }
        }
        $pTot         = '';
        $linksPerPage = 5;
        $midRange     = 3;
        $item_offset  = 0;

        $pageno = $request->query->get('page');
        if (empty($pageno)) {
            $pageno = 1;
        } else {
            $item_offset = ($pageno - 1) * $item_limit;
        }
        $condition_array = array('p.status' => 1, 'p.isDeleted' => 0, 'l.ctbRefId' => $defaultLangRefId, 'p.basePrice > ' => '0');
        if (!empty($promotionId)) {
            $condition_array = array('p.status' => 1, 'p.isDeleted' => 0, 'l.ctbRefId' => $defaultLangRefId, 'pm.marking' => $promotionId, 'p.basePrice > ' => '0');
        }
        if (!empty($ecircularId)) {
            $condition_array = array('p.status' => 1, 'p.isDeleted' => 0, 'l.ctbRefId' => $defaultLangRefId, 'pm.ecircularId' => $ecircularId, 'p.basePrice > ' => '0');
        }
        $having_array   = $join_array   = array();
        $having_array[0] = "final_price > 0";
        $product_lang_condition = "";

        if($SiteData['show_without_stock'] == 1){
            $join_condition = " AND p.mainImage != ''";
        }
        else
        {
            $join_condition = " AND (p.masterStock > 0 OR p.instoreStock > 0 OR p.basePrice = 0.01) AND p.mainImage != ''";
        }
        

        $inventory_access = $this->getModuleStatusBySlug('inventory');
        if($inventory_access == true)
        {
            
            if( $SiteData['inventory_product_removal'] == 1 && $SiteData['warehouse_product_inventory'] == 1)
            {
                $join_array[16]['type'] = '';
                $join_array[16]['join_from'] = 'p.id';
                $join_array[16]['join_to'] = 'rip.product';
                $join_array[16]['join_allies'] = 'rip';
                $join_array[16]['join_class'] = 'CatalogueBundle:RawItemProduct';
                $join_array[16]['join_condition'] = "";

                $join_array[17]['type'] = '';
                $join_array[17]['join_from'] = 'rip.rawItem';
                $join_array[17]['join_to'] = 'rii.rawitem';
                $join_array[17]['join_allies'] = 'rii';
                $join_array[17]['join_class'] = 'CatalogueBundle:RawItemInventory';
                $join_array[17]['join_condition'] = "AND rii.bmStockQty > 0";
            }
            elseif( $SiteData['inventory_product_removal'] == 1 || $SiteData['warehouse_product_inventory'] == 1)
            {
                $join_array[16]['type'] = '';
                $join_array[16]['join_from'] = 'p.id';
                $join_array[16]['join_to'] = 'rip.product';
                $join_array[16]['join_allies'] = 'rip';
                $join_array[16]['join_class'] = 'CatalogueBundle:RawItemProduct';
                $join_array[16]['join_condition'] = "";

                if($SiteData['inventory_product_removal'] == 1)
                {
                    $join_array[17]['type'] = '';
                    $join_array[17]['join_from'] = 'rip.rawItem';
                    $join_array[17]['join_to'] = 'rii.rawitem';
                    $join_array[17]['join_allies'] = 'rii';
                    $join_array[17]['join_class'] = 'CatalogueBundle:RawItemInventory';
                    $join_array[17]['join_condition'] = "AND rii.availToSell > 0";
                }

                if($SiteData['warehouse_product_inventory'] == 1)
                {
                    $join_condition .= " AND p.instoreStock > 0";
                }
            }
        }


        if (!empty($searchData['price'])) {
            $searchPrice = explode('|', $searchData['price']);
            $having_array[1] = "(final_price BETWEEN " . $searchPrice[0] . " AND " . $searchPrice[1] . ")";
        }
        if (!empty($searchKeyword)) {
            $product_ids = $this->_getProductIdsByKeyword($searchKeyword);
            if(!empty($product_ids)){
                $product_lang_condition = "AND p.id IN (".implode(',', $product_ids).")";                
            } else {
                $product_lang_condition = "AND p.id IS NULL";
            }
        }
        $join_array[0]  = array('type' => '', 'join_from' => 'p.id', 'join_to' => 'pc.product', 'join_allies' => 'pc', 'join_class' => 'CatalogueBundle:ProductCategory', 'join_condition' => $join_condition);
        $operator_array = array();
        if (!empty($searchData['category'])) {
            $join_array[1]  = array('type' => '', 'join_from' => 'pc.category', 'join_to' => 'c.id', 'join_allies' => 'c', 'join_class' => 'CatalogueBundle:Category', 'join_condition' => 'AND c.status = 1 AND c.isDeleted = 0');
            $searchCategory = explode('|', $searchData['category']);
            if (!empty($searchCategory)) {
                $operator_array[0] = array('operator' => 'IN', 'op_from' => 'c.slug', 'op_allies' => 'miarray', 'op_value' => $searchCategory);
            }
        } elseif (!empty($categoryId)) {
            $join_array[1] = array('type' => '', 'join_from' => 'pc.category', 'join_to' => 'c.id', 'join_allies' => 'c', 'join_class' => 'CatalogueBundle:Category', 'join_condition' => "AND c.id = '" . $categoryId . "' AND c.status = 1 AND c.isDeleted = 0");
        } else {
            $join_array[1] = array('type' => '', 'join_from' => 'pc.category', 'join_to' => 'c.id', 'join_allies' => 'c', 'join_class' => 'CatalogueBundle:Category', 'join_condition' => "AND c.status = 1 AND c.isDeleted = 0");
        }
        $join_array[2] = array('type' => '', 'join_from' => 'p.brand', 'join_to' => 'b.id', 'join_allies' => 'b', 'join_class' => 'CatalogueBundle:Brand', 'join_condition' => 'AND b.status = 1 AND b.isDeleted = 0');
        if (!empty($brandId)) {
            $join_array[2]['join_condition'] = "AND b.id = '" . $brandId . "' AND b.status = 1 AND b.isDeleted = 0";
        }
        if (!empty($searchData['brand'])) {
            $searchBrand = explode('|', $searchData['brand']);
            if (!empty($searchBrand)) {
                $operator_array[1] = array('operator' => 'IN', 'op_from' => 'b.slug', 'op_allies' => 'miarray1', 'op_value' => $searchBrand);
            }
        }
        $join_array[3]['type'] = '';
        $join_array[3]['join_from'] = 'p.ctbRefId';
        $join_array[3]['join_to'] = 'pl.productRefId';
        $join_array[3]['join_allies'] = 'pl';
        $join_array[3]['join_class'] = 'CatalogueBundle:ProductLang';
        $join_array[3]['join_condition'] = $product_lang_condition." AND pl.langRefId = '" . $defaultLangRefId . "' ";
        
        $join_array[13]['type'] = '';
        $join_array[13]['join_from'] = 'pl.langRefId';
        $join_array[13]['join_to'] = 'l.ctbRefId';
        $join_array[13]['join_allies'] = 'l';
        $join_array[13]['join_class'] = 'LocalizationBundle:Language';
        $join_array[13]['join_condition'] = "AND l.ctbRefId = '" . $defaultLangRefId . "' ";
        
        $join_array[14]['type'] = '';
        $join_array[14]['join_from'] = 'b.ctbRefId';
        $join_array[14]['join_to'] = 'bl.brandRefId';
        $join_array[14]['join_allies'] = 'bl';
        $join_array[14]['join_class'] = 'CatalogueBundle:BrandLang';
        $join_array[14]['join_condition'] = "AND bl.langRefId = '" . $defaultLangRefId . "'";
        
        $join_array[15]['type'] = '';
        $join_array[15]['join_from'] = 'c.ctbRefId';
        $join_array[15]['join_to'] = 'cl.catRefId';
        $join_array[15]['join_allies'] = 'cl';
        $join_array[15]['join_class'] = 'CatalogueBundle:CategoryLang';
        $join_array[15]['join_condition'] = "AND cl.langRefId = '" . $defaultLangRefId . "'";
        
        // lang related changes end--
        $join_array[4] = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'pm.product', 'join_allies' => 'pm', 'join_class' => 'CatalogueBundle:ProductMarking', 'join_condition' => "");
        if (is_numeric($defaultSorting)) {
            $join_array[4]['join_condition'] = 'AND pm.status = 1 AND pm.isDeleted = 0 AND pm.marking =' . $defaultSorting;
        } elseif (!empty($promotionId)) {
            $join_array[4]['join_condition'] = "AND pm.status = 1 AND pm.isDeleted = 0";
        } elseif (!empty($ecircularId)) {
            //$join_array[4]['join_condition'] = "AND pm.status = 1 AND pm.isDeleted = 0 AND pm.ecircularId =" . $ecircularId;
            $join_array[4]['join_condition'] = "AND pm.status = 1 AND pm.isDeleted = 0";
        } else {
            $join_array[4]['join_condition'] = 'AND pm.status = 1 AND pm.isDeleted = 0';
        }
        $join_array[5] = array('type' => 'left', 'join_from' => 'pm.marking', 'join_to' => 'm.id', 'join_allies' => 'm', 'join_class' => 'CatalogueBundle:Marking', 'join_condition' => "AND m.status = 1 AND m.isDeleted = 0");
        if (!empty($searchData['rating'])) {
            $searchRating    = str_replace('|', ',', $searchData['rating']);
            $join_array[6]   = array('type' => '', 'join_from' => 'p.id', 'join_to' => 'rr.orderId', 'join_allies' => 'rr', 'join_class' => 'CatalogueBundle:ReviewRating', 'join_condition' => "AND rr.status = 2 AND rr.isDeleted = 0");
            $having_array[2] = "productRoundRating IN ($searchRating)";
        } else {
            $join_array[6] = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'rr.orderId', 'join_allies' => 'rr', 'join_class' => 'CatalogueBundle:ReviewRating', 'join_condition' => "AND rr.status = 2 AND rr.isDeleted = 0");
        }
        $join_array[7] = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'pv.product', 'join_allies' => 'pv', 'join_class' => 'CatalogueBundle:ProductVariation', 'join_condition' => "AND pv.status = 1 AND pv.isDeleted = 0");
        if (!empty($searchData['attribute'])) {
            $searchAttribute = explode('|', $searchData['attribute']);
            $join_array[8]   = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'pa.product', 'join_allies' => 'pa', 'join_class' => 'CatalogueBundle:ProductAttribute', 'join_condition' => "AND pa.status = 1 AND pa.isDeleted = 0");
            $join_array[9]   = array('type' => 'left', 'join_from' => 'pa.attribute', 'join_to' => 'a.id', 'join_allies' => 'a', 'join_class' => 'CatalogueBundle:Attribute', 'join_condition' => "AND a.status = 1 AND a.isDeleted = 0");
            // Attribute lang related changes start--
            $join_array[10]   = array('type' => 'left', 'join_from' => 'a.ctbRefId', 'join_to' => 'al.attributeRefId', 'join_allies' => 'al', 'join_class' => 'CatalogueBundle:AttributeLang', 'join_condition' => "AND al.langRefId = '" . $defaultLangRefId . "' ");
            // Attribute lang related changes end--
            if (!empty($searchAttribute)) {
                $operator_array[2] = array('operator' => 'IN', 'op_from' => 'a.slug', 'op_allies' => 'miarray2', 'op_value' => $searchAttribute);
            }
        }
        if (!empty($productCommaValueSql)) {
            $operator_array[3] = array('operator' => 'IN', 'op_from' => 'p.id', 'op_allies' => 'miarray3', 'op_value' => $productCommaValueSql);
        }
        if (!empty($recentProduct)) {
            $recProductComma = explode(',', $recentProduct);
            if (!empty($recProductComma)) {
                $operator_array[4] = array('operator' => 'IN', 'op_from' => 'p.id', 'op_allies' => 'miarray4', 'op_value' => $recProductComma);
            }
        }
        if (!empty($reletedProduct)) {
            if (!is_array($reletedProduct)) {
                $relatedProductComma = explode(',', $reletedProduct);
                if (!empty($relatedProductComma)) {
                    $operator_array[5] = array('operator' => 'IN', 'op_from' => 'p.sku', 'op_allies' => 'miarray5', 'op_value' => $relatedProductComma);
                }
            }
        }
        if (!empty($collectionProduct)) {
            if (!is_array($collectionProduct)) {
                $collectionProductComma = explode(',', $collectionProduct);
                if (!empty($collectionProductComma)) {
                    $operator_array[8] = array('operator' => 'IN', 'op_from' => 'p.sku', 'op_allies' => 'miarray8', 'op_value' => $collectionProductComma);
                }
            }
        }
        
        if (!empty($searchData['manufacturer'])) {            
            //$join_array[10]     = array('type' => 'left', 'join_from' => 'b.manufacturerId', 'join_to' => 'mf.id', 'join_allies' => 'mf', 'join_class' => 'CatalogueBundle:Manufacturers', 'join_condition' => "AND mf.status = 1 AND mf.isDeleted = 0");
            // Update Key as 11 due to Attribute lang related changes starts--
            $join_array[11]     = array('type' => 'left', 'join_from' => 'b.manufacturerId', 'join_to' => 'mf.id', 'join_allies' => 'mf', 'join_class' => 'CatalogueBundle:Manufacturers', 'join_condition' => "AND mf.status = 1 AND mf.isDeleted = 0");
            // Update Key as 11 due to Attribute lang related changes end--
            $searchManufacturer = explode('|', $searchData['manufacturer']);
            if (!empty($searchManufacturer)) {
                $operator_array[6] = array('operator' => 'IN', 'op_from' => 'mf.slug', 'op_allies' => 'miarray6', 'op_value' => $searchManufacturer);
            }
        }

        if (!empty($searchData['promotion'])) {
            $searchPromotion = explode('|', $searchData['promotion']);
            if (!empty($searchPromotion)) {
                $operator_array[7] = array('operator' => 'IN', 'op_from' => 'm.id', 'op_allies' => 'miarray7', 'op_value' => $searchPromotion);
            }
        }        

        if (isset($searchData['productCommaValue']) && $searchData['productCommaValue']!='') {
            $operator_array[9] = array('operator' => 'IN', 'op_from' => 'p.id', 'op_allies' => 'miarray9', 'op_value' => $searchData['productCommaValue']);
        } 

        $join_array[11]     = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'rp.productId', 'join_allies' => 'rp', 'join_class' => 'CatalogueBundle:ProductPricing', 'join_condition' => "AND rp.columnKey = 'retail_price'");
        $join_array[12]     = array('type' => 'left', 'join_from' => 'p.id', 'join_to' => 'mp.productId', 'join_allies' => 'mp', 'join_class' => 'CatalogueBundle:ProductPricing', 'join_condition' => "AND mp.columnKey = 'map_price'");
        $join_array = array_values($join_array);
        $having_array = array_values($having_array);
        if (!empty($searchData['attribute'])) {
            $data    = "p.id,p.ctbRefId,p.productType,pl.name,p.sku,p.basePrice,p.salePrice,p.msrpPrice,p.mainImage,p.placeFrom,p.taxId,p.taxFlag,p.slug,p.sortOrder,p.masterStock,pl.shortDescription,p.tradeName,b.id as brandId,bl.name as brandName,b.slug as brandSlug,b.folderName, b.hideShowButtons as brandButtons,b.placeFrom as brandPlaceFrom, b.buttonSetting, c.id as categoryId,cl.name as categoryName,c.slug as categorySlug, count(a.id) as attributeCount, a.id as attribute_id, al.attributeName, a.slug as attributeSlug, AVG(rr.ratingStar) as productRating, ROUND(AVG(rr.ratingStar)) as productRoundRating, case when pm.marking IS NOT NULL then 1 else 0 end as mark, pv.id as productVariationId, pv.variationDescription, case when MIN(m.sortOrder) IS NOT NULL then MIN(m.sortOrder) else '99999' end as promotion_sort, PRODUCT_PRICE(p.id, p.salePrice, '".$SiteData['gmttime']."', case when rp.columnValue IS NOT NULL then rp.columnValue else '0.00' end, case when mp.columnValue IS NOT NULL then mp.columnValue else '0.00' end) as final_price, rp.columnValue as retail_price, mp.columnValue as map_price";            
            $groupby = 'p.id';
        } else {
            if ($themename != 'hunterdouglas') {
                $data = "p.id,p.ctbRefId,p.productType,pl.name,p.sku,p.basePrice,p.salePrice,p.msrpPrice,p.mainImage,p.placeFrom,p.taxId,p.taxFlag,p.slug,p.sortOrder,p.masterStock,pl.shortDescription,p.tradeName,b.id as brandId,bl.name as brandName,b.slug as brandSlug,b.folderName, b.hideShowButtons as brandButtons,b.placeFrom as brandPlaceFrom, b.buttonSetting, c.id as categoryId,cl.name as categoryName,c.slug as categorySlug, AVG(rr.ratingStar) as productRating, ROUND(AVG(rr.ratingStar)) as productRoundRating, case when pm.marking IS NOT NULL then 1 else 0 end as mark, pv.id as productVariationId, pv.variationDescription, case when MIN(m.sortOrder) IS NOT NULL then MIN(m.sortOrder) else '99999' end as promotion_sort, PRODUCT_PRICE(p.id, p.salePrice, '".$SiteData['gmttime']."', case when rp.columnValue IS NOT NULL then rp.columnValue else '0.00' end, case when mp.columnValue IS NOT NULL then mp.columnValue else '0.00' end) as final_price, rp.columnValue as retail_price, mp.columnValue as map_price";                
            } else {
                $data = "p.id,p.ctbRefId,p.productType,pl.name,p.sku,p.basePrice,p.salePrice,p.msrpPrice,p.mainImage,p.placeFrom,p.taxId,p.taxFlag,p.slug,p.sortOrder,p.masterStock,pl.shortDescription,p.tradeName,b.id as brandId,bl.name as brandName,b.slug as brandSlug,b.folderName, b.hideShowButtons as brandButtons,b.placeFrom as brandPlaceFrom, b.buttonSetting, c.id as categoryId,cl.name as categoryName,c.slug as categorySlug, AVG(rr.ratingStar) as productRating, ROUND(AVG(rr.ratingStar)) as productRoundRating, case when pm.marking IS NOT NULL then 1 else 0 end as mark, pv.id as productVariationId, pv.variationDescription,  case when MIN(m.sortOrder) IS NOT NULL then MIN(m.sortOrder) else '99999' end as promotion_sort, PRODUCT_PRICE(p.id, p.salePrice, '".$SiteData['gmttime']."', case when rp.columnValue IS NOT NULL then rp.columnValue else '0.00' end, case when mp.columnValue IS NOT NULL then mp.columnValue else '0.00' end) as final_price, rp.columnValue as retail_price, mp.columnValue as map_price";
            }
            $groupby = 'p.id';
        }
        //Start: This if condition is for display balnk product record in frontend (T-0097052 - Content: Maintenance) {Done by Vishwa}
        if($theme_config['advance_filter_tab'] == 'No'){
            if (empty($searchData['category']) && empty($searchData['brand']) && empty($searchData['manufacturer']) && empty($searchData['promotion']) && empty($searchData['attribute']) && empty($searchData['rating']) && empty($searchData['price']) && empty($ecircularId) && empty($productData)) {
                $join_array[1] = array();
                $join_array[1] = array('type' => '', 'join_from' => 'pc.category', 'join_to' => 'c.id', 'join_allies' => 'c', 'join_class' => 'CatalogueBundle:Category', 'join_condition' => 'AND c.status = 1 AND c.isDeleted = 0');

                $operator_array    = array();
                if(!empty($comma_category)){
                    $operator_array[0] = array('operator' => 'IN', 'op_from' => 'c.slug', 'op_allies' => 'miarray', 'op_value' => explode(',', $comma_category));
                }
            }
        }
        //End {Done by vishwa}
        $result      = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Product", $allies = 'p', $condition_array, $operator_array, $data, $groupby, $sortby, $orderby, $limit = $item_limit, $offset = $item_offset, $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = false, $having_array, $returnTotal = true);
        $productData = $result['records'];
        $totalProductCount = $result['total'];
        $filtered_commaseprate_product_id = $result['ids'];

        // As per the Instructions code is commented by Gayatri T-0112242 - Bug/Issue - Dynamic filter - Multiple Vendors - Dream Decor
        /*$em = $this->getDoctrine()->getManager();
        $sql = "SELECT p.id from product p inner join product_category pc on pc.product_id=p.id inner join category c on c.id = pc.category_id and c.id='" . $categoryId . "' and c.status=1 and c.is_deleted=0 where p.status=1 and p.is_deleted=0 and p.base_price>0 group by p.id";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $allProduct = $statement->fetchAll();

            $allProductId = implode(', ', array_map(function ($entry) {  
                                                    return ($entry[key($entry)]);  
                                                    }, $allProduct));  
                
        $filtered_commaseprate_product_id = $allProductId;*/
        // End by Gayatri

        $pTot = ceil($totalProductCount / $item_limit);

        $commaSeparatedProductId = $currentUrl = '';
        if (!empty($productData)) {
            $currentUrl              = $baseUrl . 'c/' . $productData[0]['categorySlug'];
            $commaSeparatedProductId = implode(",", array_column($productData, "id"));
        }
        if (!empty($productData) && ($totalProductCount > $item_limit)) {
            $pagination_param = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageno, 'current_url' => $currentUrl, 'total_count' => $totalProductCount, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
            $pagination       = $this->generatePagination($pagination_param, $themename);

            $paginationData['pLinks']      = $linksPerPage;
            $paginationData['pMids']       = $midRange;
            $paginationData['pTot']        = $pTot;
            $paginationData['pSel']        = $pageno;
            $paginationData['url']         = $currentUrl;
            $paginationData['total_count'] = $totalProductCount;
            $paginationData['offset']      = $item_offset;
            $paginationData['limit']       = $item_limit;
        }
        /* FILTER */
        $filterData      = array();
        //$filterProductId = $this->getCommaseparatedIds($totalProductData);
        $filterProductId = $filtered_commaseprate_product_id; //rtrim($totalProductData['0']['commaseprate_product_id'],",");
        if (!empty($filterProductId)) {
            $is_search_page = 0;
            if(!empty($searchKeyword)){
                $is_search_page = 1;
            }
            $filterData = $this->getMainFilterdata($categoryId, $filterProductId, $brandId, $is_search_page, $SiteData);
        }
        /* FILTER */
        //rating
        //rating
        $cdnurl = $this->getParameter('cdnurl');
        $InstallmentSetting = array();
        $InstallmentSetting['isInstallment'] = 0;
        foreach ($productData as $key => $value) {
            $show_msrp_pricing = 1;
            $productData[$key]['prdStarData'] = array('cw' => 143, 'productStar' => number_format($value['productRating'], 2));
            $productData[$key]['starWidth']   = $this->starWidth($productData[$key]['prdStarData']);
            $getWidhtExplode                  = explode('.', $productData[$key]['starWidth']);
            $productData[$key]['starWidth']   = (int) ($getWidhtExplode[0]);
            if (is_nan($productData[$key]['starWidth'])) {
                $productData[$key]['starWidth'] = 0;
            }
            if (!empty($SiteData['category_listbox_style']['category_show_attribute']) && $SiteData['category_listbox_style']['category_show_attribute'] == 'Yes') {
                $productData[$key]['attributeCoverName'] = $this->getThumbnailAttributeData($productData[$key]['id']);
            }

            if (!empty($value['final_price'])) {
                $gta = array();
                $gta['id'] = $value['id'];
                $gta['ctbRefId'] = $value['ctbRefId'];
                // Displaying product data in the default language in case data is not available with the selected language
                if(empty($value['name'])) {
                    $productDefaultData = $this->getProductDefaultLangData($value['ctbRefId']);
                    $value['name'] = $productDefaultData['name'];
                    if(empty($value['shortDescription'])) {
                        $value['shortDescription'] = $productDefaultData['shortDescription'];
                    }
                }
                
                $gta['name'] = $value['name'] = htmlspecialchars($value['name'], ENT_QUOTES, 'UTF-8');
                $gta['brand']         = $value['brandName'];
                $gta['category']      = $value['categoryName'];
                $gta['list_position'] = $value['sortOrder'];
                $gta['quantity']      = $value['masterStock'];
                $gta['price']         = $value['final_price'];
                if (!empty($value['name']) && strlen($value['name']) > 100) {
                    $productData[$key]['shortName'] = $this->getShortname($value['name'], 100);
                } else {
                    $productData[$key]['shortName'] = $value['name'];
                }
                $productData[$key]['encId']        = $GeneralFunction->encryptString($value['id']);
                $productData[$key]['mainImageUrl'] = $productData[$key]['mainBigImageUrl'] = '';

                $productImageUrl                        = $this->getProductImageUrl($value['mainImage'], $value['folderName']);
                $productData[$key]['mainImageUrl']      = $productImageUrl['small'];
                $productData[$key]['mainBigImageUrl']   = $productImageUrl['high'];
                $productData[$key]['mainPrintImageUrl'] = $productImageUrl['print'];

                $productData[$key]['productUrl'] = $baseUrl . 'p/' . $value['slug'];

                //product variation
                $variationDescriptionJson                                   = $value['variationDescription'];
                $variationDescription                                       = json_decode($variationDescriptionJson, true);
                $productData[$key]['VariationData']['isVariation']          = 0;
                $productData[$key]['VariationData']['productVariationId']   = $productData[$key]['productVariationId'];
                $productData[$key]['VariationData']['variationDescription'] = $productData[$key]['variationDescription'];
                if (!empty($variationDescription) && count($variationDescription) > 0) {
                    $variationPrice = array_column($variationDescription, 'sale_price');
                    $minSalePrice   = min($variationPrice);
                    //$minSalePrice = min(array_diff(array_map('floatval', $variationPrice), array(0)));
                    $maxSalePrice                                       = max($variationPrice);
                    $productData[$key]['VariationData']['isVariation']  = 1;
                    $productData[$key]['VariationData']['minSalePrice'] = $minSalePrice;
                    $productData[$key]['VariationData']['maxSalePrice'] = $maxSalePrice;
                    $productData[$key]['maxSalePrice']                  = $maxSalePrice;
                }
                unset($productData[$key]['productVariationId']);
                unset($productData[$key]['variationDescription']);

                $taxFlag                = $value['taxFlag'];
                $taxId                  = $value['taxId'];
                $product_data_attribute = array('productId' => $value['id'], 'taxFlag' => $taxFlag, 'taxId' => $taxId);

                if ($productData[$key]['productType'] == 2 && $productData[$key]['VariationData']['isVariation'] == 1) {
                    $msrp_data     = $this->getMsrpPrice($value['final_price'], $product_data_attribute, true);
                    $min_msrp_data = $this->getMsrpPrice($productData[$key]['VariationData']['minSalePrice'], $product_data_attribute, true);
                    $max_msrp_data = $this->getMsrpPrice($productData[$key]['VariationData']['maxSalePrice'], $product_data_attribute, true);

                    $productData[$key]['msrpData']['msrp_price']          = ($max_msrp_data['msrp_price'] - $min_msrp_data['msrp_price'] > 0) ? $min_msrp_data['msrp_price'] . ' - ' . $max_msrp_data['msrp_price'] : $max_msrp_data['msrp_price'];
                    $productData[$key]['msrpData']['save_price']          = ($max_msrp_data['save_price'] - $min_msrp_data['save_price'] > 0) ? $min_msrp_data['save_price'] . ' - ' . $max_msrp_data['save_price'] : $max_msrp_data['save_price'];
                    $productData[$key]['msrpData']['sale_price']          = ($max_msrp_data['sale_price'] - $min_msrp_data['sale_price'] > 0) ? $min_msrp_data['sale_price'] . ' - ' . $max_msrp_data['sale_price'] : $max_msrp_data['sale_price'];
                    $productData[$key]['msrpData']['msrp_price_currency'] = ($max_msrp_data['msrp_price'] - $min_msrp_data['msrp_price'] > 0) ? $min_msrp_data['msrp_price_currency'] . ' - ' . $max_msrp_data['msrp_price_currency'] : $max_msrp_data['msrp_price_currency'];
                    $productData[$key]['msrpData']['save_price_currency'] = ($max_msrp_data['save_price'] - $min_msrp_data['save_price'] > 0) ? $min_msrp_data['save_price_currency'] . ' - ' . $max_msrp_data['save_price_currency'] : $max_msrp_data['save_price_currency'];
                    $productData[$key]['msrpData']['sale_price_currency'] = ($max_msrp_data['sale_price'] - $min_msrp_data['sale_price'] > 0) ? $min_msrp_data['sale_price_currency'] . ' - ' . $max_msrp_data['sale_price_currency'] : $max_msrp_data['sale_price_currency'];
                } else {
                    $calculatedPrice = (isset($value['msrpPrice']) && $value['msrpPrice']>0.00)?array('msrp'=>$value['msrpPrice'],'sale'=>$value['final_price']):$value['final_price'];
                    $msrp_data = $this->getMsrpPrice($calculatedPrice, $product_data_attribute);
                    $productData[$key]['msrpData'] =  $msrp_data;
                        if(isset($msrp_data['msrp_price_p']['price_with_tax_inclusive_show_separate_tax'])){
                            $productData[$key]['msrpData'] =  $msrp_data['msrp_price_p'];
                        }
                  //  $productData[$key]['msrpData'] = $msrp_data;
                }
                $buttonType       = array('showCart', 'showWishlist', 'showGiftRegistry', 'showInquiry', 'showPrice', 'showRatings', 'showColorSwatches', 'showInstallment', 'showMsrp', 'showMsrpPromotion', 'showQuickView', 'showImageDownload', 'showSku', 'showBrand', 'showAttributeName', 'showAttribute');
                $data             = array('brandId' => $value['brandId'], 'button_setting' => $value['buttonSetting'], 'brand_buttons' => $value['brandButtons']);
                $categoryShowCart = $this->pageHideShowSetting($buttonType, $data, $page = 'category', $SiteData);

                $productData[$key]['categoryShowCart'] = $categoryShowCart;
                if ($SiteData['ecommerce'] == 'Yes' && !empty($InstallmentData['id']) && !empty($InstallmentData['installmentSettingId'])) {
                    $category_show_installment = $SiteData['category_listbox_style']['category_show_installment'];
                    if (!empty($category_show_installment) && $category_show_installment == 'Yes') {
                        $noOfInstallment = 0;
                        if (empty($InstallmentData['allowAllBrand'])) {
                            $condition_array             = array('ibs.installment' => $InstallmentData['id'], 'ibs.brand' => $value['brandId']);
                            $InstallmentBrandSettingData = $GeneralService->selectDataByCondition($tableclass = "SystemBundle:InstallmentBrandSetting", $allies = 'ibs', $condition_array, $operator_array = array(), $data = 'ibs.noOfInstallment', $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);

                            if (!empty($InstallmentBrandSettingData)) {
                                $noOfInstallment = $InstallmentBrandSettingData[0]['noOfInstallment'];
                            }
                        } else {
                            $noOfInstallment = $InstallmentData['noOfInstallment'];
                        }
                        if ($noOfInstallment > 0) {
                            $InstallmentSetting['isInstallment'] = 1;
                            $maximum_no_of_installment           = $noOfInstallment;
                            $installmentDuration                 = $InstallmentData['installmentType'] == 'week' ? 'Week' : 'Month';
                            if ($productData[$key]['VariationData']['isVariation'] == 0) {
                                $installSalePrice    = $msrp_data['sale_price'];
                                $additionalSalePrice = ($installSalePrice * $InstallmentData['additionalSalePrice']) / 100;
                                $installSalePrice    = $installSalePrice + $additionalSalePrice;
                                $sale_price_tax      = ($msrp_data['totalTaxRate'] * $installSalePrice) / 100;

                                $downPayment     = $InstallmentData['downPayment'];
                                $downPaymentType = $InstallmentData['downPaymentType'];

                                $remainingSalePrice = $installSalePrice;
                                if (!empty($downPayment)) {
                                    if ($downPaymentType == '$') {
                                        $remainingSalePrice = $installSalePrice - $downPayment;
                                    } else {
                                        $remainingSalePrice = $installSalePrice - (($installSalePrice * $downPayment) / 100);
                                    }
                                }
                                if (!empty($InstallmentData['allowOnTax']) || $InstallmentData['allowOnTax'] == 1) {
                                    $remainingSalePrice += $sale_price_tax;
                                }
                                $installment_amount               = $remainingSalePrice / $maximum_no_of_installment;
                                $installment_amount_with_currency = $GeneralService->currencyFormatting($installment_amount);
                            } else {
                                //MIN INSTALLMENT
                                $installSalePriceMin    = $min_msrp_data['sale_price'];
                                $additionalSalePriceMin = ($installSalePriceMin * $InstallmentData['additionalSalePrice']) / 100;
                                $installSalePriceMin    = $installSalePriceMin + $additionalSalePriceMin;
                                $sale_price_tax_min     = ($min_msrp_data['totalTaxRate'] * $installSalePriceMin) / 100;

                                $downPayment     = $InstallmentData['downPayment'];
                                $downPaymentType = $InstallmentData['downPaymentType'];

                                $remainingSalePriceMin = $installSalePriceMin;
                                if (!empty($downPayment)) {
                                    if ($downPaymentType == '$') {
                                        $remainingSalePriceMin = $installSalePriceMin - $downPayment;
                                    } else {
                                        $remainingSalePriceMin = $installSalePriceMin - (($installSalePriceMin * $downPayment) / 100);
                                    }
                                }
                                if (!empty($InstallmentData['allowOnTax']) || $InstallmentData['allowOnTax'] == 1) {
                                    $remainingSalePriceMin += $sale_price_tax_min;
                                }
                                $installment_amount                   = $installment_amount_min                   = $remainingSalePriceMin / $maximum_no_of_installment;
                                $installment_amount_with_currency_min = $GeneralService->currencyFormatting($installment_amount_min);

                                //MAX INSTALLMENT

                                $installSalePriceMax    = $max_msrp_data['sale_price'];
                                $additionalSalePriceMax = ($installSalePriceMax * $InstallmentData['additionalSalePrice']) / 100;
                                $installSalePriceMax    = $installSalePriceMax + $additionalSalePriceMax;
                                $sale_price_tax_max     = ($max_msrp_data['totalTaxRate'] * $installSalePriceMax) / 100;

                                $downPayment     = $InstallmentData['downPayment'];
                                $downPaymentType = $InstallmentData['downPaymentType'];

                                $remainingSalePriceMax = $installSalePriceMax;
                                if (!empty($downPayment)) {
                                    if ($downPaymentType == '$') {
                                        $remainingSalePriceMax = $installSalePriceMax - $downPayment;
                                    } else {
                                        $remainingSalePriceMax = $installSalePriceMax - (($installSalePriceMax * $downPayment) / 100);
                                    }
                                }
                                if (!empty($InstallmentData['allowOnTax']) || $InstallmentData['allowOnTax'] == 1) {
                                    $remainingSalePriceMax += $sale_price_tax_max;
                                }
                                $installment_amount_max               = $remainingSalePriceMax / $maximum_no_of_installment;
                                $installment_amount_with_currency_max = $GeneralService->currencyFormatting($installment_amount_max);
                                if ($installment_amount_max - $installment_amount_min > 0) {
                                    $installment_amount_with_currency = $installment_amount_with_currency_min . ' - ' . $installment_amount_with_currency_max;
                                } else {
                                    $installment_amount_with_currency = $installment_amount_with_currency_max;
                                }
                            }
                            $installmentLable         = '';
                            $installmentDurationTrans = ($installmentDuration == 'Month') ? $this->get('translator')->trans('front_month') : $this->get('translator')->trans('front_week');
                            $installmentLable         = $installment_amount_with_currency . ' ' . str_replace('%installment_duration%', $installmentDurationTrans, $this->get('translator')->trans('front_installment_duration'));
                            $installment_title        = json_decode($InstallmentData['title'], true);
                            $installmentTitle         = '';
                            if ($installment_amount > 0) {
                                $InstallmentSetting['installmentTitle'] = is_array($installment_title) ? $installment_title[$language_code] : $InstallmentData['title'];
                                $InstallmentSetting['installmentLable'] = $installmentLable;
                                $InstallmentSetting['RibbonDetails'] = json_decode($InstallmentData['RibbonDetails'],true);
                                $InstallmentSetting['ImageDetails'] = $InstallmentData['ImageDetails'];
                                $InstallmentSetting['DisplayPosition'] = $InstallmentData['DisplayPosition'];
                                $InstallmentSetting['PromotionShowOn'] = 0;
                                if (!empty($InstallmentData)) {
                                    switch ($InstallmentData['PromotionShowOn']) {
                                        case "dealer_only":
                                        $session = new Session();
                                        if (!empty($session->get('userTypeId')) && !empty($session->get('userTypeSlug')) && $session->get('userTypeSlug') == 'dealer') {
                                            $InstallmentSetting['PromotionShowOn'] = 1;
                                        }
                                        break;
                                        case "customer_only":
                                        $session = new Session();
                                        if (!empty($session->get('userTypeId')) && $session->get('userTypeId') > 0) {
                                            $InstallmentSetting['PromotionShowOn'] = 0;
                                        } else {
                                            $InstallmentSetting['PromotionShowOn'] = 1;
                                        }
                                        break;
                                        default:$InstallmentSetting['PromotionShowOn'] = 1;
                                    }
                                }
                            } else {
                                $InstallmentSetting['isInstallment'] = 0;
                            }
                        }
                    }
                }
                if (!empty($collectionProduct)) {
                    $QuickViewFor='coll_';
                }
                if (!empty($recentProduct)) {
                    $QuickViewFor='rec_';
                }
                $productData[$key]['QuickViewFor'] = $QuickViewFor;
                $productData[$key]['InstallmentSetting'] = $InstallmentSetting;
                $productData[$key]['MarkingData']        = $this->getMarkingonProduct($pId = $value['id'], $page = "category", $SiteData, $productData[$key]['InstallmentSetting']['isInstallment']);
                $markingData                             = $productData[$key]['MarkingData']['data'];
                foreach ($markingData as $marking) {
                    $gtaPro      = array();
                    $isAvailable = array_search($marking['marking_id'], array_column($gtaPromotionData, 'id'));
                    if(isset($marking['show_msrp_pricing']) && $marking['show_msrp_pricing'] == 0){
                        $show_msrp_pricing = 0;
                    }
                    if (empty($isAvailable) && !is_numeric($isAvailable)) {
                        $gtaPro['id']   = $marking['marking_id'];
                        $gtaPro['name'] = $marking['marking_name'];
                        array_push($gtaPromotionData, $gtaPro);
                    }
                }
                $productData[$key]['show_msrp_pricing'] = $show_msrp_pricing;
                array_push($gtaData, $gta);
            }
        }
        $column = $this->getColumnList();

        $partialTemplate = 'CatalogueBundle:' . $themename . ':category/_productlist.html.twig';
        if (!$this->get('templating')->exists($partialTemplate)) {
            $partialTemplate = 'CatalogueBundle:default:category/_productlist.html.twig';
        }     
        $wishlistProductIds = $GeneralService->getWishlistProductIds();
        //echo "<pre>";print_r($productData);exit;
        //$productHtml = $this->renderView($partialTemplate, array('productData' => $productData, 'SiteSetting' => $SiteSetting, 'CommonVariable' => $CommonVariable, 'userTypeId' => $userTypeId, 'userTypeEcommerceOn' => $userTypeEcommerceOn, 'column' => $column, 'GeneralService' => $GeneralService));
        $productHtml = $this->renderView($partialTemplate, array('productData' => $productData, 'SiteData' => $SiteData, 'userTypeId' => $userTypeId, 'userTypeEcommerceOn' => $userTypeEcommerceOn, 'column' => $column, 'GeneralService' => $GeneralService,'wishlistProductIds' => $wishlistProductIds));
        $return_array                            = array();
        $return_array['html']                    = $productHtml;
        $return_array['filterData']              = $filterData;
        $return_array['pagination']              = $pagination;
        $return_array['paginationData']          = $paginationData;
        $return_array['totalProductCount']       = $totalProductCount;
        $return_array['gtaData']                 = json_encode($gtaData);
        $return_array['gtaPromotionData']        = json_encode($gtaPromotionData);
        $return_array['comma_separated_product'] = $commaSeparatedProductId;
        return $return_array;
    }

    /**
     * Displaying product data in the default language 
     * in case data is not available with the selected language
     * @param string $ctbRefId
     * @return array
     */
    public function getProductDefaultLangData($ctbRefId) {
        $GeneralService = $this->get(GeneralService::class);
        $defaultLangRefId = $GeneralService->getDefaultLangRefId();
        $em = $this->getDoctrine()->getManager();
        $productLangObj = $em->getRepository('CatalogueBundle:ProductLang')
                            ->findOneBy([
                                'productRefId' => $ctbRefId,
                                'langRefId' => $defaultLangRefId
                            ]);

        $productData = [];
        if (!empty($productLangObj)) {
            $pName = $productLangObj->getName();
            $productData['name'] = htmlspecialchars($pName, ENT_QUOTES, 'UTF-8');
            $productData['shortDescription'] = $productLangObj->getShortDescription();
            $productData['fullDescription'] = $productLangObj->getFullDescription();
            $productData['metaTitle'] = $productLangObj->getMetaTitle();
            $productData['metaDescription'] = $productLangObj->getMetaDescription();
            $productData['metaKeyword'] = $productLangObj->getMetaKeyword();
            $productData['bulletFeatures'] = $productLangObj->getBulletFeatures();
            $productData['advanceDimension'] = $productLangObj->getAdvanceDimension();
        }

        return $productData;
    }

    /*====START :: REN11 Function added for search functionality========*/
    public function getContentData($param = array(), $otherParam = array())
    {
        $item_offset     = 0;
        $pageno          = $param['pageNo'];
        $GeneralService  = $otherParam['GeneralService'];
        $GeneralFunction = $otherParam['GeneralFunction'];
        $SiteSetting     = $otherParam['SiteSetting'];
        $item_limit      = $SiteSetting['pageSetting'];
        if (empty($pageno)) {
            $pageno = 1;
        } else {
            $item_offset = ($pageno - 1) * $item_limit;
        }
        $pTot                = '';
        $linksPerPage        = 5;
        $midRange            = 3;
        $themename           = $SiteSetting['themename'];
        $CommonVariable      = $otherParam['CommonVariable'];
        $language_code       = $CommonVariable['LangCode'];
        $baseUrl             = $CommonVariable['BaseUrl'];
        $showItemData        = $otherParam['showItemData'];
        $returnContentData   = array();
        $repository          = $this->getDoctrine()->getRepository(CmsPage::class);
        $column              = $this->getColumnList();
        $currentUrl          = '';
        $frontLanguage       = $otherParam['CommonVariable']['LangId'];
        $langRefId    = $otherParam['CommonVariable']['LangRefId'];
        
        $getCountContentData = $repository->createQueryBuilder('cp')
            ->select('count(cp.id)')
            ->leftjoin('ContentcmsBundle:CmsPageLang', 'cpl', 'WITH', 'cp.uuId = cpl.pageRefId')
            ->where('cp.status = :status')
            ->andwhere('cp.isDeleted = :deleted')
            ->andwhere('cpl.langRefId = :langRefId')
            ->andwhere('cpl.pageName  LIKE :keyword OR cp.slug  LIKE :keyword OR cpl.metaTitle  LIKE :keyword OR cpl.metaDescription  LIKE :keyword OR cpl.metaKeyword  LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langRefId', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->getQuery()->getSingleScalarResult();
        $getContentData = $repository->createQueryBuilder('cp')
            ->select('cp.id,cpl.pageName,cpl.pageDescription,cp.slug')
            ->leftjoin('ContentcmsBundle:CmsPageLang', 'cpl', 'WITH', 'cp.uuId = cpl.pageRefId')
            ->where('cp.status = :status')
            ->andwhere('cp.isDeleted = :deleted')
            ->andwhere('cpl.langRefId = :langRefId')
            ->andwhere('cpl.pageName  LIKE :keyword OR cp.slug  LIKE :keyword OR cpl.metaTitle  LIKE :keyword OR cpl.metaDescription  LIKE :keyword OR cpl.metaKeyword  LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langRefId', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->orderBy('cp.id', 'ASC')
            ->setFirstResult($item_offset)->setMaxResults($item_limit)
            ->getQuery()->getResult();
        $pTot               = ceil($getCountContentData / $item_limit);
        $pagination_param   = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageno, 'current_url' => $currentUrl, 'total_count' => $getCountContentData, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
        $content_pagination = $this->generatePagination($pagination_param, $themename);
        $contentTemplate    = 'ContentcmsBundle:' . $themename . ':searchcontentlist.html.twig';
        if (!$this->get('templating')->exists($contentTemplate)) {
            $contentTemplate = 'ContentcmsBundle:default:searchcontentlist.html.twig';
        }
        $contentHtml                             = $this->renderView($contentTemplate, array('contentData' => $getContentData, 'SiteSetting' => $SiteSetting, 'CommonVariable' => $CommonVariable, 'column' => $column, 'GeneralService' => $GeneralService));
        $returnContentData['content_html']       = $contentHtml;
        $returnContentData['content_count']      = $getCountContentData;
        $returnContentData['content_pagination'] = $content_pagination;
        return $returnContentData;
    }

    public function getFaqData($param = array(), $otherParam = array())
    {
        $item_offset     = 0;
        $pageno          = $param['pageNo'];
        $GeneralService  = $otherParam['GeneralService'];
        $GeneralFunction = $otherParam['GeneralFunction'];
        $SiteSetting     = $otherParam['SiteSetting'];
        $themename       = $SiteSetting['themename'];
        $CommonVariable  = $otherParam['CommonVariable'];
        $language_code   = $CommonVariable['LangCode'];
        $baseUrl         = $CommonVariable['BaseUrl'];
        $showItemData    = $otherParam['showItemData'];
        $returnFaqData   = array();
        $item_limit      = $SiteSetting['pageSetting']; //10;
        if (empty($pageno)) {
            $pageno = 1;
        } else {
            $item_offset = ($pageno - 1) * $item_limit;
        }
        $pTot             = '';
        $linksPerPage     = 5;
        $midRange         = 3;
        $currentUrl       = '';
        $column           = $this->getColumnList();
        $repository       = $this->getDoctrine()->getRepository(Faqs::class);
        $FaqCatRepository = $this->getDoctrine()->getRepository(FaqCategory::class);
        $frontLanguage    = $otherParam['CommonVariable']['LangId'];
        $langRefId    = $otherParam['CommonVariable']['LangRefId'];
        
        $getFaqCatData    = $FaqCatRepository->createQueryBuilder('fc')
            ->select('fc.id,fcl.name')
            ->leftjoin('ContentcmsBundle:FaqCategoryLang', 'fcl', 'WITH', 'fc.uuId = fcl.catRefId')
            ->where('fc.status = :status')
            ->andwhere('fc.isDeleted = :deleted')
            ->andwhere('fcl.langRefId = :lang')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('lang', $langRefId)
            ->orderBy('fc.id', 'ASC')
            ->groupBy('fc.id')
            ->getQuery()
            ->getResult();
        $getCountFaqData = $repository->createQueryBuilder('f')
            ->select('count(fl.id)')
            ->leftjoin('ContentcmsBundle:FaqsLang', 'fl', 'WITH', 'f.uuId = fl.faqRefId')    
            ->where('f.status = :status')
            ->andwhere('f.isDeleted = :deleted')
            ->andwhere('fl.langRefId = :lang')
            ->andwhere('fl.question  LIKE :keyword OR fl.answer  LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('lang', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->orderBy('f.id', 'ASC')->getQuery()->getSingleScalarResult();
        $getFaqData = $repository->createQueryBuilder('f')
            ->select('f.id,fl.question,fl.answer,fc.id as fcId,fcl.name,fc.slug,fa.icon as faqicon')
            ->leftjoin('ContentcmsBundle:FaqsLang', 'fl', 'WITH', 'f.uuId = fl.faqRefId')    
            ->leftjoin('ContentcmsBundle:FaqCategory', 'fc', 'WITH', 'f.catRefId = fc.uuId')
            ->leftjoin('ContentcmsBundle:FaqCategoryLang', 'fcl', 'WITH', 'fc.uuId = fcl.catRefId')    
            ->leftjoin('ContentcmsBundle:FontawesomeIcons', 'fa', 'WITH', 'f.faqIcon = fa.id')
            ->where('f.status = :status')
            ->andwhere('f.isDeleted = :deleted')
            ->andwhere('fl.langRefId = :lang')
            ->andwhere('fl.question  LIKE :keyword OR fl.answer  LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('lang', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->orderBy('f.id', 'ASC')
            ->groupBy('f.id')
            ->setFirstResult($item_offset)->setMaxResults($item_limit)
            ->getQuery()->getResult();
        //echo "<pre>";print_r($getFaqData);exit;
        $pTot             = ceil($getCountFaqData / $item_limit);
        $pagination_param = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageno, 'current_url' => $currentUrl, 'total_count' => $getCountFaqData, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
        $faq_pagination   = $this->generatePagination($pagination_param, $themename);
        $faqTemplate      = 'ContentcmsBundle:' . $themename . ':searchfaqlist.html.twig';
        if (!$this->get('templating')->exists($faqTemplate)) {
            $faqTemplate = 'ContentcmsBundle:default:searchfaqlist.html.twig';
        }
        $faqHtml                         = $this->renderView($faqTemplate, array('faqData' => $getFaqData, 'faq_category' => $getFaqCatData, 'SiteSetting' => $SiteSetting, 'CommonVariable' => $CommonVariable, 'column' => $column, 'GeneralService' => $GeneralService));
        $returnFaqData['faq_html']       = $faqHtml;
        $returnFaqData['faq_count']      = $getCountFaqData;
        $returnFaqData['faq_pagination'] = $faq_pagination;
        $returnFaqData['faq_category']   = $getFaqCatData;
        return $returnFaqData;
    }

    public function getBlogData($param = array(), $otherParam = array())
    {
        $item_offset     = 0;
        $pageno          = $param['pageNo'];
        $GeneralService  = $otherParam['GeneralService'];
        $GeneralFunction = $otherParam['GeneralFunction'];
        $SiteSetting     = $otherParam['SiteSetting'];
        $LayoutSetting   = $otherParam['LayoutSetting'];
        $themename       = $SiteSetting['themename'];
        $CommonVariable  = $otherParam['CommonVariable'];
        $language_code   = $CommonVariable['LangCode'];
        $baseUrl         = $CommonVariable['BaseUrl'];
        $showItemData    = $otherParam['showItemData'];
        $returnBlogData  = array();
        $bloglayout      = $SiteSetting['theme_layout_setting']['theme_setting']->page_option->blog_page;
        $pageTemplate    = $bloglayout->layout_style;
        $item_limit      = $bloglayout->listbox_style->blog_item_per_page; //10;

        if (empty($pageno)) {
            $pageno = 1;
        } else {
            $item_offset = ($pageno - 1) * $item_limit;
        }
        $pTot             = '';
        $linksPerPage     = 5;
        $midRange         = 3;
        $currentUrl       = '';
        $column           = $this->getColumnList();
        $repository       = $this->getDoctrine()->getRepository(Blog::class);
        $frontLanguage    = $otherParam['CommonVariable']['LangId'];
        $langRefId    = $otherParam['CommonVariable']['LangRefId'];
        
        $getCountBlogData = $repository->createQueryBuilder('b')
            ->select('count(b.id)')
            ->leftjoin('ContentcmsBundle:BlogLang', 'bl', 'WITH', 'bl.blogRefId = b.uuId')
            ->where('b.status = :status')
            ->andwhere('b.isDeleted = :deleted')
            ->andwhere('bl.langRefId = :lang')
            ->andwhere('bl.blogTitle LIKE :keyword OR b.blogSlug LIKE :keyword OR '
                    . 'b.blogTags LIKE :keyword OR b.blogAuthor LIKE :keyword OR '
                    . 'bl.description LIKE :keyword OR bl.metaTitle LIKE :keyword OR '
                    . 'bl.metaDescription LIKE :keyword OR bl.metaKeyword LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('lang', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->orderBy('b.id', 'ASC')->getQuery()->getSingleScalarResult();
        $getBlogData = $repository->createQueryBuilder('b')
            ->select('b.id,bl.blogTitle,b.blogSlug,b.blogTags,b.blogAuthor,bl.metaTitle,bl.metaKeyword,bl.metaDescription,b.blogMedia,bl.description,b.createdDate,count(bc.id) as total,count(bc.id) as blogCommentCount')
            ->leftjoin('ContentcmsBundle:BlogLang', 'bl', 'WITH', 'bl.blogRefId = b.uuId')
            ->leftjoin('ContentcmsBundle:BlogComment', 'bc', 'WITH', 'bc.blog = b.id')
            ->where('b.status = :status')
            ->andwhere('b.isDeleted = :deleted')
            ->andwhere('bl.langRefId = :lang')
            ->andwhere('bl.blogTitle LIKE :keyword OR b.blogSlug LIKE :keyword OR b.blogTags LIKE :keyword OR b.blogAuthor LIKE :keyword OR bl.description LIKE :keyword OR bl.metaTitle LIKE :keyword OR bl.metaDescription LIKE :keyword OR bl.metaKeyword LIKE :keyword')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('lang', $langRefId)
            ->setParameter('keyword', '%' . $param['searchKeyword'] . '%')
            ->orderBy('b.id', 'ASC')
            ->groupBy('b.id')
            ->setFirstResult($item_offset)->setMaxResults($item_limit)
            ->getQuery()->getResult();
        $pTot             = ceil($getCountBlogData / $item_limit);
        $pagination_param = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageno, 'current_url' => $currentUrl, 'total_count' => $getCountBlogData, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
        $blog_pagination  = $this->generatePagination($pagination_param, $themename);
        
        $blogTemplate = 'ContentcmsBundle:' . $themename . ':blog/_bloglist.html.twig';
        if (!$this->get('templating')->exists($blogTemplate)) {
            $blogTemplate = 'ContentcmsBundle:default:blog/_bloglist.html.twig';
        }
        $column_class_desktop = 'col-xs-12 col-sm-12 col-md-12';
        if (!empty($pageTemplate)) {
            if ($pageTemplate == 4) {
                $column_class_desktop = 'col-xs-12 col-sm-12 col-md-8';
            } elseif ($pageTemplate == 2 || $pageTemplate == 3) {
                $column_class_desktop = 'col-xs-12 col-sm-12 col-md-10';
            } else {
                $column_class_desktop = 'col-xs-12 col-sm-12 col-md-12';
            }
        }
        $blogHtml                          = $this->renderView($blogTemplate, array('BlogData' => $getBlogData, 'SiteSetting' => $SiteSetting, 'CommonVariable' => $CommonVariable, 'column' => $column, 'GeneralService' => $GeneralService, 'bloglayout' => $bloglayout, 'column_class_desktop' => $column_class_desktop, 'LayoutSetting' => $LayoutSetting));
        $returnBlogData['blog_html']       = $blogHtml;
        $returnBlogData['blog_pagination'] = $blog_pagination;
        $returnBlogData['blog_count']      = $getCountBlogData;
        return $returnBlogData;
    }

    /*====END :: REN11 Function added for search functionality========*/
    public function getDefaultLanguage()
    {
        $em       = $this->getDoctrine()->getManager();
        $Language = $em->getRepository(Language::class)->findOneBy(array('isDefault' => 1, 'status' => 1, 'isDeleted' => 0));
        return $Language;
    }

    public function getLocationListLang($langCode, $countryLanguage, $country_name)
    {
        if ($langCode == 'en') {
            return $countryName = $country_name;
        } else {
            return @$countryName = $countryLanguage->$langCode;
        }
    }

    public function getRecursiveModuleData($moduleId = 0, $module_data = '')
    {
        $em              = $this->getDoctrine()->getManager();
        $GeneralFunction = new GeneralFunctionController();
        $sessionUsrId    = $this->get('session')->get('loginAdminId');
        $UsrId           = $GeneralFunction->decryptString($sessionUsrId);
        $GeneralService  = $this->get(GeneralService::class);
        if (!is_array($module_data)) {
            $module_data = array();
        }

        $Sql = "SELECT DISTINCT m.id, m.module_name, m.slug, m.icon, m.parent_id FROM module AS m
                LEFT JOIN user_module_access um ON m.id = um.module_id
                LEFT JOIN user_group_access ug ON m.id = ug.module_id
                LEFT JOIN user u ON u.id = um.user_id AND u.user_group_id = ug.user_group_id AND um.user_id = '$UsrId'
                WHERE m.parent_id=$moduleId AND m.is_deleted = 0 AND m.status = 1 ORDER BY m.sort_order ASC";
        $statement = $em->getConnection()->prepare($Sql);
        $statement->execute();
        $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($data)) {
            foreach ($data as $key => $value) {
                if (!empty($moduleId)) {
                    $module_data[] = array('id' => $value['id'], 'module_name' => $value['module_name'], 'slug' => $value['slug'], 'icon' => $value['icon'], 'parent_id' => $value['parent_id']);
                    $module_data   = $this->getRecursiveModuleData($value['id'], $module_data);
                }
            }
        }
        return $module_data;
    }

    public function getRecursiveChildModuleDataToGrandParents($moduleId = 0, $module_data = '')
    {
        $em              = $this->getDoctrine()->getManager();
        $GeneralFunction = new GeneralFunctionController();
        $sessionUsrId    = $this->get('session')->get('loginAdminId');
        $UsrId           = $GeneralFunction->decryptString($sessionUsrId);
        $GeneralService  = $this->get(GeneralService::class);
        if (!is_array($module_data)) {
            $module_data = array();
        }

        if (!empty($moduleId)) {

            $Sql = "SELECT DISTINCT m.id, m.module_name, m.slug, m.icon, m.parent_id FROM module AS m
                LEFT JOIN user_module_access um ON m.id = um.module_id
                LEFT JOIN user_group_access ug ON m.id = ug.module_id
                LEFT JOIN user u ON u.id = um.user_id AND u.user_group_id = ug.user_group_id AND um.user_id = '$UsrId'
                WHERE m.id =$moduleId AND m.is_deleted = 0 AND m.status = 1 ORDER BY m.sort_order ASC";
            $statement = $em->getConnection()->prepare($Sql);
            $statement->execute();
            $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($data)) {
                foreach ($data as $key => $value) {
                    $module_data[] = array('id' => $value['id'], 'module_name' => $value['module_name'], 'slug' => $value['slug'], 'icon' => $value['icon'], 'parent_id' => $value['parent_id']);
                    $module_data   = $this->getRecursiveChildModuleDataToGrandParents($value['parent_id'], $module_data);
                    sort($module_data);
                }
            }
        }
        // echo "<pre>";print_r($module_data);die();
        return $module_data;
    }

    public function getMultilevelParentCategory($param, $returnCategoryData = array())
    {
        if (isset($param['categoryData']['parentId']) && $param['categoryData']['parentId'] != 0) {
            $parentCategoryData       = $this->getParentCategoryData($param);
            $returnCategoryData[]     = $parentCategoryData;
            $param1                   = array();
            $param1['categoryData']   = $parentCategoryData;
            $param1['GeneralService'] = $param['GeneralService'];
            $returnCategoryData       = $this->getMultilevelParentCategory($param1, $returnCategoryData);
        }
        return $returnCategoryData;
    }

    public function getParentCategoryData($param)
    {
        $categoryData   = $param['categoryData'];
        $GeneralService = $param['GeneralService'];
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        
        $parentcatdata   = array();
        $data            = 'c.id,cl.name,c.slug,cl.description,c.media,c.categoryTemplate,'
                        . 'c.galleryId,c.ads,c.adsLink,c.target,c.showStyle,c.preferredProduct,'
                        . 'cl.bottomContent,cl.metaTitle,cl.metaDescription,cl.metaKeyword,c.placeFrom,c.parentId';
        $condition_array = array('c.id' => $categoryData['parentId'], 'c.status' => 1, 'c.isDeleted' => 0);
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'c.ctbRefId';
        $join_array[0]['join_to'] = 'cl.catRefId';
        $join_array[0]['join_allies'] = 'cl';
        $join_array[0]['join_class'] = 'CatalogueBundle:CategoryLang';
        $join_array[0]['join_condition'] = "AND cl.langRefId = '".$sessionLangRefId."' ";
        $parentCatData   = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Category", $allies = 'c', $condition_array, $operator_array = array(), $data, $groupby = 'c.id', $sortby = 'ASC', $orderby = 'c.sortOrder', $limit = '', $offset = '0', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        if (!empty($parentCatData)) {
            $parentcatdata = $parentCatData[0];
        }
        return $parentcatdata;
    }

    public function _getStarRatingAction($rating = null)
    {
        return $this->render('AppBundle:Front:_rating.html.twig', array(
            'rating' => $rating,
        ));
    }

    public function multilevelFrontCMSPageData($params)
    {
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $langData       = $GeneralService->getFrontLangauageSession($SiteSetting);
        //echo "<pre>";print_r($langData);exit;
        $em            = $this->getDoctrine()->getManager();
        $level         = $params['level'];
        $userTypeId    = $params['userTypeId'];
        $returnCmsData = array();
        $CmsData       = $em->createQueryBuilder('p')
            ->select('p.id,p.pageName,p.slug')
            ->from('DealersBundle:DealerCmsPage', 'p')
            ->innerJoin('DealersBundle:DealerCmsUserType', 'du', 'WITH', 'du.dealerCmsPage = p.id')
            ->where('p.isDeleted = 0')
            ->andwhere('p.status = 1')
            ->andwhere('p.langId =:langId')
            ->andwhere('p.parentId = ' . $level)
            ->andwhere('du.userType = ' . $userTypeId)
            ->setParameter('langId', $langData['LangId'])
            ->orderBy('p.sortOrder', 'ASC')
            ->getQuery()->getResult();
        if (!empty($CmsData)) {
            foreach ($CmsData as $key => $cmspage) {
                $returnCmsData[$key]               = $cmspage;
                $params['level']                   = $cmspage['id'];
                $returnCmsData[$key]['subCmsPage'] = $this->multilevelFrontCMSPageData($params);
            }
        }
        return $returnCmsData;
    }

    public function laneApiRegectionMail($obj, $customer_language = '')
    {
        if ($obj) {
            $email = $obj->getEmail();
        } else {
            return;
        }
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        //Email for Customer if New Customer Registered */
        //Modified by milind dave on 05122023 for resolution of T-0118881
        $EmailTemplateCustomer = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $customer_language, 'slug' => 'retailer-account-yet-to-be-created', 'status' => 1, 'isDeleted' => 0));
        if (!empty($EmailTemplateCustomer)) {
            $subject_tokens        = array('[SITE_NAME]');
            $subject_tokens_values = array($SiteSetting['mainName']);
            $customer_subject      = str_replace($subject_tokens, $subject_tokens_values, $EmailTemplateCustomer[0]->getSubject());
            $tokenArray            = array(
                $obj->getDealerFirstName(),
                $obj->getDealerLastName(),
                $obj->getPhoneNumber(),
                $obj->getEmail(),
                $obj->getRetailerFirstName(),
                $obj->getRetailerLastName(),
                $obj->getRetailerBillAddress(),
                '',
                $obj->getRetailerBillCity(),
                $obj->getRetailerBillState(),
                $obj->getRetailerBillZipcode(),
                $obj->getRetailerShipAddress(),
                '',
                $obj->getRetailerShipZipcode(),
                $obj->getRetailerShipCity(),
                $obj->getRetailerShipState(),
                $obj->getBillToNumber() ? $obj->getBillToNumber() : 'N.A.',
            );
            $reason        = ($obj->getSaleRepNumber == '' ? 'You might have entered an incorrect value for "Sales Rep Number"' : 'Looks like your Invoice number and Invoice amount do not match. Please use any invoice from last 6 months for creating an account');
            $tokens        = array('[FIRSTNAME]', '[LASTNAME]', '[PHONE]', '[EMAIL]', '[RETAILER]', '[BILL_ADDRESS1]', '[BILL_ADDRESS2]', '[BILL_CITY]', '[BILL_STATE]', '[BILL_ZIPCODE]', '[SHIP_ADDRESS1]', '[SHIP_ADDRESS2]', '[SHIP_ZIPCODE]', '[SHIP_CITY]', '[SHIP_STATE]', '[BILLTONUMBER]', '[REJECT_REASON]');
            $tokens_values = array($obj->getDealerFirstName(), $obj->getDealerLastName(), $obj->getPhoneNumber(), $obj->getEmail(), $obj->getRetailerFirstName() . ' ' . $obj->getRetailerLastName(), $obj->getRetailerBillAddress(), '', $obj->getRetailerBillCity(), $obj->billState, $obj->getRetailerBillZipcode(), $obj->getRetailerShipAddress(), '', $obj->getRetailerShipZipcode(), $obj->getRetailerShipCity(), $obj->shipState, $obj->getBillToNumber(), $reason);

            $final_body = str_replace($tokens, $tokens_values, $EmailTemplateCustomer[0]->getTemplate());

            //$final_body = $EmailTemplateCustomer[0]->getTemplate();
            $emailData        = array('subject' => $customer_subject, 'body' => $final_body);
            
            $emailDetails = array('toEmail' => $email, 'from_email' => $SiteSetting['storeSupportEmail'], 'from_email_name' => $SiteSetting['mainName']);
            $getEmailAddresses=$this->assignEmailAddress($EmailTemplateCustomer[0],$emailDetails);

            //$fromData         = array('email' => $SiteSetting['storeSupportEmail'], 'name' => $SiteSetting['mainName']);
            $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);

            $ccEmail['cc'][0] = $SiteSetting['contactEmail'];
            //$this->sendEmail($email, $emailData, $fromData, $ccEmail);
            if(!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){
                if(isset($getEmailAddresses['ccbccEmailid']['cc']) || isset($getEmailAddresses['ccbccEmailid']['bcc']))
                    $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid']);
                else
                    $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $ccEmail);
            }
        }
        //End of modified by milind dave on 05122023 for resolution of T-0118881
        return 1;
    }

    public function sendCustomerRegistrationMail($customer_id = '', $customer_language = '')
    {
        $em              = $this->getDoctrine()->getManager();
        $GeneralFunction = new GeneralFunctionController();
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting     = $GeneralService->getStoreMainConfig();
        $customerData    = $em->getRepository('SalesBundle:Customer')->find($customer_id);
        if (!empty($customerData)) {
            $cutomerFirstname = $customerData->getFirstName();
            $cutomerLastname  = $customerData->getLastName();
            $cutomerFullname  = $cutomerFirstname . ' ' . $cutomerLastname;
            $cutomerEmail     = $customerData->getEmailid();
            $cutomerContact   = $customerData->getContact();
            $cutomerPassword  = $GeneralFunction->decryptString($customerData->getPassword());
        }

        //Email for Customer if New Customer Registered */
        //Modified by milind on 30112023 for resolution of T-0118881
        $EmailTemplateCustomer = $this->getDoctrine()->getRepository('ContentcmsBundle:EmailTemplate')->findBy(array('langId' => $customer_language, 'slug' => 'customer-registration-self', 'status' => 1, 'isDeleted' => 0));
        if (!empty($EmailTemplateCustomer)) {
            $toData                = $cutomerEmail;
            $subject_tokens        = array('[SITE_NAME]');
            $subject_tokens_values = array($SiteSetting['mainName']);
            $customer_subject      = str_replace($subject_tokens, $subject_tokens_values, $EmailTemplateCustomer[0]->getSubject());
            $tokens                = array('[CUSTOMER_FULLNAME]', '[SITE_NAME]', '[CUSTOMER_USERNAME]', '[CUSTOMER_PASSWORD]', '[STORE_SUPPORT_EMAIL]', '[STORE_SUPPORT_PHONE]');

            $tokens_values = array($cutomerFullname, $SiteSetting['mainName'], $cutomerEmail, $cutomerPassword, $SiteSetting['storeSupportEmail'], $SiteSetting['contactPhone']);
            $final_body    = str_replace($tokens, $tokens_values, $EmailTemplateCustomer[0]->getTemplate());

            $emailData = array('subject' => $customer_subject, 'body' => $final_body);

            $emailDetails = array('toEmail' => $toData, 'from_email' => $SiteSetting['storeSupportEmail'], 'from_email_name' => $SiteSetting['mainName']);
            $getEmailAddresses=$this->assignEmailAddress($EmailTemplateCustomer[0],$emailDetails);
            
            //$fromData  = array('email' => $SiteSetting['storeSupportEmail'], 'name' => $SiteSetting['mainName']);
            $fromEmail = array('email' => $getEmailAddresses['fromEmail'], 'name' => $getEmailAddresses['from_email_name']);

            //$this->sendEmail($toData, $emailData, $fromData);
            if (!empty($getEmailAddresses) && $getEmailAddresses['toemail_field']!=''){                                     
                $this->sendEmail($getEmailAddresses['toemail_field'], $emailData, $fromEmail, $getEmailAddresses['ccbccEmailid']);
            }
        }
        //End of modified by milind on 30112023 for resolution of T-0118881
        return 1;
    }
    // don't use this unction. please use from the generealservice
    public function getLatLong($address, $region, $key = "AIzaSyBfg18UPVk8m3KFmpTI-hsPfqodZAk85Tw")
    {
        if (!empty($address) && !empty($key)) {
            $url = "https://maps.google.com/maps/api/geocode/json?address=" . urlencode($address) . "&region=" . urlencode($region) . "&key=$key";
            $ch  = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $responseJson = curl_exec($ch);
            curl_close($ch);
            $data     = array();
            $response = json_decode($responseJson);

            if ($response->status == 'OK') {
                $latitude          = $response->results[0]->geometry->location->lat;
                $longitude         = $response->results[0]->geometry->location->lng;
                $data['latitude']  = $latitude;
                $data['longitude'] = $longitude;
                $data['status']    = $response->status;
            } else {
                $data['latitude']  = 0;
                $data['longitude'] = 0;
                $data['status']    = $response->status;
            }
        }
        return $data;
    }

    public function getPageTreeViewList($param = array('orderby' => 'cp.id', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false, 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = '';
        $operator_array   = array();
        $sortby           = 'ASC';
        $field_data       = ' cp.id as id,cpl.pageName as text,cpl.pageName as name,cp.parentId as parent_id,cp.slug';
        $condition_array  = array();
        $condition_array['cp.status']    = 1;
        $condition_array['cp.isDeleted'] = 0;
        if ($param['onlyparents']) {
            $condition_array['cp.parentId']  = 0;
        }
        if (!empty($param['lang_id'])) {
            //$condition_array['cp.langId'] = $param['lang_id'];
            $langRefId = $GeneralService->getLangRefIdById($param['lang_id']);
        } else if (!empty($front_lang_id)) {
            //$condition_array['cp.langId'] = $front_lang_id;
            $langRefId = $GeneralService->getLangRefIdById($front_lang_id);
        }
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id']     = explode(',', $param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 'cp.id';
            $operator_array[0]['op_allies'] = 'miarray';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        $orderby    = $param['orderby'];
        $join_array = array();
        $groupby    = 'cp.id';
        
        $join_array[0]['type'] = 'left';
        $join_array[0]['join_from'] = 'cp.uuId';
        $join_array[0]['join_to'] = 'cpl.pageRefId';
        $join_array[0]['join_allies'] = 'cpl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:CmsPageLang';
        $join_array[0]['join_condition'] = " AND cpl.langRefId = '$langRefId'";
        $result     = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:CmsPage", $allies = 'cp', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = $param['limit'], $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function getMultilevelParentCmsPage($param, $returnCmsPageData = array())
    {
        if (isset($param['cmsPageData']['parentId']) && $param['cmsPageData']['parentId'] != 0) {
            $parentCmsPageData = $this->getParentCmsPageData($param);
            if (!empty($parentCmsPageData)) {
                $returnCmsPageData[]      = $parentCmsPageData;
                $param1                   = array();
                $param1['cmsPageData']    = $parentCmsPageData;
                $param1['GeneralService'] = $param['GeneralService'];
                $returnCmsPageData        = $this->getMultilevelParentCmsPage($param1, $returnCmsPageData);
            }
        }
        return $returnCmsPageData;
    }

    public function getParentCmsPageData($param)
    {
        $cmsPageData    = $param['cmsPageData'];
        $GeneralService = $param['GeneralService'];
        $defaultLangRefId = $GeneralService->getDefaultLangRefId();
        $parentcatdata   = array();
        $data            = 'cp.id,cpl.pageName as name,cp.slug,cp.parentId';
        $condition_array = array('cp.id' => $cmsPageData['parentId'], 'cp.status' => 1, 'cp.isDeleted' => 0);
        $join_array[0]['type'] = 'left';
        $join_array[0]['join_from'] = 'cp.uuId';
        $join_array[0]['join_to'] = 'cpl.pageRefId';
        $join_array[0]['join_allies'] = 'cpl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:CmsPageLang';
        $join_array[0]['join_condition'] = " AND cpl.langRefId = '$defaultLangRefId'";
        $parentCmsData   = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:CmsPage", $allies = 'cp', $condition_array, $operator_array = array(), $data, $groupby = 'cp.id', $sortby = 'ASC', $orderby = 'cp.sortOrder', $limit = '', $offset = '0', $join_array , $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        if (!empty($parentCmsData)) {
            $parentCmsData = $parentCmsData[0];
        }
        return $parentCmsData;
    }

    /**
     * @Route("/abandonedcartmodal" , name="")
     */
    public function _getAbandonedCartModal()
    {
        //REN12
        $em        = $this->getDoctrine()->getManager();
        $Sql       = "SELECT m.*,ms.module_setting FROM module as m JOIN module_setting as ms ON m.id = ms.module_id AND ms.status = 1 AND ms.is_deleted = 0 WHERE m.slug = 'abandonedcart' AND m.status = 1 AND m.is_deleted = 0";
        $statement = $em->getConnection()->prepare($Sql);
        $statement->execute();
        $abndData      = $statement->fetchAll();
        $abandonedcart = array();
        if (!empty($abndData)) {
            $abandonedcartData            = json_decode($abndData[0]['module_setting']);
            $abandonedcart['title']       = $abandonedcartData['title'];
            $abandonedcart['description'] = $abandonedcartData['description'];
            $abandonedcart['description'] .= $this->renderView('AppBundle:Front:_abandonedcart.html.twig');
        }
        $response = new Response();
        $response->headers->set('Content-Type', 'application/json; charset=utf-8');
        echo json_encode($abandonedcart);
        exit;
    }
    // REN02 Start
    public function applyShortCodeInContent($content, $table = '')
    {
        preg_match_all('@\[([^<>&/\[\]\x00-\x20=]++)@', $content, $matches);
        $found_data = array();
        if (!empty($matches)) {
            if (!empty($matches[0])) {
                $found_matches = $matches[0];
                foreach ($found_matches as $code) {
                    if ($table == 'blog') {
                        $findme = '[BLOG-SHORTCODE-';
                    } elseif ($table == 'news') {
                        $findme = '[NEWS-SHORTCODE-';
                    } elseif ($table == 'form') {
                        $findme = '[FORM-SHORTCODE-';
                    } elseif ($table == 'slider') {
                        // Added By REN02
                        $findme = '[SLIDER-SHORTCODE-';
                    }elseif ($table == 'widget') {
                        // Added By REN02
                        $findme = '[WIDGET-SHORTCODE-';
                    }
                    $pos = strpos($code, $findme);
                    if ($pos === false) {
                    } else {
                        if ($table == 'blog') {
                            $explode_data = explode('[BLOG-SHORTCODE-', $code);
                        } elseif ($table == 'news') {
                            $explode_data = explode('[NEWS-SHORTCODE-', $code);
                        } elseif ($table == 'slider') {
                            $explode_data = explode('[SLIDER-SHORTCODE-', $code);
                        } elseif ($table == 'widget') {
                            $explode_data = explode('[WIDGET-SHORTCODE-', $code);
                        }
                        $id         = trim($explode_data[1]);
                        $short_code = $code . ']';
                        if ($table == 'blog') {
                            $form_content = $this->getBlogContentBySlug($id);
                        } elseif ($table == 'news') {
                            $form_content = $this->getNewsContentBySlug($id);
                        } elseif ($table == 'form') {
                            if (is_numeric($id)) {
                                $form_content = $this->getFormBuilderContentById($id);
                            }
                        } elseif ($table == 'slider') {
                            $form_content = $this->getSliderContentBySlug($id);
                        }elseif ($table == 'widget') {
                            $form_content = $this->getWidgetContentBySlug($id);
                        }
                        if (!empty($form_content)) {
                            $found_data[$short_code] = $form_content;
                        } else {
                            $found_data[$short_code] = '';
                        }
                    }
                }
            }
        }
        if (!empty($found_data)) {
            foreach ($found_data as $key => $val) {
                $content = str_replace($key, $val, $content);
            }
        }
        return $content;
    }
    // REN02 End
    public function getBlogContentBySlug($slug)
    {
        $GeneralService  = $this->get(GeneralService::class);
        $LayoutConfig    = $GeneralService->getStoreLayoutConfig();
        $themename       = $LayoutConfig['themename'];
        $data            = 'b';
        $condition_array = array('b.blogSlug' => $slug, 'b.status' => 1, 'b.isDeleted' => 0);                
        $session          = new Session();
        $sessionLangRefid    = $session->get('front_lang_ref_id');
        $join_array = array();
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'b.uuId';
        $join_array[0]['join_to'] = 'bl.blogRefId';
        $join_array[0]['join_allies'] = 'bl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:BlogLang';
        $join_array[0]['join_condition'] = " AND bl.langRefId = '$sessionLangRefid'";
        $blogData        = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:Blog", $allies = 'b', $condition_array, $operator_array = array(), $data, $groupby = 'b.id', $sortby = 'ASC', $orderby = 'b.sortOrder', $limit = '', $offset = '0', $join_array , $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        if (!empty($blogData)) {
            $partialTemplate = 'ContentcmsBundle:' . $themename . ':blog/_landing.html.twig';
            if (!$this->get('templating')->exists($partialTemplate)) {
                $partialTemplate = 'ContentcmsBundle:default:blog/_landing.html.twig';
            }
            return $this->renderView($partialTemplate, array('BlogData' => $blogData[0]));
        } else {
            return false;
        }
    }

    public function postData($url, $params = array(), $header_array = array())
    {
        $postData = '';
        //create name value pairs seperated by &
        foreach ($params as $k => $v) {
            $postData .= $k . '=' . $v . '&';
        }
        $postData = rtrim($postData, '&');
        $ch       = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        if (!empty($header_array)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $header_array);
        } else {
            curl_setopt($ch, CURLOPT_HEADER, false);
        }
        //curl_setopt($ch, CURLOPT_POST, count($postData));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
        
        $output = curl_exec($ch);

        curl_close($ch);
        return $output;
    }

    public function getNewsCategoryList($param = array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false, 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = '';

        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id'] = '"' . str_replace(',', '","', $param['commaseparated_id']) . '"';
            $where_condition .= " AND c.category_slug IN (" . $param['commaseparated_id'] . ")";
        }        
        if (!empty($param['lang_id'])) {
            $front_lang_id = $param['lang_id'];
        } else {
            $front_lang_id = $session->get('front_lang_id');
        }
        $front_lang_ref_id = $GeneralService->getLangRefIdById($front_lang_id);
        $where_condition .= " AND ncl.lang_ref_id= '$front_lang_ref_id'";
        (!empty($param['orderby'])) ? $common_condition .= " c." . $param['orderby'] : $common_condition .= 'c.sort_order, ncl.name, c.id';
        $common_condition .= " " . $param['sort'];

        if ($param['limit']) {
            $common_condition .= " LIMIT " . $param['limit'];
        }

        $sql = "SELECT c.id as id,ncl.name as text,ncl.name as name,c.category_slug as slug "
                . " FROM news_category c "
                . " LEFT JOIN news_category_lang ncl ON ncl.cat_ref_id = c.uu_id "
                . " WHERE c.status=1 AND "
                . " c.is_deleted=0 $where_condition "
                . " ORDER BY $common_condition ";
        
        /*$sql = "SELECT c.id as id,c.name as text,c.name as name,c.category_slug as slug FROM news_category c WHERE
                c.status=1 AND c.is_deleted=0
                $where_condition
                ORDER BY $common_condition ";*/
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        
        // widget lang change --
        if(!empty($result)) {            
            $defaultLangCode = $GeneralService->getDefaultLangCode();
            $newsService   = $this->get(\AppBundle\Service\NewsService::class);
            $categoryDataByDefaultLang = $newsService->findCategoriesByLangId($defaultLangCode);
            $defaultCatData = [];
            
            if(!empty($categoryDataByDefaultLang)) {
                foreach ($categoryDataByDefaultLang as $k => $v) {
                    $defaultCatData[$v['id']]['name'] = $v['name'];
                    //$defaultCatData[$v['id']]['description'] = $v['description'];
                }
            }
            
            foreach ($result as $key => $value) {
                if($value['name'] == null || empty($value['name'])) {
                    $result[$key]['name'] = $result[$key]['text'] = $defaultCatData[$value['id']]['name'];
                }
            }
        }
        // -- widget lang change
        return $result;
    }

    public function getNewsCategoryListHtml($widgetTypeData, $themename)
    {
        $url_charater      = 'newslist';
        $commaseparated_id = '';
        if (isset($widgetTypeData['commaseparated_id']) && $widgetTypeData['commaseparated_id'] != "") {
            $commaseparated_id = $widgetTypeData['commaseparated_id'];
        }
        if (!empty($commaseparated_id)) {
            $data = $this->getNewsCategoryList(array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => $commaseparated_id, 'onlyparents' => false));
        } else {
            $data = $this->getNewsCategoryList(); // all categories
        }
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        if (!empty($data)) {
            $html = '<ul class="c-links">';
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html .= $this->getLiHtml($data, $extra_data);
            $html .= '</ul>';
        }
        return $html;
    }

    public function getNewsArchivesListHtml($widgetTypeData, $themename)
    {
        $url_charater   = 'newslist';
        $html           = '';
        $title          = '';
        $GeneralService = $this->get(GeneralService::class);
        $BaseUrl        = $GeneralService->getBaseUrl();
        $data           = array(
            '0'  => array('name' => $this->get('translator')->trans('front_Jan'), 'slug' => 'january'),
            '1'  => array('name' => $this->get('translator')->trans('front_feb'), 'slug' => 'february'),
            '2'  => array('name' => $this->get('translator')->trans('front_march'), 'slug' => 'march'),
            '3'  => array('name' => $this->get('translator')->trans('front_april'), 'slug' => 'april'),
            '4'  => array('name' => $this->get('translator')->trans('front_may'), 'slug' => 'may'),
            '5'  => array('name' => $this->get('translator')->trans('front_june'), 'slug' => 'june'),
            '6'  => array('name' => $this->get('translator')->trans('front_july'), 'slug' => 'july'),
            '7'  => array('name' => $this->get('translator')->trans('front_aug'), 'slug' => 'august'),
            '8'  => array('name' => $this->get('translator')->trans('front_sep'), 'slug' => 'september'),
            '9'  => array('name' => $this->get('translator')->trans('front_oct'), 'slug' => 'october'),
            '10' => array('name' => $this->get('translator')->trans('front_nov'), 'slug' => 'november'),
            '11' => array('name' => $this->get('translator')->trans('front_dec'), 'slug' => 'december'),
        );
        if (!empty($data)) {
            $html = '<ul class="c-links">';
            if (!empty($widgetTypeData['title'])) {
                $title = $widgetTypeData['title'];
            }
            $extra_data = array('url_charater' => $url_charater, 'BaseUrl' => $BaseUrl, 'title' => $title, 'themename' => $themename, 'widgetTypeData' => $widgetTypeData);
            $html .= $this->getLiHtml($data, $extra_data);
            $html .= '</ul>';
        }
        return $html;
    }

    public function getNewsContentBySlug($slug)
    {
        $GeneralService  = $this->get(GeneralService::class);
        $LayoutConfig    = $GeneralService->getStoreLayoutConfig();
        $themename       = $LayoutConfig['themename'];
        $data            = 'n';
        $condition_array = array('n.newsSlug' => $slug, 'n.status' => 1, 'n.isDeleted' => 0);
        $session          = new Session();
        $sessionLangRefid    = $session->get('front_lang_ref_id');
        $join_array = array();
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'n.uuId';
        $join_array[0]['join_to'] = 'nl.newsRefId';
        $join_array[0]['join_allies'] = 'nl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:NewsLang';
        $join_array[0]['join_condition'] = " AND nl.langRefId = '$sessionLangRefid'";
        $newsData        = $GeneralService->selectDataByCondition($tableclass = "ContentcmsBundle:News", $allies = 'n', $condition_array, $operator_array = array(), $data, $groupby = 'n.id', $sortby = 'ASC', $orderby = 'n.sortOrder', $limit = '', $offset = '0', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        if (!empty($newsData)) {
            $partialTemplate = 'ContentcmsBundle:' . $themename . ':news/_landing.html.twig';
            if (!$this->get('templating')->exists($partialTemplate)) {
                $partialTemplate = 'ContentcmsBundle:default:news/_landing.html.twig';
            }
            return $this->renderView($partialTemplate, array('NewsData' => $newsData[0]));
        } else {
            return false;
        }
    }

    public function allSEOMetaEmpty()
    {
        $em = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        list($SiteSetting, $AdminDetails, $StoreImgSetting, $AdminSideBar) = $this->commonData;

        $qb      = $em->createQueryBuilder();
        $cmspage = $qb->update('ContentcmsBundle:CmsPage', 'cp')
            ->set('cp.metaTitle', $qb->expr()->literal(null))
            ->set('cp.metaDescription', $qb->expr()->literal(null))
            ->set('cp.metaKeyword', $qb->expr()->literal(null))
            ->set('cp.headerCode', $qb->expr()->literal(null))
            ->getQuery()->execute();
        $em->clear();
        $qb    = $em->createQueryBuilder();
        $brand = $qb->update('CatalogueBundle:Brand', 'b')
            ->set('b.metaTitle', $qb->expr()->literal(null))
            ->set('b.metaDescription', $qb->expr()->literal(null))
            ->set('b.metaKeyword', $qb->expr()->literal(null))
            ->set('b.headerCode', $qb->expr()->literal(null))
            ->getQuery()->execute();
        $em->clear();
        $qb       = $em->createQueryBuilder();
        $category = $qb->update('CatalogueBundle:Category', 'c')
            ->set('c.metaTitle', $qb->expr()->literal(null))
            ->set('c.metaDescription', $qb->expr()->literal(null))
            ->set('c.metaKeyword', $qb->expr()->literal(null))
            ->set('c.headerCode', $qb->expr()->literal(null))
            ->getQuery()->execute();
        $em->clear();
        $qb      = $em->createQueryBuilder();
        $product = $qb->update('CatalogueBundle:Product', 'p')
            ->set('p.metaTitle', $qb->expr()->literal(null))
            ->set('p.metaDescription', $qb->expr()->literal(null))
            ->set('p.metaKeyword', $qb->expr()->literal(null))
            ->set('p.headerCode', $qb->expr()->literal(null))
            ->getQuery()->execute();
        $em->clear();
        $qb          = $em->createQueryBuilder();
        $seometadata = $qb->delete('ContentcmsBundle:SeoMetaData', 'ss')
            ->getQuery()->execute();
        $json['code']    = 1;
        $json['message'] = "successfully";
        $response        = new Response();
        $response->setContent(json_encode($json, true));
        $response->headers->set('Content-Type', 'application/json');
        exit();
    }
    /*====START :: REN01 Function added for attribute groupallow functionality========*/
    public function filterAttributebyGroupName($attribute = "Brown, Fabric, Montero Henna, Montero Spa, Round", $allowgroup = "Cover Name")
    {
        $allattribute = "";
        if (!empty($attribute) && !empty($allowgroup)) {
            $attribute  = addslashes($attribute);
            $attribute1 = explode(", ", $attribute);
            $attribute1 = "'" . implode("','", $attribute1) . "'";

            $allowgroup1 = explode(", ", $allowgroup);
            $allowgroup1 = "'" . implode("','", $allowgroup1) . "'";

            $em  = $this->getDoctrine()->getManager();
            /*$Sql = "SELECT GROUP_CONCAT(DISTINCT attribute_name SEPARATOR ', ') AS attributeName FROM attribute AS a
                LEFT JOIN attribute_group ag ON ag.id = a.group_id
                WHERE a.attribute_name IN($attribute1) AND ag.group_name IN($allowgroup1) AND a.is_deleted = 0 AND a.status = 1 ORDER BY a.sort_order ASC";*/
            $Sql = "SELECT GROUP_CONCAT(DISTINCT al.attribute_name SEPARATOR ', ') AS attributeName "
                    . " FROM attribute AS a "
                    . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
                    . " INNER JOIN attribute_group ag ON ag.ctb_ref_id = a.attribute_group_ref_id "
                    . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
                    . " WHERE al.attribute_name IN($attribute1) AND "
                    . " agl.group_name IN($allowgroup1) AND a.is_deleted = 0 "
                    . " AND a.status = 1 GROUP BY a.id ORDER BY a.sort_order ASC";
            $statement = $em->getConnection()->prepare($Sql);
            $statement->execute();
            $attributeData = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($attributeData)) {
                $allattribute = $attributeData[0]['attributeName'];
            }
        }
        return $allattribute;
    }
    public function getThumbnailAttributeData($productId = 0)
    {
        $attributeName = "";
        if (!empty($productId)) {
            $em  = $this->getDoctrine()->getManager();
            //$Sql = "SELECT GROUP_CONCAT(DISTINCT a.attribute_name) as attributeName, ag.group_name FROM product_attribute AS pa LEFT JOIN attribute a ON a.id = pa.attribute_id LEFT JOIN attribute_group ag ON ag.id = a.group_id WHERE pa.product_id = $productId AND group_name = 'Cover Name'";
            $Sql = "SELECT GROUP_CONCAT(DISTINCT al.attribute_name) as attributeName, agl.group_name "
                    . " FROM product_attribute AS pa "
                    . " INNER JOIN attribute a ON pa.attribute_id=a.id  "
                    . " INNER JOIN attribute_lang as al ON al.attribute_ref_id = a.ctb_ref_id "
                    . " INNER JOIN attribute_group ag ON ag.ctb_ref_id = a.attribute_group_ref_id "
                    . " INNER JOIN attribute_group_lang as agl ON agl.attribute_group_ref_id = ag.ctb_ref_id "
                    . " WHERE pa.product_id = $productId AND agl.group_name = 'Cover Name' GROUP BY a.id";
            $statement = $em->getConnection()->prepare($Sql);
            $statement->execute();
            $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            //echo "<pre>";print_r($data);exit;
            if (!empty($data)) {
                $attributeName = $data[0]['attributeName'];
            }
        }
        return $attributeName;
    }
    // REN02 Start
    public function getSliderContentBySlug($slug = '')
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $sliderObj      = $em->getRepository('ContentcmsBundle:Slider')->findOneBy(array('status' => 1, 'isDeleted' => 0, 'slug' => $slug));
        $sliderImage    = '';

        if (!empty($sliderObj)) {
            $sliderId = $sliderObj->getId();
            /*$sliderMethod = $slider->getSliderMethod();

            $slider_data = $em->createQuery(
            "SELECT S.alwaysShow as sliderAlwaysShow,S.fromDate as sliderFromDate,S.toDate as sliderToDate,SI.imgName,SI.title,SI.link,SI.linkTarget,SI.alwaysShow as sliderImageAlwaysShow,SI.fromDate as sliderImageFromDate,SI.toDate as sliderImageToDate,S.sliderType as sliderType
            FROM ContentcmsBundle:Slider S
            INNER JOIN ContentcmsBundle:SliderImage SI WITH SI.slider=S.id AND SI.isDeleted=0
            WHERE S.id=$sliderId AND S.isDeleted=0  AND S.status=1
            ORDER BY SI.sortOrder ASC")->getResult();

            if (!empty($slider_data)) {
            // BEGIN: Slider Effect
            if ($sliderMethod == Slider::WOW_SLIDER || $sliderMethod == Slider::NIVO_SLIDER) {
            $sliderOption = $sliderObj->getSliderOption();
            $sliderOptionAttr = json_decode($sliderOption, true);
            $sliderEffect = Slider::getSliderTypeWiseEffect($sliderMethod, $sliderOptionAttr['slider_effect']);
            }

            $themename = $SiteSetting['themename'];
            $sliderType = Slider::$sliderTypeArr[$sliderMethod];
            $sliderType = str_replace("Slider", "", trim($sliderType));
            $template_suffix = strtolower(str_replace(" ", "_", trim($sliderType)));
            $params = array('themename' => $themename, 'slidermethod' => $sliderMethod, 'LayoutSetting' => $LayoutSetting, 'template_suffix' => $template_suffix);
            $sliderImage = $this->getCmsPageSliderHtml($slider_data, $params);
            // END: Slider Effect
            }*/

            // BEGIN: Slider Effect 1
            $themename   = $LayoutSetting['themename'];
            $sliderParam = [
                'slider_id'     => $sliderId,
                'themename'     => $themename,
                'LayoutSetting' => $LayoutSetting,
            ];
            $sliderMethodWiseData = $GeneralService->getSliderMethodWiseData($sliderParam);
            $sliderImage          = $sliderMethodWiseData['sliderImage'];
            // END: Slider Effect 2
        }

        return $sliderImage;
    }

    /*
      To Upload file to AWS s3(Created to upload file to s3 from APIMasterController)
      @Params(Array): Assests Directory, File Name, Folder Key, is Thumb File
      @Container
      @return Main Image/Thumb Image: Full URL
    */
    public function renArkAwsUploadFile($getprarm,$container="")
    {
        if($container!=''){
            $this->container=$container;
        }
        $returnInfomration=$this->AwsUploadFile($getprarm);
        return $returnInfomration;
    }
 
  

    public function AwsUploadFile($params)
    {
        //Start to Put Image from AWS Server
        $awsservices                                                      = $this->get(AmazonS3Service::class);
        $awsConn                                                          = $awsservices->awsConnection();
        $GeneralService                                                   = $this->get(GeneralService::class);
        $SiteSetting                                                      = $GeneralService->getStoreMainConfig();
        $amazon_dirroot                                                   = "";
        $return                                                           = array();
        (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";
        if (!empty($awsConn)) {
            //Check Default Bucket Exist or Not on AWS Server
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            //$amazon_dirroot = $this->container->getParameter('amazon_dirroot');
            if (!empty($StoreOtherapiSetting) && !empty($StoreOtherapiSetting->awsDirroot)) {
                $amazon_dirroot = $StoreOtherapiSetting->awsDirroot;
            }
            if (!empty($amazon_bucket) && !empty($amazon_dirroot)) {
                //For Original File
                if ($awsConn->doesBucketExist($amazon_bucket)) {
                    $awsservices->bucketName = $amazon_bucket;
                    $awsservices->sourceFile = $params['assetsDir'] . $params['fileName'];
                    if (isset($params['newName'])) {
                        $awsservices->fileName = $params['newName'];
                    } else {
                        $awsservices->fileName = $params['fileName'];
                    }
                    $awsservices->folderKey = $amazon_dirroot . $params['folderKey'];
                    $response               = $awsservices->uploadfile($awsConn);
                    if (!empty($response) && $response['status'] == 200) {
                        $return['main_image'] = $response['uri'];
                    }
                }
                if (!empty($params['isThumbFile']) && $params['isThumbFile'] == "Yes") {
                    //For Thumb File
                    if ($awsConn->doesBucketExist($amazon_bucket)) {
                        $awsservices->bucketName = $amazon_bucket;
                        $awsservices->sourceFile = $params['assetsDir'] . 'thumb/' . $params['fileName'];
                        $awsservices->fileName   = $params['fileName'];
                        $awsservices->folderKey  = $amazon_dirroot . $params['folderKey'] . "thumb/";
                        $response                = $awsservices->uploadfile($awsConn);
                        if (!empty($response) && $response['status'] == 200) {
                            $return['thumb_image'] = $response['uri'];
                        }
                    }
                }
                return $return;
            }
        }
        return $return;
        //End to Put Image from AWS Server
    }

    //Added by Manoj Giri - Create assets folder on S3 and copy directory from server to S3.
    public function CssUploadS3Migration($container=false) {
        if($container){
            $this->container=$container;
        }
        //BOF- This is to restrict not upload direcory from local to S3 bucket
        $whitelist = array('127.0.0.1','::1','localhost');
        if(in_array($this->container->getParameter('database_host'), $whitelist)){
            return true;
        }
        //EOF- This is to restrict not upload direcory from local to S3 bucket
        //Start to Put Image from AWS Server
        $awsservices = $this->get(AmazonS3Service::class);
        $awsConn = $awsservices->awsConnection();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting = $GeneralService->getStoreMainConfig();
        $amazon_dirroot = "";
        $response = array();
        (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";
        if (!empty($awsConn)) {
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            if (!empty($StoreOtherapiSetting) && !empty($StoreOtherapiSetting->awsDirroot)) {
                $amazon_dirroot = $StoreOtherapiSetting->awsDirroot;
            }
            if (!empty($amazon_bucket) && !empty($amazon_dirroot)) {
                //Check Default Bucket Exist or Not on AWS Server
                if ($awsConn->doesBucketExist($amazon_bucket)) { 
                    //BOF create Folder if
                    $folderExist = '/uploads/';
                    $folderkey=$amazon_dirroot . $folderExist;
                    $awspara['folderKey'] = $folderkey;

                    $folder = $this->AwsCreateFolder($awspara);
                    if($folder){
                        $sourcepath = $this->container->getParameter('kernel.root_dir') . '/../web/assets/uploads/fronttheme/';
                        //$destpath=$amazon_bucket.'/'.$amazon_dirroot.'/uploads/fronttheme/';
                        $destpath=$amazon_bucket.'/'.$folderkey.'fronttheme/';
                        $response=$awsservices->uploadDirectory($awsConn,$sourcepath,$destpath);
                        return $response;
                    }
                }
            }
        }
    } 

    //Used for uploading assests/upload/css files on S3 when customizelayout updated at admin
    public function S3UplodCss($awsparam) {
        //Start to Put Image from AWS Server
        $awsservices = $this->get(AmazonS3Service::class);
        $awsConn = $awsservices->awsConnection();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting = $GeneralService->getStoreMainConfig();
        $amazon_dirroot = "";
        $returnArr = array();
        $coludArr = array();
        (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";
        if (!empty($awsConn)) {
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            if (!empty($StoreOtherapiSetting) && !empty($StoreOtherapiSetting->awsDirroot)) {
                $amazon_dirroot = $StoreOtherapiSetting->awsDirroot;
            }
            if (!empty($amazon_bucket) && !empty($amazon_dirroot)) {
                //Check Default Bucket Exist or Not on AWS Server
                if ($awsConn->doesBucketExist($amazon_bucket)) { 
                    $awsservices->bucketName = $amazon_bucket;
                    $awsservices->folderKey  = $amazon_dirroot . $awsparam['folderKey'];
                    foreach($awsparam['fileName'] as $cssfilename){
                        $awsservices->sourceFile = $awsparam['assetsDir'].$cssfilename;
                        $awsservices->fileName   = $cssfilename;
                        $response = $awsservices->uploadfile($awsConn);
                        if (!empty($response) && $response['status'] == 200) {
                            $returnArr[$cssfilename]=$response['status'];
                        }else{
                            $returnArr[$cssfilename]=$response['status'];
                        }
                    }
                    //BOF clear cloud cache
                    $parsed = parse_url($SiteSetting['storeUrl']);
                    $domain = $parsed["host"]; 
                    $coludArr["cloudflag"]=0;
                    if($domain){ 
                        //$dirpath='cdn.rencdn.com/devstore2/uploads/fronttheme/fmdstore/css/*';
                        $dirpath=$amazon_bucket.'/'.$amazon_dirroot.$awsparam['folderKey'].'*';
                        $cloudFlag=$this->callCloudAPI($awsservices,$dirpath);
                        if($cloudFlag){
                           $coludArr["cloudflag"]=1; 
                        }
                    }
                    //EOF clear cloud cache
                   return array($returnArr,$coludArr);
                }
            }
        }
    } 

    public function AwsDeleteFile($params)
    {
        //Start to Delete Image from AWS Server
        $awsservices                                                      = $this->get(AmazonS3Service::class);
        $awsConn                                                          = $awsservices->awsConnection();
        $GeneralService                                                   = $this->get(GeneralService::class);
        $SiteSetting                                                      = $GeneralService->getStoreMainConfig();
        $amazon_dirroot                                                   = "";
        (!empty($SiteSetting['otherapiSetting'])) ? $StoreOtherapiSetting = json_decode($SiteSetting['otherapiSetting']) : $StoreOtherapiSetting = "";
        if (!empty($awsConn)) {
            //Check Default Bucket Exist or Not on AWS Server
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            //$amazon_dirroot = $this->container->getParameter('amazon_dirroot');
            if (!empty($StoreOtherapiSetting) && !empty($StoreOtherapiSetting->awsDirroot)) {
                $amazon_dirroot = $StoreOtherapiSetting->awsDirroot;
            }
            if (!empty($amazon_bucket) && !empty($amazon_dirroot)) {
                //For Original File
                if ($awsConn->doesBucketExist($amazon_bucket)) {
                    $awsservices->bucketName = $amazon_bucket;
                    $awsservices->fileName   = $params['fileName'];
                    $awsservices->folderKey  = $amazon_dirroot . $params['folderKey'];
                    $new_main_image          = $awsservices->deletefile($awsConn);
                }
                if (!empty($params['isThumbFile']) && $params['isThumbFile'] == "Yes") {
                    //For Thumb File
                    if ($awsConn->doesBucketExist($amazon_bucket)) {
                        $awsservices->bucketName = $amazon_bucket;
                        $awsservices->fileName   = $params['fileName'];
                        $awsservices->folderKey  = $amazon_dirroot . $params['folderKey'] . "thumb/";
                        $new_main_thumb_image    = $awsservices->deletefile($awsConn);
                    }
                }
                return true;
            }
        }
        return false;
        //End to Delete Image from AWS Server
    }

    public function checkStatus($tablename, $data_id)
    {
        $em = $this->getDoctrine()->getManager();
        // $class = $em->getClassMetadata('CatalogueBundle:'.$tablename.'');
        $prdSql    = "SELECT id,name,status from $tablename where id = '" . $data_id . "'";
        $statement = $em->getConnection()->prepare($prdSql);
        $statement->execute();
        $statusdata   = $statement->fetchAll();
        $id           = $statusdata[0]["id"];
        $name         = $statusdata[0]["name"];
        $UpSts        = $statusdata[0]["status"];
        $statusFrom   = ($UpSts == 0) ? "Enabled" : "Disabled";
        $statusTo     = ($UpSts == 1) ? "Enabled" : "Disabled";
        $log_old_data = array(
            'id'          => $id,
            'name'        => $name,
            'status_from' => $statusFrom,
            'status_to'   => $statusTo,
        );
        return $log_old_data;
    }

    public function AwsCreateFolder($params)
    {
        //Start to Create Folder from AWS Server
        $awsservices = $this->get(AmazonS3Service::class);
        $awsConn     = $awsservices->awsConnection();
        if (!empty($awsConn)) {
            //Check Default Bucket/Folder Exist or Not on AWS Server
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            if (!empty($amazon_bucket)) {
                //For Original Folder
                if (!$awsConn->doesObjectExist($amazon_bucket, $params['folderKey'])) {
                    $awsservices->bucketName = $amazon_bucket;
                    $awsservices->folderKey  = $params['folderKey'];
                    $new_folder_name         = $awsservices->createFolder($awsConn);
                }
                return true;
            }
        }
        return false;
        //End to Create Folder from AWS Server
    }

    /*
        To Check that the file is exist on S3 for particular path(Created to check file checking on s3 from APIMasterController)
        @Params(Array): Folder Key(Path With File Name started from  the awsDirroot)
        @Container
        @return boolean
    */
    public function renarkAwsCheckFileExists($getprarm,$container="")
    {
        if($container!=''){
            $this->container=$container;
        }
        $returnInfomration=$this->AwsCheckFileExists($getprarm);
        return $returnInfomration;
    }

    public function AwsCheckFileExists($params)
    {
        //Start to Check Folder File from AWS Server
        $awsservices = $this->get(AmazonS3Service::class);
        $awsConn     = $awsservices->awsConnection();
        if (!empty($awsConn)) {
            //Check Default Bucket/Folder Exist or Not on AWS Server
            $amazon_bucket = $this->container->getParameter('amazon_bucket');
            if (!empty($amazon_bucket)) {
                //For Original Folder
                if ($awsConn->doesObjectExist($amazon_bucket, $params['folderKey'])) {
                    return true;
                }
            }
        }
        return false;
        //End to Create Folder from AWS Server
    }
    public function getNewsLetterSubscribeHtml($widgetTypeData, $themename)
    {
        $html = '';
        if (!empty($widgetTypeData) && !empty($widgetTypeData['commaseparated_id'])) {
            $formfield      = json_decode($widgetTypeData['commaseparated_id'], true);
            $GeneralService = $this->get(GeneralService::class);
            //Get Store Main Configuration
            $baseUrl            = $GeneralService->getBaseUrl();
            $SiteSetting        = $GeneralService->getStoreMainConfig();
            $firstNameSub       = "";
            $lastNameSub        = "";
            $phoneSub           = "";
            $emailSub           = "";
            $captchaSub         = "";
            $subscribeButton    = 'Submit';
            $subscribeButtonSub = "";
            $chkCaptcha         = 0;
            $emailSubClass      = "emailSub";
            $submitbtnClass     = "submitSub";
            $sessionLangCode = $this->get('session')->get('front_lang_code');
            if (!empty($SiteSetting)) {
                $webmasterSetting = json_decode($SiteSetting['webmasterSetting']);
                $captcha_site_key = $webmasterSetting->google_captcha_publickkey;
                if (!empty($widgetTypeData['title'])) {
                    $html .= '<h3 class="title-default">' . $widgetTypeData['title'] . '</h3>';
                }
                if (!empty($widgetTypeData['body_text'])) {
                    $html .= $widgetTypeData['body_text'];
                }
                if (isset($formfield['firstNameSub']) && $formfield['firstNameSub'] > 0) {
                    $firstNameSub = '<div class="form-group col-md-12"><input class="required" id="firstname" maxlength="200" name="firstname" placeholder="' . $this->get('translator')->trans('front_first_name') . '" type="text" style="width:100%;" /></div>';
                    $emailSubClass      = "";
                    $submitbtnClass     = "";
                }
                if (isset($formfield['lastNameSub']) && $formfield['lastNameSub'] > 0) {
                    $lastNameSub = '<div class="form-group col-md-12"><input class="required" id="lastname" maxlength="200" name="lastname" placeholder="' . $this->get('translator')->trans('front_last_name') . '" type="text" style="width:100%;" /></div>';
                    $emailSubClass      = "";
                    $submitbtnClass     = "";
                }
                if (isset($formfield['phoneSub']) && $formfield['phoneSub'] > 0) {
                    $phoneSub = '<div class="form-group col-md-12"><input class="required" id="emailid" maxlength="200" name="phone" placeholder="' . $this->get('translator')->trans('front_order_pdf_invoice_phone') . '" type="text" style="width:100%;" /></div>';
                    $emailSubClass      = "";
                    $submitbtnClass     = "";
                }
                if (isset($formfield['emailSub']) && $formfield['emailSub'] > 0) {
                    $emailSub = '<div class="form-group col-md-12 '.$emailSubClass.'"><input class="required" id="emailid" maxlength="200" name="emailid" placeholder="' . $this->get('translator')->trans('front_enter_email') . '" type="email" style="width:100%;" /></div>';
                }
                if(property_exists($webmasterSetting,'google_captcha_version') && $webmasterSetting->google_captcha_version == 3){
                    $captchaSub ='<input type="hidden" id="g-recaptcha-response" name="g-recaptcha-response">';
                }else{
                    $captchaSub = '<div class="form-group col-md-12 clearfix"><div class="g-recaptcha" id="header_fc_captcha" data-sitekey="' . $captcha_site_key . '" data-callback="recaptcha_callback" >&nbsp;</div></div>';
                }
                $subscribeButtonSub = '<div class="form-group col-md-12 clearfix"><input id="btnSubscribe" name="btnSubscribe" type="submit" value="' . $subscribeButton . '" /></div>';

                if (isset($formfield['subscribeButton']) && $formfield['subscribeButton'] != '') {
                    if(array_key_exists($sessionLangCode, $formfield['subscribeButton'])) {
                        $subscribeButton    = $formfield['subscribeButton'][$sessionLangCode];
                    }
                    $subscribeButtonSub = '<div class="form-group col-md-12 '. $submitbtnClass.' clearfix"><input id="btnSubscribe" name="btnSubscribe" type="submit" value="' . $subscribeButton . '" /></div>';
                }
                $csrf =  $this->container->get('security.csrf.token_manager');
                $html .= '<div class="Subscribe">
                            <form class="frmsubscribe" id="frmsubscribe" method="post" name="frmsubscribe">
                                <div class="row">' . $firstNameSub . $lastNameSub . $phoneSub . $emailSub . $captchaSub . $subscribeButtonSub . '</div>
                                <input type="hidden" name="_csrf_token" value="'.$csrf->getToken('authsubscriber').'">
                            </form>
                        </div>';
            }
        }
        return $html;
    }
    //REN13 : get the dynamically data in database predata and postdata
    public function gettablewisecolumname($tablename, $datainsertid)
    {
        $em = $this->getDoctrine()->getManager();
        //$class = $em->getClassMetadata('CatalogueBundle:'.$tablename.'');
        $prdSql    = "SELECT * from $tablename where id = '" . $datainsertid . "'";
        $statement = $em->getConnection()->prepare($prdSql);
        $statement->execute();
        $recentProd = $statement->fetchAll();
        $fields     = array();
        if(!empty($recentProd)){
            foreach ($recentProd[0] as $key => $val) {
                $fields[$key] = $val;
            }
        }
        return $fields;
    }

    //REN13 : check the actually data update or not.data is not updated then no any entry in log table
    public function checkDataIsUpdate($log_old_data, $log_new_data)
    {
        $old_value      = $log_old_data;
        $new_value      = $log_new_data;
        if(!empty($old_value["place_from"])){
            $placeformvalue = $old_value["place_from"];
            unset($new_value["place_from"]);
        }
        unset($old_value["updated_date"]);
        unset($new_value["updated_date"]);
        unset($old_value["place_from"]);
        if ($old_value == $new_value) {
            return 0;
        } else {
            return 1;
        }
    }

    public function getUserGreetings()
    {
        /* This sets the $time variable to the current hour in the 24 hour clock format */
        $time = date("H");
        /* Set the $timezone variable to become the current timezone */
        $timezone = date("e");
        /* If the time is less than 1200 hours, show good morning */
        if ($time < "12") {
            return $this->get('translator')->trans('front_good_morning');
        } else
        /* If the time is grater than or equal to 1200 hours, but less than 1700 hours, so good afternoon */
        if ($time >= "12" && $time < "17") {
            return $this->get('translator')->trans('front_good_afternoon');
        } else
        /* Should the time be between or equal to 1700 and 1900 hours, show good evening */
        if ($time >= "17" && $time < "19") {
            return $this->get('translator')->trans('front_good_evening');
        } else
        /* Finally, show good night if the time is greater than or equal to 1900 hours */
        if ($time >= "19") {
            return $this->get('translator')->trans('front_good_night');
        }
    }

    public function getSliderByLanguage($lang_id = '')
    {
        $langObj = $this->getDoctrine()->getRepository(Language::class)->find($lang_id);
        $lang_ref_id = $langObj->getCtbRefId();
        $em  = $this->getDoctrine()->getManager();
        $sql = " SELECT s.id, s.name FROM slider s"
            . " LEFT JOIN slider_image AS si ON si.slider_ref_id = s.uu_id "
            . " WHERE s.status = 1 AND s.is_deleted = 0 "
            . "AND si.lang_ref_id = '" . $lang_ref_id . "' GROUP BY s.id";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        return $sliderdata = $statement->fetchAll();
    }

    public function getPromotionByLanguage($lang_id = '')
    {
        $em        = $this->getDoctrine()->getManager();
        $sql       = "SELECT id, name FROM marking WHERE status = 1 AND is_deleted = 0 AND is_effect_price = 1 AND lang_id = " . $lang_id;
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        return $promotiondata = $statement->fetchAll();
    }

    public function getCategoryByLanguage($lang_id = '')
    {
        $em        = $this->getDoctrine()->getManager();
        $sql       = "SELECT id, name FROM category WHERE status = 1 AND is_deleted = 0 and lang_id = " . $lang_id;
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        return $category_data = $statement->fetchAll();
    }
    public function setSessionBySlug()
    {
        $request  = Request::createFromGlobals();
        $pathinfo = explode('/', $request->getPathInfo());
        if (!empty($pathinfo)) {
            if ($pathinfo[1] == 'c') {
                // $LangData = $this->getLangByCategorySlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'b') {
                // $LangData = $this->getLangByBrandSlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'p') {
                // $LangData = $this->getLangByProductSlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'page') {
                $LangData = $this->getLangByPageSlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'blog') {
                // $LangData = $this->getLangByBlogSlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'news') {
                // $LangData = $this->getLangByNewsSlug($pathinfo[2]);
            } elseif ($pathinfo[1] == 'ecircular') {
                $LangData = $this->getLangByEcircularId($pathinfo[4]);
            } elseif ($pathinfo[1] == 'faqs') {
                if (isset($pathinfo[2])) {
                    // $LangData = $this->getLangByFaqsSlug($pathinfo[2]);
                }
            } elseif ($pathinfo[1] == 'frontuserpages') {
                $LangData = $this->getLangByFrontUserPagesSlug($pathinfo[2]);
            }

            if (isset($LangData) && !empty($LangData)) {
                $session = new Session();
                $this->get('session')->set('front_lang_id', $LangData['id']);
                $this->get('session')->set('front_lang_code', $LangData['code']);
                $this->get('session')->set('front_lang_name', $LangData['name']);
                $this->get('session')->set('front_lang_ref_id', $LangData['ctbRefId']);

                $cookie   = new Cookie('front-site-language', $LangData['code'], time() + (10 * 365 * 24 * 60 * 60));
                $response = new Response();
                $response->headers->setCookie($cookie);
                $response->send();
            }
        }
    }

    public function getLangByCategorySlug($slug)
    {
        $data = [];
        $em = $this->getDoctrine()->getManager();
        if ($slug) {
            $categoryObj = $em->getRepository('CatalogueBundle:Category')
                        ->findOneBy([
                            'slug' => $slug,
                            'isDeleted' => 0
                        ]);
            if(!empty($categoryObj)) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }                
                $catLangObj = $em->getRepository('CatalogueBundle:CategoryLang')
                                ->findOneBy([
                                    'catRefId' => $categoryObj->getCtbRefId(),
                                    'langRefId' => $defaultLangRefId
                                ]);

                if(!empty($catLangObj)) {
                    $langObj = $GeneralService->getLangObjByUUID($catLangObj->getLangRefId());

                    if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                        $data['id'] = $langObj->getId();
                        $data['name'] = $langObj->getName();
                        $data['code'] = $langObj->getCode();
                        $data['ctbRefId'] = $langObj->getCtbRefId();
                    }
                }
            }
        }
        return $data;
    }

    public function getLangByBrandSlug($slug)
    {
        $data = [];
        $em = $this->getDoctrine()->getManager();
        if ($slug) {
            $brandObj = $em->getRepository('CatalogueBundle:Brand')
                            ->findOneBy([
                                'slug' => $slug,
                                'isDeleted' => 0
                            ]);
            
            if(!empty($brandObj)) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }                
                $brandLangObj = $em->getRepository('CatalogueBundle:BrandLang')
                                    ->findOneBy([
                                    'brandRefId' => $brandObj->getCtbRefId(),
                                    'langRefId' => $defaultLangRefId
                                ]);

                if(!empty($brandLangObj)) {
                    $langObj = $GeneralService->getLangObjByUUID($brandLangObj->getLangRefId());

                    if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                        $data['id'] = $langObj->getId();
                        $data['name'] = $langObj->getName();
                        $data['code'] = $langObj->getCode();
                        $data['ctbRefId'] = $langObj->getCtbRefId();
                    }
                }
            }
        }
        return $data;
    }

    public function getLangByProductSlug($slug)
    {
        $return_data = array();
        $em = $this->getDoctrine()->getManager();
        if ($slug) {
            $productObj = $em->getRepository('CatalogueBundle:Product')
                            ->findOneBy([
                                'slug' => $slug,
                                'isDeleted' => 0
                            ]);
            
            if(!empty($productObj)) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }                
                $productLangObj = $em->getRepository('CatalogueBundle:ProductLang')
                                    ->findOneBy([
                                    'productRefId' => $productObj->getCtbRefId(),
                                    'langRefId' => $defaultLangRefId
                                ]);

                if(!empty($productLangObj)) {
                    $langObj = $GeneralService->getLangObjByUUID($productLangObj->getLangRefId());

                    if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                        $data['id'] = $langObj->getId();
                        $data['name'] = $langObj->getName();
                        $data['code'] = $langObj->getCode();
                        $data['ctbRefId'] = $langObj->getCtbRefId();
                    }
                }
            }
            
            /*$ProductData = $this->getDoctrine()->getRepository('CatalogueBundle:Product')->findOneBy(array('slug' => $slug, 'isDeleted' => 0));
            if ($ProductData) {
                $LangData = $ProductData->getLang();
                if ($LangData && $LangData->getStatus() == 1 && $LangData->getIsDeleted() == 0) {
                    $return_data['id']   = $LangData->getId();
                    $return_data['name'] = $LangData->getName();
                    $return_data['code'] = $LangData->getCode();
                    $return_data['ctbRefId'] = $LangData->getCtbRefId();
                }
            }*/
        }
        return $return_data;
    }

    public function getLangByPageSlug($slug)
    {
        $return_data = array();
        if ($slug) {
            $em = $this->getDoctrine()->getManager();
            $cmsPageObj = $em->getRepository('ContentcmsBundle:CmsPage')->findOneBy([
                                'slug' => $slug, 
                                'isDeleted' => 0
                            ]);
            
            if ($cmsPageObj) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }

                $pageLangObj = $em->getRepository('ContentcmsBundle:CmsPageLang')->findOneBy([
                                'langRefId' => $defaultLangRefId,
                                'pageRefId' => $cmsPageObj->getUUId()
                            ]);
                
                $langObj = $GeneralService->getLangObjByUUID($pageLangObj->getLangRefId());
                if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                    $return_data['id']   = $langObj->getId();
                    $return_data['name'] = $langObj->getName();
                    $return_data['code'] = $langObj->getCode();
                    $return_data['ctbRefId'] = $langObj->getCtbRefId();
                }
            }
        }
        return $return_data;
    }

    public function getLangByBlogSlug($slug)
    {
        $data = [];
        /*if ($slug) {
            $BlogData = $this->getDoctrine()->getRepository('ContentcmsBundle:Blog')->findOneBy(array('blogSlug' => $slug, 'isDeleted' => 0));
            if ($BlogData) {
                $LangData = $BlogData->getLang();
                if ($LangData && $LangData->getStatus() == 1 && $LangData->getIsDeleted() == 0) {
                    $data['id']   = $LangData->getId();
                    $data['name'] = $LangData->getName();
                    $data['code'] = $LangData->getCode();
                    $data['ctbRefId'] = $LangData->getCtbRefId();
                }
            }
        }*/
        $em = $this->getDoctrine()->getManager();
        
        if ($slug) {
            $blogObj = $em->getRepository(Blog::class)->findOneBy(['blogSlug' => $slug, 'isDeleted' => 0]);

            if ($blogObj) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }

                $blogLangObj = $em->getRepository('ContentcmsBundle:BlogLang')->findOneBy([
                    'blogRefId' => $blogObj->getUUId(),
                    'langRefId' => $defaultLangRefId
                ]);

                $langObj = $GeneralService->getLangObjByUUID($blogLangObj->getLangRefId());

                if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                    $data['id'] = $langObj->getId();
                    $data['name'] = $langObj->getName();
                    $data['code'] = $langObj->getCode();
                    $data['ctbRefId'] = $langObj->getCtbRefId();
                }
            }
        }

        return $data;
    }

    public function getLangByNewsSlug($slug)
    {
        $data = [];
        /*if ($slug) {
            $NewsData = $this->getDoctrine()->getRepository('ContentcmsBundle:News')->findOneBy(array('newsSlug' => $slug, 'isDeleted' => 0));
            if ($NewsData) {
                $LangData = $NewsData->getLang();
                if ($LangData && $LangData->getStatus() == 1 && $LangData->getIsDeleted() == 0) {
                    $return_data['id']   = $LangData->getId();
                    $return_data['name'] = $LangData->getName();
                    $return_data['code'] = $LangData->getCode();
                    $return_data['ctbRefId'] = $LangData->getCtbRefId();
                }
            }
        }*/
        $em = $this->getDoctrine()->getManager();
        if($slug) {
            $newsObj = $em->getRepository(News::class)->findOneBy(['newsSlug' => $slug, 'isDeleted' => 0]);
            if($newsObj) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();
                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }
                $newsLangObj = $em->getRepository('ContentcmsBundle:NewsLang')->findOneBy([
                    'newsRefId' => $newsObj->getUUId(),
                    'langRefId' => $defaultLangRefId
                ]);

                $langObj = $GeneralService->getLangObjByUUID($newsLangObj->getLangRefId());

                if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                    $data['id'] = $langObj->getId();
                    $data['name'] = $langObj->getName();
                    $data['code'] = $langObj->getCode();
                    $data['ctbRefId'] = $langObj->getCtbRefId();
                }
            }

        }
        return $data;
    }

    public function getLangByEcircularId($id)
    {
        $em = $this->getDoctrine()->getManager();
        $return_data = array();
        if ($id) {
           /* $EcircularData = $this->getDoctrine()->getRepository('ContentcmsBundle:Ecircular')->findOneBy(array('id' => $id, 'isDeleted' => 0));
            if ($EcircularData) {
                $LangData = $EcircularData->getLang();
                if ($LangData && $LangData->getStatus() == 1 && $LangData->getIsDeleted() == 0) {
                    $return_data['id']   = $LangData->getId();
                    $return_data['name'] = $LangData->getName();
                    $return_data['code'] = $LangData->getCode();
                    $return_data['ctbRefId'] = $LangData->getCtbRefId();
                }*/
            $ecircularObj = $em->getRepository(Ecircular::class)->findOneBy(['id' => $id, 'isDeleted' => 0]);

            if ($ecircularObj) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }

                $ecircularLangObj = $em->getRepository(EcircularLang::class)->findOneBy([
                    'ecircularRefId' => $ecircularObj->getUUId(),
                    'langRefId' => $defaultLangRefId
                ]);
                
                $langObj = $GeneralService->getLangObjByUUID($ecircularLangObj->getLangRefId());

                if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                    $return_data['id'] = $langObj->getId();
                    $return_data['name'] = $langObj->getName();
                    $return_data['code'] = $langObj->getCode();
                    $return_data['ctbRefId'] = $langObj->getCtbRefId();
                }    
            }
        }
        return $return_data;
    }    
    function getLangByFaqsSlug($slug) {
        $data = [];
        $em = $this->getDoctrine()->getManager();
        if ($slug) {
            $faqCatObj = $em->getRepository('ContentcmsBundle:FaqCategory')
                            ->findOneBy([
                                'slug' => $slug,
                                'isDeleted' => 0
                            ]);

            if ($faqCatObj) {
                $GeneralService = $this->get(GeneralService::class);
                $defaultLangRefId = $GeneralService->getDefaultLangRefId();

                if ($this->get('session')->get('front_lang_ref_id')) {
                    $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
                }
                $faqCatLangObj = $em->getRepository('ContentcmsBundle:FaqCategoryLang')
                        ->findOneBy([
                    'catRefId' => $faqCatObj->getUUId(),
                    'langRefId' => $defaultLangRefId
                ]);
                
                if(!empty($faqCatLangObj)) {
                    $langObj = $GeneralService->getLangObjByUUID($faqCatLangObj->getLangRefId());

                    if ($langObj && $langObj->getStatus() == 1 && $langObj->getIsDeleted() == 0) {
                        $data['id'] = $langObj->getId();
                        $data['name'] = $langObj->getName();
                        $data['code'] = $langObj->getCode();
                        $data['ctbRefId'] = $langObj->getCtbRefId();
                    }
                }
            }
        }

        return $data;
    }

    public function getLangByFrontUserPagesSlug($slug)
    {
        $return_data = array();
        if ($slug) {
            $DealerCmsPageData = $this->getDoctrine()->getRepository('DealersBundle:DealerCmsPage')->findOneBy(array('slug' => $slug, 'isDeleted' => 0));
            if ($DealerCmsPageData) {
                $LangId   = $DealerCmsPageData->getLangId();
                $LangData = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findOneBy(array('id' => $LangId, 'isDeleted' => 0, 'status' => 1));
                if ($LangData) {
                    $return_data['id']   = $LangData->getId();
                    $return_data['name'] = $LangData->getName();
                    $return_data['code'] = $LangData->getCode();
                    $return_data['ctbRefId'] = $LangData->getCtbRefId();
                }
            }
        }
        return $return_data;
    }

    //REN02
    public function getStoreEmails($which = 'all')
    {
        $em     = $this->getDoctrine()->getManager();
        $emails = array();
        if ($which == 'profile' || $which == 'all') {
            $profileSql = "SELECT main_name, contact_name, contact_email, store_support_email, allother_setting from store_main_config where id = ?";
            $statement  = $em->getConnection()->prepare($profileSql);
            $statement->execute(array(1));
            $profileData = $statement->fetchAll();
            if (!empty($profileData)) {
                if (!empty($profileData[0]['contact_email']) && !array_key_exists($profileData[0]['contact_email'], $emails)) {
                    //array_push($emails, $profileData[0]['contact_email']);
                    $emails[$profileData[0]['contact_email']] = $profileData[0]['contact_name'] . ' <' . $profileData[0]['contact_email'] . '>';
                }
                if (!empty($profileData[0]['store_support_email']) && !array_key_exists($profileData[0]['store_support_email'], $emails)) {
                    //array_push($emails, $profileData[0]['store_support_email']);
                    $emails[$profileData[0]['store_support_email']] = $profileData[0]['main_name'] . ' <' . $profileData[0]['store_support_email'] . '>';
                }
                $allother_setting = json_decode($profileData[0]['allother_setting'], true);
                $bcc_email        = $allother_setting['contact_bcc_email'];
                if (!empty($bcc_email)) {
                    $bcc_emails = explode(',', $bcc_email);
                    foreach ($bcc_emails as $bcc) {
                        if (!array_key_exists($bcc, $emails)) {
                            //array_push($emails, $bcc);
                            $emails[$bcc] = $bcc;
                        }
                    }
                }
            }
        }

        if ($which == 'user' || $which == 'all') {
            $userSql   = "SELECT first_name, last_name, emailid from customer where status = ? AND is_deleted = ? AND user_type_id > ?";
            $statement = $em->getConnection()->prepare($userSql);
            $statement->execute(array(1, 0, 0));
            $userData = $statement->fetchAll();
            if (!empty($userData)) {
                foreach ($userData as $user) {
                    if (!empty($user['emailid']) && !array_key_exists($user['emailid'], $emails)) {
                        //array_push($emails, $user['emailid']);
                        $emails[$user['emailid']] = $user['first_name'] . ' ' . $user['last_name'] . ' <' . $user['emailid'] . '>';
                    }
                }
            }
        }

        if ($which == 'front_user' || $which == 'all') {
            $userSql   = "SELECT name, email from user where status = ? AND is_deleted = ?";
            $statement = $em->getConnection()->prepare($userSql);
            $statement->execute(array(1, 0));
            $userData = $statement->fetchAll();
            if (!empty($userData)) {
                foreach ($userData as $user) {
                    if (!empty($user['email']) && !array_key_exists($user['email'], $emails)) {
                        //array_push($emails, $userData[0]['email']);
                        $emails[$user['email']] = $user['name'] . ' <' . $user['email'] . '>';
                    }
                }
            }
        }
        return $emails;
    }
    //REN02
    public function updateCheckoutData($data)
    {
        $session         = new Session();
        $CheckoutService = $session->get('CheckoutService');

        if (isset($data['shipFirstName']) && $data['shipFirstName'] != 'undefined') {
            $CheckoutService->setShipFirstName($data['shipFirstName']);
        }
        if (isset($data['shipMiddleName']) && $data['shipMiddleName'] != 'undefined') {
            $CheckoutService->setShipMiddleName($data['shipMiddleName']);
        }
        if (isset($data['shipLastName']) && $data['shipLastName'] != 'undefined') {
            $CheckoutService->setShipLastName($data['shipLastName']);
        }
        if (isset($data['shipCompanyName']) && $data['shipCompanyName'] != 'undefined') {
            $CheckoutService->setShipCompanyName($data['shipCompanyName']);
        }
        if (isset($data['shipEmail']) && $data['shipEmail'] != 'undefined') {
            $CheckoutService->setShipEmail($data['shipEmail']);
        }
        if (isset($data['shipPhone']) && $data['shipPhone'] != 'undefined') {
            $CheckoutService->setShipPhone($data['shipPhone']);
        }
        if (isset($data['shipFax']) && $data['shipFax'] != 'undefined') {
            $CheckoutService->setShipFax($data['shipFax']);
        }
        if (isset($data['shipAddress1']) && $data['shipAddress1'] != 'undefined') {
            $CheckoutService->setShipAddress1($data['shipAddress1']);
        }
        if (isset($data['shipAddress2']) && $data['shipAddress2'] != 'undefined') {
            $CheckoutService->setShipAddress2($data['shipAddress2']);
        }
        if (isset($data['shipCountry']) && $data['shipCountry'] != 'undefined') {
            $CheckoutService->setShipCountry($data['shipCountry']);
        }
        if (isset($data['shipState']) && $data['shipState'] != 'undefined') {
            $CheckoutService->setShipState($data['shipState']);
        }
        if (isset($data['shipCity']) && $data['shipCity'] != 'undefined') {
            $CheckoutService->setShipCity($data['shipCity']);
        }
        if (isset($data['shipZip']) && $data['shipZip'] != 'undefined') {
            $CheckoutService->setShipZip($data['shipZip']);
        }

        if (isset($data['bilFirstName']) && $data['bilFirstName'] != 'undefined') {
            $CheckoutService->setBilFirstName($data['bilFirstName']);
        }
        if (isset($data['bilMiddleName']) && $data['bilMiddleName'] != 'undefined') {
            $CheckoutService->setBilMiddleName($data['bilMiddleName']);
        }
        if (isset($data['bilLastName']) && $data['bilLastName'] != 'undefined') {
            $CheckoutService->setBilLastName($data['bilLastName']);
        }
        if (isset($data['bilCompanyName']) && $data['bilCompanyName'] != 'undefined') {
            $CheckoutService->setBilCompanyName($data['bilCompanyName']);
        }
        if (isset($data['bilEmail']) && $data['bilEmail'] != 'undefined') {
            $CheckoutService->setBilEmail($data['bilEmail']);
        }
        if (isset($data['bilPhone']) && $data['bilPhone'] != 'undefined') {
            $CheckoutService->setBilPhone($data['bilPhone']);
        }
        if (isset($data['bilFax']) && $data['bilFax'] != 'undefined') {
            $CheckoutService->setBilFax($data['bilFax']);
        }
        if (isset($data['bilAddress1']) && $data['bilAddress1'] != 'undefined') {
            $CheckoutService->setBilAddress1($data['bilAddress1']);
        }
        if (isset($data['bilAddress2']) && $data['bilAddress2'] != 'undefined') {
            $CheckoutService->setBilAddress2($data['bilAddress2']);
        }
        if (isset($data['bilCountry']) && $data['bilCountry'] != 'undefined') {
            $CheckoutService->setBilCountry($data['bilCountry']);
        }
        if (isset($data['bilState']) && $data['bilState'] != 'undefined') {
            $CheckoutService->setBilState($data['bilState']);
        }
        if (isset($data['bilCity']) && $data['bilCity'] != 'undefined') {
            $CheckoutService->setBilCity($data['bilCity']);
        }
        if (isset($data['bilZip']) && $data['bilZip'] != 'undefined') {
            $CheckoutService->setBilZip($data['bilZip']);
        }
        if (isset($data['billDiffAddress']) && ($data['billDiffAddress'] != 'undefined' || $data['billDiffAddress'] >= 0)) {
            $CheckoutService->setBillDiffAddress($data['billDiffAddress']);
        }

        if (isset($data['shippingAddress']) && $data['shippingAddress'] != 'undefined') {
            $CheckoutService->setShippingAddress($data['shippingAddress']);
        }
        if (isset($data['billingAddress']) && $data['billingAddress'] != 'undefined') {
            $CheckoutService->setBillingAddress($data['billingAddress']);
        }

        if (isset($data['shippingMethodId']) && $data['shippingMethodId'] != 'undefined') {
            $CheckoutService->setShippingMethodId($data['shippingMethodId']);
        }
        if (isset($data['shippingMethodName']) && $data['shippingMethodName'] != 'undefined') {
            $CheckoutService->setShippingMethodName($data['shippingMethodName']);
        }
        if (isset($data['shippingMethodSlug']) && $data['shippingMethodSlug'] != 'undefined') {
            $CheckoutService->setShippingMethodSlug($data['shippingMethodSlug']);
        }
        if (isset($data['shippingOptionId']) && $data['shippingOptionId'] != 'undefined') {
            $CheckoutService->setShippingOptionId($data['shippingOptionId']);
        }
        if (isset($data['shippingCharge']) && ($data['shippingCharge'] != 'undefined' || $data['shippingCharge'] >= 0)) {
            $CheckoutService->setShippingCharge($data['shippingCharge']);
        }
        if (isset($data['shippingLabel']) && $data['shippingLabel'] != 'undefined') {
            $CheckoutService->setShippingLabel($data['shippingLabel']);
        }

        if (isset($data['instoreCountry']) && $data['instoreCountry'] != 'undefined') {
            $CheckoutService->setInstoreCountry($data['instoreCountry']);
        }
        if (isset($data['instoreState']) && $data['instoreState'] != 'undefined') {
            $CheckoutService->setInstoreState($data['instoreState']);
        }
        if (isset($data['instoreCity']) && $data['instoreCity'] != 'undefined') {
            $CheckoutService->setInstoreCity($data['instoreCity']);
        }
        if (isset($data['instoreZip']) && $data['instoreZip'] != 'undefined') {
            $CheckoutService->setInstoreZip($data['instoreZip']);
        }

        if (isset($data['preferredRangeFrom']) && $data['preferredRangeFrom'] != 'undefined') {
            //$CheckoutService->setPreferredRangeFrom($data['preferredRangeFrom']);
        }
        if (isset($data['preferredRangeTo']) && $data['preferredRangeTo'] != 'undefined') {
            //$CheckoutService->setPreferredRangeTo($data['preferredRangeTo']);
        }

        if (isset($data['salesPerson']) && $data['salesPerson'] != 'undefined') {
            $CheckoutService->setSalesPerson($data['salesPerson']);
        }
        // Set session for hiding zipcode!!
        $showZip = $this->checkZipcodeExistShippingZone();
        if($showZip){
            $CheckoutService->setShowZip(1);            
        }else{
            $CheckoutService->setShowZip(0);  
        }
        $session->set('CheckoutService', $CheckoutService);
        return $CheckoutService;
    }

    public function getShippingTypeData()
    {
        $session                             = new Session();
        $CheckoutService                     = $session->get('CheckoutService');
        $return_data                         = array();
        $return_data['calc_country_id']      = !empty($CheckoutService->getInstoreCountry()) ? $CheckoutService->getInstoreCountry() : $CheckoutService->getShipCountry();
        $return_data['calc_state_id']        = !empty($CheckoutService->getInstoreState()) ? $CheckoutService->getInstoreState() : $CheckoutService->getShipState();
        $return_data['calc_city_id']         = ($CheckoutService->getInstoreCity() != 0) ? $CheckoutService->getInstoreCity() : $CheckoutService->getShipCity();
        $return_data['calc_zipcode']         = !empty($CheckoutService->getInstoreZip()) ? $CheckoutService->getInstoreZip() : $CheckoutService->getShipZip();
        $return_data['country_id']           = $CheckoutService->getShipCountry();
        $return_data['state_id']             = $CheckoutService->getShipState();
        $return_data['city_id']              = $CheckoutService->getShipCity();
        $return_data['zipcode']              = $CheckoutService->getShipZip();
        $return_data['shipping_options_id']  = $CheckoutService->getShippingOptionId();
        $return_data['shipping_charge']      = $CheckoutService->getShippingCharge();
        $return_data['shipping_label']       = $CheckoutService->getShippingLabel();
        $return_data['shipping_method_id']   = $CheckoutService->getShippingMethodId();
        $return_data['shipping_method_name'] = $CheckoutService->getShippingMethodName();
        $return_data['shipping_method_slug'] = $CheckoutService->getShippingMethodSlug();
        return json_encode($return_data);
    }

    //REN02
    /**
     * @Route("/billingsameasshipping" , name="billingsameasshipping")
     */
    public function billingSameAsShipping(Request $request)
    {
        $checkoutData                    = array();
        $checkoutData['shipFirstName']   = $request->request->get('ship_first_name');
        $checkoutData['shipMiddleName']  = $request->request->get('ship_middle_name');
        $checkoutData['shipLastName']    = $request->request->get('ship_last_name');
        $checkoutData['shipCompanyName'] = $request->request->get('ship_company_name');
        $checkoutData['shipAddress1']    = $request->request->get('ship_address1');
        $checkoutData['shipAddress2']    = $request->request->get('ship_address2');
        $checkoutData['shipPhone']       = $request->request->get('ship_phone');
        $checkoutData['shipEmail']       = $request->request->get('ship_email');
        $checkoutData['shipFax']         = $request->request->get('ship_fax');
        $checkoutData['shipCountry']     = $request->request->get('ship_country');
        if ($request->request->get('ship_state') != 'null') {
            $checkoutData['shipState'] = $request->request->get('ship_state');
        }
        if ($request->request->get('ship_city') != 'null') {
            $checkoutData['shipCity'] = $request->request->get('ship_city');
        }
        $checkoutData['shipZip']         = $request->request->get('ship_zip');
        $checkoutData['salesPerson']     = $request->request->get('sales_person');
        $checkoutData['billDiffAddress'] = 0;
        $this->updateCheckoutData($checkoutData);
        echo 1;
        exit;
    }
    public function getRates($storeCurrency, $basecurrency = null, $container = false)
    {
        $Store           = "";
        $StoreId         = "";
        $GeneralFunction = new GeneralFunctionController;
        if ($container) {
            $this->container = $container;
        }
        $GeneralService = $this->get(GeneralService::class);
        $masterurl      = $this->container->getParameter('masterurl');
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $ApiAccess      = $this->getDoctrine()->getRepository('SystemBundle:ApiAccess')->findBy(array('status' => 1, 'isDeleted' => 0, 'id' => 1));
        $DashWidget     = "";
        if (!empty($ApiAccess)) {
            $store_id  = $ApiAccess[0]->getStoreId();
            $accesskey = $ApiAccess[0]->getAccessKey();
            if (!empty($SiteSetting) && !empty($SiteSetting['otherapiSetting'])) {
                $otherapiSetting = json_decode($SiteSetting['otherapiSetting']);
                if (!empty($otherapiSetting) && !empty($otherapiSetting->rencomApiUrl)) {
                    $masterurl = $otherapiSetting->rencomApiUrl;
                }
            }
            $url    = $masterurl . "wsapi/v1/getRates";
            $params = array(
                'store_id'      => $store_id,
                'storeCurrency' => $storeCurrency,
                'basecurrency'  => $basecurrency,
            );
            $header      = array('accesskey:' . $accesskey);
            $ApiResponse = $this->postData($url, $params, $header);
            if (!empty($ApiResponse) && $ApiResponse != '[]') {
                $ApiResult = @json_decode($ApiResponse);
                if (@$ApiResult->code == 200 && @$ApiResult->status == 'Success') {
                    return json_encode($ApiResult->rate);
                }
            }
        }
        return '';
    }

    public function getAttributeTreeViewList($param = array('orderby' => 'a.id', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'lang_id' => ''))
    {
        $common_condition               = '';
        $session                        = new Session();
        $GeneralService                 = $this->get(GeneralService::class);
        $front_lang_id                  = $session->get('front_lang_id');
        $em                             = $this->getDoctrine()->getManager();
        $where_condition                = '';
        $operator_array                 = array();
        $sortby                         = 'ASC';
        $field_data                     = ' a.id as id,al.attributeName as text,al.attributeName as name,a.slug,ag.id as attribute_group_id,agl.groupName as attribute_group_name, a.ctbRefId, ag.ctbRefId as ag_ctb_ref_id';
        $condition_array                = array();
        $condition_array['a.status']    = 1;
        $condition_array['a.isDeleted'] = 0;
        /*if (!empty($param['lang_id'])) {
            $condition_array['IDENTITY(a.lang)'] = $param['lang_id'];
        } else if (!empty($front_lang_id)) {
            $condition_array['IDENTITY(a.lang)'] = $front_lang_id;
        }*/
        if (!empty($param['lang_id'])) {
            $front_lang_id = $param['lang_id'];
        } else {
            $front_lang_id = $session->get('front_lang_id');
        }
        $front_lang_ref_id = $GeneralService->getLangRefIdById($front_lang_id);
        if (!empty($param['commaseparated_id'])) {
            $param['commaseparated_id']     = explode(',', $param['commaseparated_id']);
            $operator_array[0]['operator']  = 'IN';
            $operator_array[0]['op_from']   = 'a.id';
            $operator_array[0]['op_allies'] = 'miarray';
            $operator_array[0]['op_value']  = $param['commaseparated_id'];
        }
        $orderby       = $param['orderby'];
        $join_array    = array();
        //$join_array[0] = array('type' => '', 'join_from' => 'a.group', 'join_to' => 'ag.id', 'join_allies' => 'ag', 'join_class' => 'CatalogueBundle:AttributeGroup', 'join_condition' => 'AND ag.status = 1 AND ag.isDeleted = 0');
        $join_array[0]['type'] = '';
        $join_array[0]['join_from'] = 'a.ctbRefId';
        $join_array[0]['join_to'] = 'al.attributeRefId';
        $join_array[0]['join_allies'] = 'al';
        $join_array[0]['join_class'] = 'CatalogueBundle:AttributeLang';
        $join_array[0]['join_condition'] = "AND al.langRefId = '".$front_lang_ref_id."' ";  
        
        $join_array[1]['type'] = '';
        $join_array[1]['join_from'] = 'a.attributeGroupRefId';
        $join_array[1]['join_to'] = 'ag.ctbRefId';
        $join_array[1]['join_allies'] = 'ag';
        $join_array[1]['join_class'] = 'CatalogueBundle:AttributeGroup';
        $join_array[1]['join_condition'] = "";  
        
        $join_array[2]['type'] = '';
        $join_array[2]['join_from'] = 'ag.ctbRefId';
        $join_array[2]['join_to'] = 'agl.attributeGroupRefId';
        $join_array[2]['join_allies'] = 'agl';
        $join_array[2]['join_class'] = 'CatalogueBundle:AttributeGroupLang';
        $join_array[2]['join_condition'] = "AND agl.langRefId = '".$front_lang_ref_id."' ";
        $groupby       = 'a.id';
        $result        = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:Attribute", $allies = 'a', $condition_array, $operator_array, $field_data, $groupby, $sortby, $orderby, $limit = $param['limit'], $offset = '', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        return $result;
    }

    public function WidgetTypeByArea($widget_area_id = '')
    {
        $em        = $this->getDoctrine()->getManager();
        $sql       = "SELECT wt.id, wt.name, wt.slug FROM widget_type wt JOIN widget_area_type wat ON wat.widget_type_id = wt.id WHERE wat.widget_area_id = ? AND wt.status = ?";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute(array($widget_area_id, 1));
        $widget_type_data = $statement->fetchAll();
        foreach($widget_type_data as $key => $type){
            if($type['slug'] == 'promotions'){
                unset($widget_type_data[$key]);
                $sql       = "SELECT id,name FROM marking WHERE status = ? AND is_deleted = ?";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute(array(1, 0));
                $marking_data = $statement->fetchAll();
                foreach($marking_data as $data){
                    $return =array();
                    $return['id'] = $data['id'];
                    $return['name'] = $data['name'];
                    $return['slug'] = $data['id'];

                    array_push($widget_type_data, $return);
                }
            }elseif($type['slug'] == 'googletranslatecode'){
                $GeneralService = $this->get(GeneralService::class);
                $googleTranslateCode = $GeneralService->getModuleIdbySlug('google-translate-code');
                if(!isset($googleTranslateCode) || empty($googleTranslateCode)){
                    unset($widget_type_data[$key]);
                }
            }
        }
        return json_encode($widget_type_data);
    }

    public function getAllRates($basecurrency = null)
    {
        $Store           = "";
        $StoreId         = "";
        $GeneralFunction = new GeneralFunctionController;
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting     = $GeneralService->getStoreMainConfig();

        $ApiAccess  = $this->getDoctrine()->getRepository('SystemBundle:ApiAccess')->findBy(array('status' => 1, 'isDeleted' => 0, 'id' => 1));
        $DashWidget = "";
        if (!empty($ApiAccess)) {
            $store_id  = $ApiAccess[0]->getStoreId();
            $accesskey = $ApiAccess[0]->getAccessKey();

            if (!empty($SiteSetting) && !empty($SiteSetting['otherapiSetting'])) {
                $otherapiSetting = json_decode($SiteSetting['otherapiSetting']);
                if (!empty($otherapiSetting) && !empty($otherapiSetting->rencomApiUrl)) {
                    $masterurl = $otherapiSetting->rencomApiUrl;
                } else {
                    $masterurl = $this->container->getParameter('masterurl');
                }
            } else {
                $masterurl = $this->container->getParameter('masterurl');
            }
            $url = $masterurl . "wsapi/v1/getAllRates";

            $params = array(
                'store_id'     => $store_id,
                'basecurrency' => $basecurrency,
            );
            $header      = array('accesskey:' . $accesskey);
            $ApiResponse = $this->postData($url, $params, $header);
            if (!empty($ApiResponse) && $ApiResponse != '[]') {
                $ApiResult = @json_decode($ApiResponse);
                if (@$ApiResult->code == 200 && @$ApiResult->status == 'Success') {
                    echo json_encode($ApiResult->rates);
                    exit;
                }
            }
        }
        echo '';
        exit;
    }

    public function contactTemplateHtmlAction(Request $request)
    {
        $em                = $this->getDoctrine()->getManager();
        $GeneralService    = $this->get(GeneralService::class);
        $MyFrontService    = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $SiteSetting       = $GeneralService->getStoreMainConfig();
        $LayoutSetting     = $GeneralService->getStoreLayoutConfig();
        $themename         = $LayoutSetting['themename'];
        $langCode          = $this->getFrontLanguage($SiteSetting);
        //$langCode          = $this->getDefaultLanguage();
        //$lnCode            = $langCode->getCode();
        $template          = $request->get('template');
        $webmasterSetting  = json_decode($SiteSetting['webmasterSetting'], true);
        $multiple_location = 'No';
        if (!empty($SiteSetting['allotherSetting'])) {
            $allotherSetting = json_decode($SiteSetting['allotherSetting'], true);
            if (!empty($allotherSetting)) {
                $multiple_location = $allotherSetting['multiple_location'];
            }
        }
        if ($template == 'contactlocation') {
            $multiple_location = 'Yes';
        }
        //REN08 : start
        (!empty($SiteSetting['contactusText'])) ? $DbContactusText = json_decode($SiteSetting['contactusText']) : $DbContactusText = "";    
        $storeContactusText = array();
        if (!empty($DbContactusText)) {
            if (is_object($DbContactusText)) {
                $storeContactusText = $DbContactusText;
            } else {
                $storeContactusText[$langCode] = $DbContactusText;
            }
        }
        //REN08 : end
        
        //create contactUs Form
        if (!empty($multiple_location) && $multiple_location == 'Yes') {
            $form = $this->createFormBuilder()
                ->add('personName', TextType::class, array('required' => true))
                ->add('personLastName', TextType::class, array('required' => true))
                ->add('personEmail', TextType::class, array('required' => true))
                ->add('personPhone', TextType::class, array('required' => true))
                ->add('contactComments', TextareaType::class, array('required' => true))
                ->add('submit', SubmitType::class, array())
                ->getForm();
        } else {
            $form = $this->createFormBuilder()
                ->add('personName', TextType::class, array('required' => true))
                ->add('personEmail', TextType::class, array('required' => true))
                ->add('personPhone', TextType::class, array('required' => true))
                ->add('contactComments', TextareaType::class, array('required' => true))
                ->add('submit', SubmitType::class, array())
                ->getForm();
        }
        $captcha_site_key   = $webmasterSetting['google_captcha_publickkey'];
        $captcha_version    = isset($webmasterSetting['google_captcha_version'])?$webmasterSetting['google_captcha_version']:2;
        $captcha_secret_key = $webmasterSetting['google_captcha_secretkey'];
        $storeHours         = json_decode($SiteSetting['storeHours']);

        $storeTime = "";
        if (!empty($storeHours) && !empty($storeHours->openday)) {
            $storeTime = '<table style="border:0px; width:100%;"><tr><th class="text-right">Days</th><th class="text-right">Open Hours</th><th class="text-right">Close Hours</th></tr>';
            for ($i = 0; $i < count($storeHours->openday); $i++) {
                $openday = $storeHours->openday[$i];
                $storeTime .= '<tr><td>' . $openday . '</td><td>';
                $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                $storeTime .= '</td><td>';
                $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday);
                $storeTime .= '</td>';
            }
            $storeTime .= "</table>";
        }

        // $StateName    =  $this->getStateAbbrById($SiteSetting['state'], $lnCode);
        // $CityName     =  $this->getCityNameById($SiteSetting['city'], $lnCode);

        $warehouse_data_hours = array();
        $address_data1        = array();
        $warehouse_data       = array();
        $address_data         = array();
        $warehouse_data_array = array();
        //$this->get('translator')->setLocale('es');        
        $this->get('translator')->setLocale($langCode);        
        $hourskeys            = array("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
        if (!empty($multiple_location) && $multiple_location == 'Yes') {
            //Start: This changes is only for remove language dependancy from contact in front end (T-0096114 - Proactive Improvement - Profit Systems Enhancements (Elements + FDN)) {Done by Vishwa}
            // $warehouse_data       = $em->getRepository('SystemBundle:Warehouse')->findBy(array('status' => 1, 'isDeleted' => 0, 'lang' => $this->get('session')->get('front_lang_id')), array('sortOrder' => 'ASC'));
            $warehouse_data       = $em->getRepository('SystemBundle:Warehouse')->findBy(array('status' => 1, 'isDeleted' => 0, 'showInFront' => 1), array('sortOrder' => 'ASC'));
            //End: {Done by Vishwa}
            $warehouse_data_hours = array();
            if (!empty($warehouse_data)) {
                foreach ($warehouse_data as $val) {
                    (!empty($val->getStoreHours())) ? $StoreHoursSetting = json_decode($val->getStoreHours()) : $StoreHoursSetting = "";
                    $storeTime = '';
                    if (!empty($StoreHoursSetting)) {
                        $storeHours = $StoreHoursSetting;
                        if (!empty($storeHours) && (!empty($storeHours->openday) || !empty($storeHours->hrsnote))) {
                            $storeTime = "<table width=100%>";
                            for ($i = 0; $i < count($hourskeys); $i++) {
                                $openday = '';
                                if (in_array($hourskeys[$i], $storeHours->openday)) {
                                    $openday      = $hourskeys[$i];
                                    $openhours    = $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                                    $closinghours = $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday);
                                    $to           = '<td class=text-center>to</td>';
                                } else {
                                    $dayname=$hourskeys[$i];
                                    if (array_key_exists($hourskeys[$i],$storeHours->hrsnote) && trim($storeHours->hrsnote->$dayname)!=''){                                        
                                        $openday      = $hourskeys[$i];
                                        $openhours    = $storeHours->hrsnote->$dayname;
                                        $closinghours = '';
                                        $to           = '';
                                    }else{
                                        $openday      = $hourskeys[$i];
                                        $openhours    = 'Closed';
                                        $closinghours = '<td></td>';
                                        $to           = '<td><td>';
                                    }
                                }
                                $openday = strtolower($openday);
                                //$openday = $storeHours->openday[$i];
                                if($closinghours == ''){
                                    $storeTime .= '<tr><td>' . $this->get('translator')->trans($openday) . '</td><td colspan="5">';
                                    $storeTime .= $openhours;
                                    $storeTime .= '</td></tr>';
                                }else{
                                    $storeTime .= '<tr><td>' . $this->get('translator')->trans($openday) . '</td><td>';
                                    $storeTime .= $openhours;
                                    $storeTime .= '</td>' . $to . '<td>';
                                    $storeTime .= $closinghours;
                                    $storeTime .= '</td></tr>';
                                }
                            }
                            $storeTime .= "</table>";
                        }
                    } else {
                        $storeTime = "<table width=60%>";
                        for ($i = 0; $i < count($hourskeys); $i++) {
                            $openday = strtolower($hourskeys[$i]);
                            $storeTime .= '<tr><td>' . $this->get('translator')->trans($openday) . '</td><td>';
                            $storeTime .= 'Closed';
                            $storeTime .= '</td></tr>';
                        }
                        $storeTime .= "</table>";
                    }
                    $latitude_val  = '';
                    $longitude_val = '';
                    $latitude      = $val->getLatitude();
                    $longitude     = $val->getLongitude();
                    $latlong       = $latitude . ',' . $longitude;
                    $state_name    = '';
                    if (is_numeric($val->getState())) {
                        $state_name = $this->getStateNameById($val->getState());
                    } else {
                        $state_name = $val->getState();
                    }
                    $city_name = '';
                    if (is_numeric($val->getCity())) {
                        $city_name = $this->getCityNameById($val->getCity());
                    } else {
                        $city_name = $val->getCity();
                    }
                    $warehouse_data_hours[] = array('storeHours' => $storeTime);
                    $address_data1[]        = array('id' => $val->getId(), 'name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'contact' => $val->getContact(), 'zipcode' => $val->getZipcode(), 'emailid' => $val->getEmailid(), 'latitude' => $latitude, 'longitude' => $longitude, 'latlong' => $latlong, 'storeHours' => $storeTime, 'description' => $val->getDescription(),'location_image' => $val->getLocationImage());
                    $warehouse_data_array[] = array('id' => $val->getId(), 'name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'contact' => $val->getContact(), 'zipcode' => $val->getZipcode(), 'emailid' => $val->getEmailid(), 'latitude' => $latitude, 'longitude' => $longitude, 'latlong' => $latlong, 'storeHours' => $storeTime, 'description' => $val->getDescription());
                }
                $address_data = json_encode($address_data1);
            }
        }
        
        if (!empty($multiple_location) && $multiple_location == 'Yes') {
            $page_template_name = '_contactlocation.html.twig';
        } else {
            $page_template_name = '_contactus.html.twig';
        }
        $show_portion = 'contact';
        if ($show_portion == 'contact') {
            if (!empty($multiple_location) && $multiple_location == 'Yes') {
                $page_template_name = '_contactlocation.html.twig';
            } else {
                $page_template_name = '_contactustemplate.html.twig';
            }
        }
        $Template = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->container->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }

        $socialLinkArray = $this->getDoctrine()->getRepository('SystemBundle:SocialAccountSetting')->findBy(array('status' => 1, 'isDeleted' => 0), array('sortOrder' => 'ASC', 'mediaName' => 'ASC'));

        $googlelocation_key = $webmasterSetting['google_apikey'];
        $StateName          = $this->getStateNameById($SiteSetting['state'], $langCode);
        $CityName           = $this->getCityNameById($SiteSetting['city'], $langCode);

        $hdn_store_address = "<h3>" . $SiteSetting['mainName'] . "</h3>" . $SiteSetting['address'] . ", <br/>" . $CityName . ", " . $StateName . " - " . $SiteSetting['zipcode'];

        return $this->render($Template, array(
            'SiteSetting'        => $SiteSetting,
            'form'               => $form->createView(),
            'captcha_site_key'   => $captcha_site_key,
            'captcha_version'    => $captcha_version,
            'storeHours'         => $storeTime,
            'show_portion'       => $show_portion,
            'socialLinkData'     => $socialLinkArray,
            'googlelocation_key' => $googlelocation_key,
            'GeneralService'     => $GeneralService,
            'multiple_location'  => $multiple_location,
            'address_data'       => $address_data,
            'StateName'          => $StateName,
            'CityName'           => $CityName,
            'hdn_store_address'  => $hdn_store_address,
            'SiteData'  => $SiteData,
            'ContactusText' => $storeContactusText
        ));
    }

    public function storeLocationTemplateHtmlAction($show_portion = '')
    {
        $em                 = $this->getDoctrine()->getManager();
        $page_template_name = '_location.html.twig';
        
        $page_template_name     = '_location.html.twig';
        $GeneralService         = $this->get(GeneralService::class);
        $SiteSetting            = $GeneralService->getStoreMainConfig();
        $LayoutSetting          = $GeneralService->getStoreLayoutConfig();
        $themename              = $LayoutSetting['themename'];
        $allotherSetting        = json_decode($SiteSetting['allotherSetting'], true);
        $warehouse_data         = $em->getRepository('SystemBundle:Warehouse')->findBy(array('status' => 1, 'isDeleted' => 0, 'lang' => $this->get('session')->get('front_lang_id')), array('sortOrder' => 'ASC'));
        
        $warehouse_data_address = array();
        if (!empty($warehouse_data)) {
            foreach ($warehouse_data as $val) {
                (!empty($val->getStoreHours())) ? $StoreHoursSetting = json_decode($val->getStoreHours()) : $StoreHoursSetting = "";
                $storeTime = '';
                if (!empty($StoreHoursSetting)) {
                    $storeHours = $StoreHoursSetting;
                    $storeTime  = '<table style="width:100%" class="table table-bordered"><tr><th class="">Days</th><th class="">Open Hours</th><th class="">Close Hours</th></tr>';
                    //Changes done on 04.08.2023 to display the closed days on front location page
                    $weekdays = array("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
                   
                    if (!empty($storeHours)) {
                        for ($i = 0; $i < count($weekdays); $i++) {
                            
                            if (in_array($weekdays[$i], $storeHours->openday)) {
                                $openday      = $weekdays[$i];
                                $openhours    = $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                                $closinghours = $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday); 
                            } else {
                                $dayname=$weekdays[$i];
                                if (array_key_exists($weekdays[$i],$storeHours->hrsnote) && trim($storeHours->hrsnote->$dayname)!=''){                                        
                                    $openday      = $weekdays[$i];
                                    $openhours    = $storeHours->hrsnote->$dayname;
                                    $closinghours = '';
                                    $to           = '';
                                }else{
                                    $openday      = $weekdays[$i];
                                    $openhours    = 'Closed';
                                    $closinghours = '';                                    
                                }
                            }                            
                            $openday = strtolower($openday);
                                //$openday = $storeHours->openday[$i];
                                if($closinghours == ''){
                                    $storeTime .= '<tr><td>' . $this->get('translator')->trans($openday) . '</td><td colspan="5">';
                                    $storeTime .= $openhours;
                                    $storeTime .= '</td></tr>';
                                }else{
                                    $storeTime .= '<tr><td>' . $this->get('translator')->trans($openday) . '</td><td>';
                                    $storeTime .= $openhours;
                                    $storeTime .= '</td>' . $to . '<td>';
                                    $storeTime .= $closinghours;
                                    $storeTime .= '</td></tr>';
                                }                           
                        }
                    }
                    //End
                    $storeTime .= "</table>";
                }
 
                $country_name = '';
                if (!empty($val->getCountryId())) {
                    $country_name = $this->getCountryNameById($val->getCountryId());
                }
                $latitude_val  = '';
                $longitude_val = '';
                $latitude      = $val->getLatitude();
                $longitude     = $val->getLongitude();
                $latlong       = $latitude . ',' . $longitude;
                $state_name    = '';
                if (is_numeric($val->getState())) {
                    $state_name = $this->getStateNameById($val->getState());
                } else {
                    $state_name = $val->getState();
                }
                $city_name = '';
                if (is_numeric($val->getCity())) {
                    $city_name = $this->getCityNameById($val->getCity());
                } else {
                    $city_name = $val->getCity();
                }
                $warehouse_data_address[] = array('name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'country_name' => $country_name, 'contact' => $val->getContact(), 'emailid' => $val->getEmailid(), 'zipcode' => $val->getZipcode(), 'contact_name' => $val->getContactName(), 'storeHours' => $storeTime, 'latitude' => $latitude, 'longitude' => $longitude, 'latlong' => $latlong, 'location_image' => $val->getLocationImage(), 'description' => $val->getDescription());
                $address_data1[]          = array('name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'country_name' => $country_name, 'contact' => $val->getContact(), 'emailid' => $val->getEmailid(), 'zipcode' => $val->getZipcode(), 'contact_name' => $val->getContactName(), 'latitude' => $latitude, 'longitude' => $longitude, 'latlong' => $latlong);
            }
            $address_data = json_encode($address_data1);
        }

        $webmasterSetting   = json_decode($SiteSetting['webmasterSetting'], true);
        $googlelocation_key = $webmasterSetting['google_apikey'];
        $Template           = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        //echo $Template;exit;
        return $this->render($Template, array(
            'show_portion'       => $show_portion,
            'warehouse_data'     => $warehouse_data_address,
            'address_data'       => $address_data,
            'googlelocation_key' => $googlelocation_key,
            'GeneralService'     => $GeneralService,
        ));
    }

    public function findastoreTemplateHtmlAction(Request $request)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];
        $allotherSetting          = json_decode($SiteSetting['allotherSetting'], true);
        $LayoutSettingCMSTemplate = $LayoutSetting['theme_setting']->page_option->cms_page;
        $LocationTaxData          = $googlelocation_key          = '';
        $session                  = new Session();
        //Registration for Customer
        $datetime = new \DateTime('now'); // For Customer Table
        //Get Session Cart Value with Count
        $langCode               = $this->getFrontLanguage($SiteSetting);
        $wishlist_counter       = $GeneralService->getWishlistCounter();
        $UserGreetings          = $this->getUserGreetings();
        $warehouse_data         = $em->getRepository('SystemBundle:Warehouse')->findBy(array('status' => 1, 'isDeleted' => 0, 'lang' => $this->get('session')->get('front_lang_id')), array('sortOrder' => 'ASC'));
        $warehouse_data_address = array();
        if (!empty($warehouse_data)) {
            foreach ($warehouse_data as $val) {
                (!empty($val->getStoreHours())) ? $StoreHoursSetting = json_decode($val->getStoreHours()) : $StoreHoursSetting = "";
                $storeTime = '';
                if (!empty($StoreHoursSetting)) {
                    $storeHours = $StoreHoursSetting;
                    $storeTime  = '<table style="border:0px; width:100%;"><tr><th class="">' . $this->get('translator')->trans('front_store_show_hours_days') . '</th><th class="">' . $this->get('translator')->trans('front_store_show_hours_open') . '</th><th class="">' . $this->get('translator')->trans('front_store_show_hours_closed') . '</th></tr>';
                    if (!empty($storeHours)) {
                        for ($i = 0; $i < count($storeHours->openday); $i++) {
                            $openday = $storeHours->openday[$i];
                            $storeTime .= '<tr><td>' . $openday . '</td><td>';
                            $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                            $storeTime .= '</td><td>';
                            $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday);
                            $storeTime .= '</td>';
                        }
                    }
                    $storeTime .= "</table>";
                }
                $country_name = '';
                if (!empty($val->getCountryId())) {
                    $country_name = $this->getCountryNameById($val->getCountryId(), $langCode);
                }
                $latitude   = $val->getLatitude();
                $longitude  = $val->getLongitude();
                $state_name = '';
                if ($val->getState()) {
                    $state_name = $this->getStateNameById($val->getState(), $langCode);
                }
                $city_name = '';
                if ($val->getCity()) {
                    $city_name = $this->getCityNameById($val->getCity(), $langCode);
                }
                $warehouse_data_address[] = array('name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'country_name' => $country_name, 'contact' => $val->getContact(), 'emailid' => $val->getEmailid(), 'zipcode' => $val->getZipcode(), 'contact_name' => $val->getContactName(), 'storeHours' => $storeTime, 'latitude' => $longitude, 'longitude' => $longitude);
            }
        }
        //country sates and city
        $country_html = '';
        $state_html   = '';
        $city_html    = '';
        $where_state  = 'AND iso_code = "US"'; // country Id for USA its Manufacturer client has told for this
        $countryId    = $this->getCountry($where_state, $langCode)[0]['id'];
        $stateData    = $this->getState($countryId, $langCode);
        $state_html   = $stateId   = $cityName   = $zipCode   = $selected   = '';
        /* This Code is Worked for Making Two different Pages Data Start */
        if (strpos($_SERVER['REQUEST_URI'], "find-a-retailer") !== false && strpos($_SERVER['REQUEST_URI'], "zipcode") !== false) {
            $CheckoutService = $session->get('CheckoutService');
            $stateId         = $CheckoutService->getShipState();
            $cityName        = $this->getCityNameById($CheckoutService->getShipCity());
            $zipCode         = $CheckoutService->getShipZip();
            $selected        = ' selected = "selected"';
        }
        /* This Code is Worked for Making Two different Pages Data End */
        foreach ($stateData as $sts) {
            $stateSelected = '';
            if (!empty($sts['name'])) {
                if ($sts['id'] == $stateId) {
                    $stateSelected = ' selected = "selected"';
                }
            }

            $state_html .= '<option data_stateCode="' . $sts['id'] . '" value="' . $sts['iso_code'] . '"' . $stateSelected . '>' . $sts['name'] . '</option>';
        }
        $radius_html = '';
        foreach ($this->radius_data as $k => $radius) {
            $radiusSelected = '';
            if ($radius == 25) {
                $radiusSelected = $selected;
            }
            $radius_html .= '<option value="' . $radius . '"' . $radiusSelected . ' >' . $radius . '</option>';
        }
        $default_country    = "US";
        $show_portion       = $request->attributes->get('portion');
        $page_template_name = 'findastore.html.twig';

        $webmasterSetting                            = json_decode($SiteSetting['webmasterSetting'], true);
        $googlelocation_key                          = $webmasterSetting['google_apikey'];
        $breadcrumb_parent_title                     = '';
        $PageTitleSetting['show_breadcrumb']         = $LayoutSettingCMSTemplate->header_style->cms_show_breadcrumb;
        $PageTitleSetting['breadcrumb_title']        = $this->get('translator')->trans('front_store_location_findstore_text');
        $PageTitleSetting['breadcrumb_parent_title'] = $breadcrumb_parent_title;
        $PageTitleSetting['show_page_title']         = $LayoutSettingCMSTemplate->header_style->cms_show_header_title;
        $PageTitleSetting['page_title']              = $this->get('translator')->trans('front_store_location_findstore_text');
        $PageTitleSetting['page_title_style']        = $LayoutSettingCMSTemplate->header_style->cms_title_style;
        $PageTitleSetting['page_title_bgoption']     = $LayoutSettingCMSTemplate->header_style->cms_title_background_option;
        $PageTitleSetting['page_title_bgcolor']      = $LayoutSettingCMSTemplate->header_style->cms_title_background_color;
        $PageTitleSetting['page_title_bgimage']      = $LayoutSettingCMSTemplate->header_style->cms_title_background_image;

        $Template = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        return $this->render($Template, array(
            'SiteSetting'        => $SiteSetting,
            'LayoutSetting'      => $LayoutSetting,
            'wishlist_counter'   => $wishlist_counter,
            'show_portion'       => $show_portion,
            'warehouse_data'     => $warehouse_data_address,
            'googlelocation_key' => $googlelocation_key,
            'state_html'         => $state_html,
            'radius_html'        => $radius_html,
            'default_country'    => $default_country,
            'cityName'           => $cityName,
            'zipCode'            => $zipCode,
            'PageTitleSetting'   => $PageTitleSetting,
        ));
    }

    public function findadealerTemplateHtmlAction(Request $request)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];

        $session                = new Session();
        $datetime               = new \DateTime('now'); // For Customer Table
        $CntCartItem            = 0;
        $wishlist_counter       = $GeneralService->getWishlistCounter();
        $UserGreetings          = $this->getUserGreetings();
        $langCode               = $this->getFrontLanguage($SiteSetting);
        $allotherSetting        = json_decode($SiteSetting['allotherSetting'], true);
        $warehouse_data         = $em->getRepository('SystemBundle:Storeretailor')->findBy(array('status' => 1, 'isDeleted' => 0, 'lang' => $this->get('session')->get('front_lang_id')));
        $warehouse_data_address = array();
        if (!empty($warehouse_data)) {
            foreach ($warehouse_data as $val) {
                (!empty($val->getStoreHours())) ? $StoreHoursSetting = json_decode($val->getStoreHours()) : $StoreHoursSetting = "";
                $storeTime                                           = '';
                if (!empty($StoreHoursSetting)) {
                    $storeHours = $StoreHoursSetting;
                    $storeTime  = '<table style="border:0px; width:100%;"><tr><th class="">' . $this->get('translator')->trans('front_store_show_hours_days') . '</th><th class="">' . $this->get('translator')->trans('front_store_show_hours_open') . '</th><th class="">' . $this->get('translator')->trans('front_store_show_hours_closed') . '</th></tr>';
                    if (!empty($storeHours)) {
                        for ($i = 0; $i < count($storeHours->openday); $i++) {
                            $openday = $storeHours->openday[$i];
                            $storeTime .= '<tr><td>' . $openday . '</td><td>';
                            $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                            $storeTime .= '</td><td>';
                            $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday);
                            $storeTime .= '</td>';
                        }
                    }
                    $storeTime .= "</table>";
                }
                $country_name = '';
                if (!empty($val->getCountryId())) {
                    $country_name = $this->getCountryNameById($val->getCountryId(), $langCode);
                }
                $latitude   = $val->getLatitude();
                $longitude  = $val->getLongitude();
                $state_name = '';
                if ($val->getState()) {
                    $state_name = $this->getStateNameById($val->getState(), $langCode);
                }
                $city_name = '';
                if ($val->getCity()) {
                    $city_name = $this->getCityNameById($val->getCity(), $langCode);
                }
                $warehouse_data_address[] = array('name' => $val->getName(), 'address' => $val->getAddress(), 'city' => $city_name, 'state' => $state_name, 'country_name' => $country_name, 'contact' => $val->getContact(), 'emailid' => $val->getEmailid(), 'zipcode' => $val->getZipcode(), 'contact_name' => $val->getContactName(), 'storeHours' => $storeTime, 'latitude' => $longitude, 'longitude' => $longitude);
            }
        }
        //country sates and city
        $country_html = '';
        $state_html   = '';
        $city_html    = '';
        $where_state  = 'AND iso_code = "US"'; // country Id for USA its Manufacturer client has told for this
        $countryId    = $this->getCountry($where_state, $langCode)[0]['id'];
        $stateData    = $this->getState($countryId, $langCode);
        $state_html   = $stateId   = $cityName   = $zipCode   = $selected   = '';

        /* This Code is Worked for Making Two different Pages Data Start */
        if (strpos($_SERVER['REQUEST_URI'], "dealer") !== false && strpos($_SERVER['REQUEST_URI'], "zipcode") !== false) {
            $CheckoutService = $session->get('CheckoutService');
            $stateId         = $CheckoutService->getShipState();
            $cityName        = $this->getCityNameById($CheckoutService->getShipCity());
            $zipCode         = $CheckoutService->getShipZip();
            $selected        = ' selected = "selected"';
        }
        /* This Code is Worked for Making Two different Pages Data End */
        foreach ($stateData as $sts) {
            $stateSelected = '';
            if (!empty($sts['name'])) {
                if ($sts['id'] == $stateId) {
                    $stateSelected = ' selected = "selected"';
                }
            }

            $stateLanguage = json_decode($sts['langCode']);
            $stateName     = $this->getLocationListLang($langCode, $stateLanguage, $sts['name']);
            $state_html .= '<option data_stateCode="' . $sts['id'] . '" value="' . $sts['iso_code'] . '"' . $stateSelected . '>' . $stateName . '</option>';
        }
        $radius_html = '';
        foreach ($this->radius_data as $k => $radius) {
            $radiusSelected = '';
            if ($radius == 25) {
                $radiusSelected = $selected;
            }
            $radius_html .= '<option value="' . $radius . '"' . $radiusSelected . ' >' . $radius . '</option>';
        }
        $default_country    = "US";
        $show_portion       = $request->attributes->get('portion');
        $page_template_name = 'dealer.html.twig';
        $webmasterSetting   = json_decode($SiteSetting['webmasterSetting'], true);
        $googlelocation_key = $webmasterSetting['google_apikey'];
        $Template           = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        //echo $Template;exit;
        return $this->render($Template, array(
            'SiteSetting'        => $SiteSetting,
            'LayoutSetting'      => $LayoutSetting,
            'wishlist_counter'   => $wishlist_counter,
            'show_portion'       => $show_portion,
            'warehouse_data'     => $warehouse_data_address,
            'googlelocation_key' => $googlelocation_key,
            'state_html'         => $state_html,
            'radius_html'        => $radius_html,
            'default_country'    => $default_country,
            'cityName'           => $cityName,
            'zipCode'            => $zipCode,
        ));
    }

    public function productsafetyTemplateHtmlAction(Request $request)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];

        $datetime = new \DateTime('now'); // For Customer Table
        //Get Session Cart Value with Count
        $wishlist_counter = $GeneralService->getWishlistCounter();
        $UserGreetings    = $this->getUserGreetings();
        //create contactUs Form
        $logModuleId = $this->getModuleIdbySlug('productsafety');
        if (empty($logModuleId)) {
            $this->addFlash('error', $this->get('translator')->trans('front_permission_error_message'));
            return $this->redirectToRoute('front_login');
        }
        $langCode    = $this->getFrontLanguage($SiteSetting);
        $countryId   = '';
        $countryData = $this->getCountry('AND id IN (21,4)', $langCode);
        $CountryHtml = '';
        foreach ($countryData as $ctr) {
            $CountryHtml .= '<option value="' . $ctr['id'] . '" >' . $ctr['name'] . '</option>';
        }
        $form = $this->createFormBuilder()
            ->add('personName', TextType::class, array('required' => true))
            ->add('personPhone', TextType::class, array('required' => true))
            ->add('personEmail', TextType::class, array('required' => true))
            ->add('address1', TextType::class, array('required' => true))
            ->add('address2', TextType::class, array('required' => false))
            //->add('address3', TextType::class, array('required' => false))
            ->add('cityId', TextType::class, array('required' => true))
            ->add('zipcode', TextType::class, array('required' => true))
            ->add('cedarSerialNumber', TextType::class, array('required' => true))
        //->add('submit', SubmitType::class, array())
            ->getForm();
        $webmasterSetting = json_decode($SiteSetting['webmasterSetting']);
        $captcha_secret_key = $webmasterSetting->google_captcha_secretkey;
        $captcha_site_key   = $webmasterSetting->google_captcha_publickkey;
        $captcha_version    = property_exists($webmasterSetting,"google_captcha_version") ? $webmasterSetting->google_captcha_version : 2 ;

        $page_template_name = 'productsafetytemplate.html.twig';

        $Template = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        return $this->render($Template, array(
            'form'               => $form->createView(),
            'captcha_site_key'   => $captcha_site_key,
            'captcha_version'    => $captcha_version,
            'captcha_secret_key' => $captcha_secret_key,
            'GeneralService'     => $GeneralService,
            'CountryHtml'        => $CountryHtml,
        ));
    }

    public function contactmaplessTemplateHtmlAction(Request $request)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $MyFrontService    = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];
        $allotherSetting = json_decode($SiteSetting['allotherSetting'], true);
        $datetime = new \DateTime('now'); // For Customer Table
        $langData = $GeneralService->getFrontLangauageSession($SiteSetting);
        $defLangId = "";
        $frontLangId = "";
        $webmasterSetting   = json_decode($SiteSetting['webmasterSetting']);
        if(!empty($langData)){
            $frontLangId = $langData['LangId'];
        }
        if(!empty($SiteSetting)){
            $defLangId = $SiteSetting['langId'];    
        }
        $langCode = $this->getFrontLanguage($SiteSetting);
        //$where_state = 'AND iso_code = "US"'; // country Id for USA its Manufacturer client has told for this
        //$countryId = $this->getCountry($where_state, $langCode)[0]['id'];
        $countryId   = '';
        $countryData = $this->getCountry('', $langCode);
        $CountryHtml = '';
        foreach ($countryData as $ctr) {
            // $counryLanguage = json_decode($ctr['langCode']);
            // $countryName = $this->getLocationListLang($langCode, $counryLanguage, $ctr['name']);
            $CountryHtml .= '<option value="' . $ctr['id'] . '" >' . $ctr['name'] . '</option>';
        }
        $stateData = $this->getState($countryId, $langCode);
        $StateHtml = '';
        foreach ($stateData as $sts) {
            $stateLanguage = json_decode($sts['langCode']);
            $stateName     = $this->getLocationListLang($langCode, $stateLanguage, $sts['name']);
            $StateHtml    .= '<option value="' . $sts['id'] . '" >' . $stateName . '</option>';
        }
        $StoreData     = array();
        $StoreData     = $this->getFieldData($table_name = "warehouse", $field = "name,id,state,city,zipcode", $condition = "is_deleted='0' AND status=1 AND country_id=21 ORDER BY sort_order ASC");
        //$QuestionData  = $this->getQuestionsListByLang($frontLangId, $defLangId);
        $store_html = '';
        if (!empty($StoreData)) {
            foreach ($StoreData as $key => $value) {
                $store_name      = $value['name'];
                $store_id        = $value['id'];
                $state_condition = "id = " . $value['state'] . " AND is_deleted='0' AND status=1";
                $state_data      = $this->getFieldData($table_name = "state", $field = "state_name,id", $state_condition);
                $state_name      = '';
                if (!empty($state_data)) {
                    $state_name = $state_data[0]['state_name'];
                }
                /*$city_condition = "id = " . $value['city'] . " AND is_deleted='0' AND status=1";
                $city_data      = $this->getFieldData($table_name = "cities", $field = "city_name,id", $city_condition);
                $city_name      = '';
                if (!empty($city_data)) {
                    $city_name = $city_data[0]['city_name'];
                }*/
                $city_name = $value['city'];
                $zipcode         = $value['zipcode'];
                $store_full_name = $store_name . " ( " . $city_name . ", " . $state_name . " $zipcode )";
                $store_html     .= '<option value="' . $store_id . '"">' . $store_full_name . '</option>';
            }
        }
        //Get Session Cart Value with Count
        $cartProd         = array();
        $CntCartItem      = 0;
        $wishlist_counter = $GeneralService->getWishlistCounter();
        $UserGreetings    = $this->getUserGreetings();
        $this->get('translator')->setLocale($langCode);
        $source_data = array(
            $this->get('translator')->trans('front_contact_question')   => '',
            $this->get('translator')->trans('front_contact_question_1') => 1,
            $this->get('translator')->trans('front_contact_question_2') => 2,
            $this->get('translator')->trans('front_contact_question_3') => 3,
            $this->get('translator')->trans('front_contact_question_4') => 4,
            $this->get('translator')->trans('front_contact_question_5') => 5,
            $this->get('translator')->trans('front_contact_question_6') => 6,
        );
        //echo "<pre>";print_r($source_data);exit;
        //create contactUs Form
        $form = $this->createFormBuilder()
            ->add('source', ChoiceType::class, array('choices' => $source_data, 'required' => true))
            ->add('personName', TextType::class, array('required' => true))
            ->add('personLastName', TextType::class, array('required' => false))
            ->add('personPhone', TextType::class, array('required' => true))
            ->add('personEmail', TextType::class, array('required' => true))
            ->add('address', TextType::class, array('required' => true))
            ->add('city', TextType::class, array('required' => true))
            ->add('zipcode', TextType::class, array('required' => true))
            ->add('contactComments', TextareaType::class, array('required' => true))
            ->add('submit', SubmitType::class, array())
            ->getForm();

        $captcha_site_key   = $webmasterSetting->google_captcha_publickkey;
        $captcha_version    = property_exists($webmasterSetting,"google_captcha_version") ? $webmasterSetting->google_captcha_version : 2 ;
        $captcha_secret_key = $webmasterSetting->google_captcha_secretkey;
        $storeHours         = json_decode($SiteSetting['storeHours']);
        $storeTime          = '<table style="border:0px; width:100%;"><tr><th class="text-right">Days</th><th class="text-right">Open Hours</th><th class="text-right">Close Hours</th></tr>';
        if (!empty($storeHours)) {
            for ($i = 0; $i < count($storeHours->openday); $i++) {
                $openday = $storeHours->openday[$i];
                $storeTime .= '<tr><td>' . $openday . '</td><td>';
                $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->openhours->$openday);
                $storeTime .= '</td><td>';
                $storeTime .= $this->showMilitaryTimeFormat($allotherSetting, $storeHours->closehours->$openday);
                $storeTime .= '</td>';
            }
        }
        $storeTime .= "</table>";
        $show_portion       = $request->attributes->get('portion');
        $page_template_name = 'contactusmaplesstemplate.html.twig';
        $webmasterSetting   = json_decode($SiteSetting['webmasterSetting'], true);
        $googlelocation_key = $webmasterSetting['google_apikey'];

        $Template = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        return $this->render($Template, array(
            'SiteSetting'        => $SiteSetting,
            'LayoutSetting'      => $LayoutSetting,
            'wishlist_counter'   => $wishlist_counter,
            'webmasterSetting'   => $webmasterSetting,
            'form'               => $form->createView(),
            'captcha_site_key'   => $captcha_site_key,
            'captcha_version'    => $captcha_version,
            'storeHours'         => $storeTime,
            'show_portion'       => $show_portion,
            'googlelocation_key' => $googlelocation_key,
            'source_data'        => $source_data,
            'StateHtml'          => $StateHtml,
            'countryId'          => $countryId,
            'store_html'         => $store_html,
            'CountryHtml'        => $CountryHtml,
            'SiteData'           => $SiteData,
        ));
    }

    public function employmentApplicationTemplateHtmlAction(Request $request)
    {
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $webmasterSetting   = json_decode($SiteSetting['webmasterSetting']);
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];

        $datetime = new \DateTime('now'); // For Customer Table
        $langData = $GeneralService->getFrontLangauageSession($SiteSetting);
        $langCode = $this->getFrontLanguage($SiteSetting);

        $stateData = $this->getState(21, $langCode);
        $StateHtml = '';
        foreach ($stateData as $st) {
            //$stateLanguage = json_decode($ctr['langCode']);
            //$stateName = $this->getLocationListLang($langCode, $stateLanguage, $st['name']);
            $StateHtml .= '<option value="' . $st['id'] . '" >' . $st['name'] . '</option>';
        }
        $form = $this->createFormBuilder()
            ->add('firstName', TextType::class, array('required' => true))
            ->add('lastName', TextType::class, array('required' => true))
            ->add('address1', TextType::class, array('required' => true))
            ->add('address2', TextType::class, array('required' => false))
            ->add('city', TextType::class, array('required' => true))
            ->add('zipcode', TextType::class, array('required' => true))
            ->add('phoneNumber', TextType::class, array('required' => true))
            ->add('emailAddress', TextType::class, array('required' => false))
            ->add('resumeFile', FileType::class, array('required' => false))
            ->getForm();
        $captcha_secret_key = $webmasterSetting->google_captcha_secretkey;
        $captcha_site_key   = $webmasterSetting->google_captcha_publickkey;
        $captcha_version    = property_exists($webmasterSetting,"google_captcha_version") ? $webmasterSetting->google_captcha_version : 2 ;
        $page_template_name = 'employmenttemplate.html.twig';
        $lang_data          = $this->getDoctrine()->getRepository('LocalizationBundle:Language')->findBy(array('isDeleted' => 0, 'status' => 1));
        $Template           = 'ContentcmsBundle:' . $themename . ':' . $page_template_name;
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'ContentcmsBundle:default:' . $page_template_name;
        }
        return $this->render($Template, array(
            'form'               => $form->createView(),
            'captcha_site_key'   => $captcha_site_key,
            'captcha_version'    => $captcha_version,
            'captcha_secret_key' => $captcha_secret_key,
            'GeneralService'     => $GeneralService,
            'StateHtml'          => $StateHtml,
            'lang_data'          => $lang_data,
            'front_lang_id'      => $this->get('session')->get('front_lang_id'),
        ));
    }

    public function getCategoryFilterData($categoryId = 0, $lang_id = 1, $category_data = '', $productCommaValue = '', $brandId = '', $is_search_page=0) {
        $commaseparated_category_id = '';
        $data = array();        
        if (!is_array($category_data)) {
            $category_data = array();
        }
        $searchKeyword = "";
        $current_date = date('Y-m-d');
        // Category lang related changes start--
        $GeneralService = $this->get(GeneralService::class);
        $defaultLangRefId = $GeneralService->getDefaultLangRefId();
        if ($this->get('session')->get('front_lang_ref_id')) {
            $defaultLangRefId = $this->get('session')->get('front_lang_ref_id');
        }
        $productCommaValue = rtrim($productCommaValue,",");
        // Category lang related changes end--
        //$data = $this->getDoctrine()->getRepository('CatalogueBundle:Category')->findBy(array('lang' => $lang_id, 'isDeleted' => 0, 'status' => 1, 'parentId' => $categoryId), array('sortOrder' => 'ASC'));
        $sql = "SELECT DISTINCT pc.category_id, cl.name, c.slug, c.media, cl.description, c.sort_order FROM 
                product_category pc 
                JOIN category c on c.id = pc.category_id 
                JOIN category_lang cl ON cl.cat_ref_id = c.ctb_ref_id  
                JOIN product p on p.id=pc.product_id 
                JOIN product_lang pl ON pl.product_ref_id = p.ctb_ref_id  
                WHERE 
                c.parent_id = 0 AND cl.lang_ref_id = '" . $defaultLangRefId . "' 
                AND p.status='1' AND pl.lang_ref_id = '" . $defaultLangRefId . "'  AND p.is_deleted='0' AND p.base_price > 0 AND (future_avalibility_date <= '".$current_date."' OR future_avalibility_date is null) ";
        if (!empty($productCommaValue)) {
            $sql.="and pc.product_id IN (".$productCommaValue.") ";
        }
        $sql.="ORDER BY c.sort_order ASC, cl.name ASC";

        if($is_search_page == 1){
            $request = Request::createFromGlobals();
            $searchKeyword = $request->get('q');       
        }
        
        $statement = $this->getDoctrine()->getManager()->getConnection()->prepare($sql);
        $statement->execute();
        $data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);       
        if (!empty($data)) {
            foreach ($data as $key => $value) {
                if($is_search_page == 0 && !empty($categoryId)){
                    $ProtCount = $this->getTotalCategoryProductCountIncludingThatCategory(array($value['category_id'],$categoryId),'', $productCommaValue);
                }else{
                    $ProtCount = $this->getTotalCategoryProductCountIncludingThatCategory(array($value['category_id']), $searchKeyword, $productCommaValue);
                }
                if (!empty($ProtCount)) {
                    $category_data[] = array('id' => $value['category_id'], 'name' => $value['name'], 'slug' => $value['slug'], 'media' => $value['media'], 'description' => $value['description'], 'ProductCount' => $ProtCount);
                }
            }
        }
        return $category_data;
    }
    
    public function getTotalCategoryProductCountIncludingThatCategory($categoryIds = array(), $searchKeyword = '', $productCommaValue) {
        $count = 0;
        if (count($categoryIds)) {
            $current_date = date('Y-m-d');
            $em = $this->getDoctrine()->getManager();
            $condition = '';
            if (!empty($searchKeyword)) {
                //$condition = " AND (p.name LIKE '%" . trim($searchKeyword) . "%' OR p.sku LIKE '%" . $searchKeyword . "%'  OR p.product_tags LIKE '%" . trim($searchKeyword) . "%')";
            }
            $condition = " ";
            if(!empty($productCommaValue)){
                $condition = " AND pc.product_id IN (" . $productCommaValue . ")";
            }

            $sql = "select count(a.id) as ctn 
                from (SELECT p.id,count(p.id) as ctn from product p
                        INNER JOIN  product_category pc ON p.id=pc.product_id 
                        JOIN product_lang pl ON pl.product_ref_id = p.ctb_ref_id  
                        WHERE pc.category_id IN (" . implode(',', $categoryIds) . ") AND p.status='1' AND p.is_deleted='0' AND p.base_price > 0 AND (future_avalibility_date <= '" . $current_date . "' OR future_avalibility_date is null) " . $condition . " GROUP BY p.id having ctn = " . count($categoryIds) . ") a";  
            
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result)) {
                $count = $result[0]['ctn'];
            }
        }
        return $count;
    }

    public function showMilitaryTimeFormat($AllOtherSettings, $storeTime){
        if(!empty($AllOtherSettings) && !empty($AllOtherSettings['show_time_format'])){
            if($AllOtherSettings['show_time_format'] == '12Hrs'){
                $storeTime = date('h:i A', strtotime($storeTime));    
            }
        }else{
            $storeTime = date('h:i A', strtotime($storeTime));
        }
        return $storeTime;
    }
    /**
     * @Route("getfilterdata", name="getfilterdata")
     */ 
    public function getFilterData(Request $request){
        // $GeneralFunction = new GeneralFunctionController;
        // $GeneralService  = $this->get(GeneralService::class);
        // $LayoutSetting = $GeneralService->getStoreLayoutConfig();
        // $SiteSetting = $GeneralService->getStoreMainConfig();

        $memcached = new \Memcached();
        $memcached->addServer($this->Server, 11211);
        
        $memcached_key = $this->container->getParameter('database_name');
        //$memcached->flush(0);
        $time = $this->cachingtime;


        $MyFrontService  = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $device_type = $SiteData['commonVariable']['DeviceType'];

        $category_id = ($request->request->get('category_id') != 'undefined') ? $request->request->get('category_id') : '0';
        $ecircular_id = $request->request->get('ecircular_id');
        $promotion_id = $request->request->get('promotion_id');
        $search = ($request->request->get('search_keyword') !='undefined') ? $request->request->get('search_keyword') :'';
        $category_comma_value = ($request->request->get('category_comma_value') != 'undefined') ? $request->request->get('category_comma_value') : '0';
        $productCommaValue = ($request->request->get('product_comma_value') != 'undefined') ? $request->request->get('product_comma_value') : '0';
        $brand_id = $request->request->get('brand_id');
        
        $em = $this->getDoctrine()->getManager();
        if ($memcached->get($memcached_key.'_widget_area_ids')){
             $widget_area_ids = $memcached->get($memcached_key.'_widget_area_ids');
         }else{
            $where_condition = ' ws.status=1 AND ws.is_deleted=0 AND ws.widget_area_id IN (3,4,31) AND widget_type_id IN (8)';
            $sql = "SELECT GROUP_CONCAT(ws.widget_area_id) as widget_area_ids FROM widget_setting ws  WHERE $where_condition ORDER BY ws.widget_area_id,ws.sort_order ASC ";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $widget_area_ids = $result[0]['widget_area_ids'];
            $memcached->set($memcached_key.'_widget_area_ids',$widget_area_ids,$time);
        }
        
        $return_array = array();
        $return_array['sidebarfilter'] = '';
        $return_array['productdata'] = array();
        $return_array['topPagination'] = '';
        $return_array['footerPagination'] = '';
        $showfilter['left'] = 'N';
        $showfilter['right'] = 'N';
        $showfilter['top'] = 'N';
        $themename = $SiteData['themename'];
        $category_show_style = 0;
        $category_show_product = $SiteData['category_listbox_style']['category_show_product'];

        if($category_id != 'undefined') {
            $sql = "SELECT show_style FROM category WHERE id = ?";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute(array($category_id));
            $categoryshow_style = $statement->fetch();
            if(!empty($categoryshow_style)){
                $category_show_style = $categoryshow_style['show_style'];
            }
            $productData['paginationData'] = $productData['filterData'] = array();
            if ($category_show_style != 1 && $category_show_product == 'Yes') {
                $productFilterParam = array('categoryId' => $category_id, 'commaSeparatedCategoryId' => $category_comma_value, 'searchKeyword' => $search, 'promotionId' => $promotion_id, 'ecircularId' => $ecircular_id, 'productCommaValue' => $productCommaValue, 'brandId' => $brand_id);
                $productData = $this->getProductData($productFilterParam);
            }
        }
        $topfilterhtml = '';
        if(!empty($widget_area_ids)){
            if(in_array(3, explode(',',$widget_area_ids))){
                $showfilter['left'] = 'Y';
            }
            if(in_array(4, explode(',',$widget_area_ids))){
                $showfilter['right'] = 'Y';
            }
            if(in_array(31, explode(',',$widget_area_ids))){
                $showfilter['top'] = 'Y';
            }
            $sidebar_parent_class = 'left';
            if($device_type == 'computer'){
                // if($SiteData['category_layout_style'] == 3 && !in_array(3, explode(',',$widget_area_ids)) && in_array(4, explode(',',$widget_area_ids))){
                //     $sidebar_parent_class = 'right';
                // }
                if($SiteData['category_layout_style'] == 3 && in_array(4, explode(',',$widget_area_ids))){
                    $sidebar_parent_class = 'right';
                }
            }else{
                $sidebar_parent_class = 'mobile';
            }
            if((!empty($category_id) && $category_id != 'undefined') || !empty($search)){
                // $productCommaValue = $this->getProductConcatList($category_id);
                // $filterData = $this->getMainFilterdata($category_id, $productCommaValue);

                $filterData = $productData['filterData'];
                $filterTemplate = 'CatalogueBundle:' . $themename . ':sidefilter/filter.html.twig';
                if(!$this->get('templating')->exists($filterTemplate)) {
                    $filterTemplate = 'CatalogueBundle:default:sidefilter/filter.html.twig';
                }
                $filterData['category_id'] = $category_id;
                $sidebarfilter = $this->renderView($filterTemplate, ['filterData' => $filterData, 'sidebar_parent_class' => $sidebar_parent_class, 'SiteData' => $SiteData]);
                $return_array['sidebarfilter'] = $sidebarfilter;

                $filterTemplate = 'CatalogueBundle:' . $themename . ':category/_topfilter.html.twig';
                if(!$this->get('templating')->exists($filterTemplate)) {
                    $filterTemplate = 'CatalogueBundle:default:category/_topfilter.html.twig';
                }
                $topfilterhtml = $this->renderView($filterTemplate, ['filterData' => $filterData, 'SiteData' => $SiteData]);
            }
        }
        $return_array['showfilter'] = $showfilter;
        $topPaginationTemplate = 'CatalogueBundle:' . $themename . ':category/_pagination.html.twig';
        if(!$this->get('templating')->exists($topPaginationTemplate)) {
            $topPaginationTemplate = 'CatalogueBundle:default:category/_pagination.html.twig';
        }
        $topPaginationData = $this->renderView($topPaginationTemplate, ['paginationData' => $productData['paginationData'], 'topPagination'=> 'yes']);

        $footerPaginationTemplate = 'CatalogueBundle:' . $themename . ':category/_pagination.html.twig';
        if(!$this->get('templating')->exists($footerPaginationTemplate)) {
            $footerPaginationTemplate = 'CatalogueBundle:default:category/_pagination.html.twig';
        }
        $footerPaginationData = $this->renderView($footerPaginationTemplate, ['paginationData' => $productData['paginationData'], 'topPagination'=> 'no']);

        $pageLimit = $request->query->get('limit');
        $item_per_page = $SiteData['category_listbox_style']['product_item_per_page'];
        if (!empty($pageLimit)) {
            $item_limit = $pageLimit;
        } else {
            if (!empty($item_per_page)) {
                $item_limit = $item_per_page;
            } else {
                $item_limit = $SiteData['page_setting'];
            }
        }

        $showItemData = array();
        $showItemData['html'] = $this->generateShowItem($SiteData, $item_limit, $isShow = true);
        $showItemData['value'] = $item_limit;
        
        $sortingParam = array('themename' => $themename, 'advanceFilterSetting' => $SiteData['advfilter']['product_sort_by'], 'selectedSort' => $request->query->get('sort'), 'productCommaValue' => $productCommaValue);
        $sortingData = $this->getCategorySorting($sortingParam);
        
        $sorting_html = $sortingData['sortHtml'];
        $mobsorting_html = $sortingData['mobsortHtml'];
        
        $return_array['productdata'] = $productData;
        $return_array['SiteData'] = $SiteData;
        $return_array['topPagination'] = $topPaginationData;
        $return_array['footerPagination'] = $footerPaginationData;
        $return_array['showItemData'] = $showItemData;
        $return_array['sortingData'] = $sorting_html;
        $return_array['mobsortingData'] = $mobsorting_html;
        $return_array['topFilterHtml'] = $topfilterhtml;
        echo json_encode($return_array);
        exit;
    }
    
    public function storeBlogTemplateHtmlAction($show_portion = ''){
        $em             = $this->getDoctrine()->getManager();
        $GeneralService = $this->get(GeneralService::class);
        $DeviceDetect   = $this->get(DeviceDetect::class);
        $deviceType     = ($DeviceDetect->isMobile() ? ($DeviceDetect->isTablet() ? 'tablet' : 'phone') : 'computer');
        
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $LayoutSetting  = $GeneralService->getStoreLayoutConfig();
        $themename      = $LayoutSetting['themename'];
        $CommonVariable['DeviceType'] = $deviceType;

        $blogData = array();        
        $data = 'b.id, bl.blogTitle, b.blogSlug, b.blogMedia, b.blogAuthor, b.createdDate, bl.description, count(DISTINCT bc.id) as blogCommentCount';
        //$condition_array = array('b.status' => 1, 'b.isDeleted' => 0, 'b.lang' => $this->get('session')->get('front_lang_id'));
        $condition_array = array('b.status' => 1, 'b.isDeleted' => 0);
        $join_array = array();
        $sessionLangRefid = $this->get('session')->get('front_lang_ref_id');
        $join_array[0]['type'] = 'left';
        $join_array[0]['join_from'] = 'b.uuId';
        $join_array[0]['join_to'] = 'bl.blogRefId';
        $join_array[0]['join_allies'] = 'bl';
        $join_array[0]['join_class'] = 'ContentcmsBundle:BlogLang';
        $join_array[0]['join_condition'] = " AND bl.langRefId = '$sessionLangRefid'";

        $join_array[1]['type'] = 'left';
        $join_array[1]['join_from'] = 'b.uuId';
        $join_array[1]['join_to'] = 'bc.blogRefId';
        $join_array[1]['join_allies'] = 'bc';
        $join_array[1]['join_class'] = 'ContentcmsBundle:BlogComment';
        $join_array[1]['join_condition'] = " AND bc.status =1 AND bc.isDeleted =0";

        $item_offset = 0;
        $blogData = $GeneralService->selectDataByCondition($tableclass = 'ContentcmsBundle:Blog', $allies = "b", $condition_array, $operator_array = array(), $data, $groupby = 'b.id', $sortby = 'ASC', $orderby = 'b.sortOrder', $limit = '', $offset = $item_offset, $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        $column = $this->getColumnList();
        $Template = "ContentcmsBundle:" . $themename . ":blog/_bloglist.html.twig";
        if (!$this->get('templating')->exists($Template)) {
          $Template = 'ContentcmsBundle:default:blog/_bloglist.html.twig';
        }
        return $this->render($Template, array(
          'BlogData' => $blogData,
          'LayoutSetting' => $LayoutSetting,
          'CommonVariable' => $CommonVariable,
          'column' => $column
        ));
    }

    public function getCategorySorting($param = array())
    {
        $themename = $param['themename'];
        $advanceFilterSetting = $param['advanceFilterSetting'];
        $productCommaValue = $param['productCommaValue'];

        $isSortEnable = 0;
        if (!empty($advanceFilterSetting)) {
            $otherData = array();
            $otherData['selectedSort'] = $param['selectedSort'];
            if ($advanceFilterSetting['show_sorting_rating'] == 'Yes') {
                $productReviewCount = $this->checkReviewAvail($productCommaValue);
                $otherData['productReviewCount'] = $productReviewCount;
            }
            if ($advanceFilterSetting['show_sorting_product_promotions'] == 'Yes') {
                $productPromotionData = $this->getActiveProductPromotions();
                $otherData['productPromotionData'] = $productPromotionData;
            }
            $partialTemplate = 'CatalogueBundle:' . $themename . ':category/_shorting.html.twig';
            if (!$this->get('templating')->exists($partialTemplate)) {
                $partialTemplate = 'CatalogueBundle:default:category/_shorting.html.twig';
            }
            
            $sortHtml = $this->renderView($partialTemplate, array('advanceFilterSetting' => $advanceFilterSetting, 'otherData' => $otherData));

            $partialTemplate = 'CatalogueBundle:' . $themename . ':category/_mobshorting.html.twig';
            if (!$this->get('templating')->exists($partialTemplate)) {
                $partialTemplate = 'CatalogueBundle:default:category/_mobshorting.html.twig';
            }
            
            $mobsortHtml = $this->renderView($partialTemplate, array('advanceFilterSetting' => $advanceFilterSetting, 'otherData' => $otherData));

            $return_array = array();
            $return_array['sortHtml'] = $sortHtml;
            $return_array['mobsortHtml'] = $mobsortHtml;
            return $return_array;
        }
    }

    public function checkRecordExist($moduleid) {
        $em = $this->getDoctrine()->getManager();
        if (!empty($moduleid)) {
            $em = $this->getDoctrine()->getEntityManager();
            $statement = $em->getConnection()->prepare("SELECT id FROM module_setting WHERE module_id=" . $moduleid);
            $statement->execute();
            if ($statement->fetchAll()) {
                return true;
            }
        }
        return false;
    }

    public function searchAttributeWithGroup($searchAttribute){
        $return_array = array();
        $em = $this->getDoctrine()->getManager();
        $sql = 'SELECT id, attribute_name, group_id, slug FROM attribute WHERE slug IN ("'.implode('","', $searchAttribute).'")';
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if (!empty($result)) {
            foreach ($result as $element) {
                $return_array[$element['group_id']][] = $element;
            }
        }
        return $return_array;
    }


    protected function getRouteFromUrl($path) {
        $pathArray = explode("/", $path);
        return $pathArray[array_key_last($pathArray)];

    }

    public function checkCtbMasterData($catalog, $ctb_master_data){
        $is_change = 0;
        if(!empty($catalog) && !empty($ctb_master_data)){
            $ctb_master_array = json_decode($ctb_master_data, true);
            unset($ctb_master_array['place_from']);
            unset($ctb_master_array['created_date']);
            unset($ctb_master_array['updated_date']);

            if(!isset($ctb_master_array['ctb_ref_id']) && isset($ctb_master_array['ctb_id'])){
                $ctb_master_array['ctb_ref_id'] = $ctb_master_array['ctb_id'];
                unset($ctb_master_array['ctb_id']);
            }
            if($catalog == 'attribute'){
                unset($ctb_master_array['description']);
            }
            if($catalog == 'attribute_group'){
                unset($ctb_master_array['reference_name']);
            }
            if($catalog == 'product'){
                unset($ctb_master_array['singledimention']);
                unset($ctb_master_array['outofstock']);
                unset($ctb_master_array['category_id']);
                unset($ctb_master_array['sub_category']);
                unset($ctb_master_array['sub_category_id']);
                unset($ctb_master_array['tax_flag']);
                unset($ctb_master_array['tax_id']);
                unset($ctb_master_array['tax_id']);
                unset($ctb_master_array['base_price']);
                unset($ctb_master_array['sale_price']);
                unset($ctb_master_array['msrp_price']);
                unset($ctb_master_array['dimension']);
                $product_category = '';
                $product_image = '';
                $product_attribute = '';
                if(isset($ctb_master_array['sub_category_id'])){
                    $product_category = $ctb_master_array['sub_category_id'];
                    unset($ctb_master_array['sub_category_id']);
                }
                if(isset($ctb_master_array['product_category'])){
                    $product_category = $ctb_master_array['product_category'];
                    unset($ctb_master_array['product_category']);
                }
                if(isset($ctb_master_array['product_image'])){
                    $product_image = $ctb_master_array['product_image'];
                    unset($ctb_master_array['product_image']);
                }
                if(isset($ctb_master_array['product_attribute'])){
                    $product_attribute = $ctb_master_array['product_attribute'];
                    unset($ctb_master_array['product_attribute']);
                }
                if(isset($ctb_master_array['dimensiontype'])){
                    $ctb_master_array['dimension_type'] = $ctb_master_array['dimensiontype'];
                    unset($ctb_master_array['dimensiontype']);
                }
            }
            $keys = implode(',',array_keys($ctb_master_array));
            $ctb_ref_id = $ctb_master_array['ctb_ref_id'];
            $keys = 'id,'.$keys;

            $em = $this->getDoctrine()->getManager();
            $sql = "SELECT $keys FROM ".$catalog." WHERE ctb_ref_id ='".$ctb_ref_id."'";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

            if(!empty($result)){
                $primary_id = $result[0]['id'];
                foreach($ctb_master_array as $key =>$ctb_val){
                    if(html_entity_decode($result[0][$key]) !== html_entity_decode($ctb_val)){
                        // echo $key . '==' .trim($result[0][$key]) . '==' .trim($ctb_val);
                        // exit;
                        return 1;
                    }
                }

                if($catalog == 'product'){
                    $sql = "SELECT count(image_url) as total_image FROM product_image WHERE ctb_ref_id ='".$ctb_ref_id."' AND status = 1 AND is_deleted = 0 AND (place_from = 'M' OR place_from = 'I')";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();
                    $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if(!empty($result)){
                        if($result[0]['total_image'] != count(explode(',', $product_image))){
                            // echo 'IMAGE';
                            // exit;
                            return 1;
                        }
                    }

                    $sql = "SELECT count(category_id) as total_category FROM product_category WHERE product_id =".$primary_id;
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();
                    $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if(!empty($result)){
                        if($result[0]['total_category'] != count(array_unique(explode(',', $product_category)))){
                            // echo 'CATEGORY'. '==' . $result[0]['total_category'] . '==' . count(explode(',', $product_category));
                            // exit;
                            return 1;
                        }
                    }
    
                    $sql = "SELECT count(attribute_id) as total_attribute FROM product_attribute WHERE product_id =".$primary_id." AND status = 1 AND is_deleted = 0";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();
                    $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if(!empty($result)){
                        if($result[0]['total_attribute'] != count(array_unique(explode(',', $product_attribute)))){
                            // echo 'ATTRIBUTE';
                            // exit;
                            return 1;
                        }
                    }
                }
            }
            
        }
        return $is_change;
    }

    /**
     *  @Route("/resetctbmasterdata",name="resetctbmasterdata")
     */
    public function resetCtbMasterData(){
        $is_reset = 0;
        $request = Request::createFromGlobals();
        $catalog = $request->get('catalog');
        $ctb_ref_id = $request->get('ctb_ref_id');
        if(!empty($catalog) && !empty($ctb_ref_id)){
            $em = $this->getDoctrine()->getManager();
            $sql = "SELECT id, ctb_master_data FROM ".$catalog." WHERE ctb_ref_id ='".$ctb_ref_id."'";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if(!empty($result)){
                $primary_id = $result[0]['id'];
                $ctb_master_array = json_decode($result[0]['ctb_master_data'], true);
                unset($ctb_master_array['ctb_id']);
                unset($ctb_master_array['ctb_ref_id']);
                unset($ctb_master_array['updated_date']);
                if($catalog == 'attribute'){
                    unset($ctb_master_array['description']);
                }
                if($catalog == 'attribute_group'){
                    unset($ctb_master_array['reference_name']);
                }
                if($catalog == 'product'){
                    unset($ctb_master_array['singledimention']);
                    unset($ctb_master_array['outofstock']);
                    unset($ctb_master_array['category_id']);
                    unset($ctb_master_array['sub_category']);
                    unset($ctb_master_array['tax_flag']);
                    unset($ctb_master_array['tax_id']);
                    unset($ctb_master_array['tax_id']);
                    if(empty($ctb_master_array['future_avalibility_date'])){
                        unset($ctb_master_array['future_avalibility_date']);
                    }
                    
                    $product_category = '';
                    $product_image = '';
                    $product_attribute = '';
                    if(isset($ctb_master_array['sub_category_id'])){
                        $product_category = $ctb_master_array['sub_category_id'];
                        unset($ctb_master_array['sub_category_id']);
                    }
                    if(isset($ctb_master_array['product_category'])){
                        $product_cat = $ctb_master_array['product_category'];
                        $product_cat = "'".str_replace(",", "','", $product_cat)."'";
                        $sql = "SELECT GROUP_CONCAT(id) as ids FROM category WHERE ctb_ref_id IN (".$product_cat.")";
                        $statement = $em->getConnection()->prepare($sql);
                        $statement->execute();
                        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                        if(!empty($result)){
                            $product_category = $result[0]['ids'];
                        }
                        unset($ctb_master_array['product_category']);
                    }
                    if(isset($ctb_master_array['product_image'])){
                        $product_image = $ctb_master_array['product_image'];
                        unset($ctb_master_array['product_image']);
                    }
                    if(isset($ctb_master_array['product_attribute'])){
                        $product_attribute = $ctb_master_array['product_attribute'];
                        unset($ctb_master_array['product_attribute']);
                    }
                    if(isset($ctb_master_array['dimensiontype'])){
                        $ctb_master_array['dimension_type'] = $ctb_master_array['dimensiontype'];
                        unset($ctb_master_array['dimensiontype']);
                    }
                }
                $ctb_master_array['place_from'] = 'M';

                $where = "ctb_ref_id ='".$ctb_ref_id."'";

                $log_old_data = $this->gettablewisecolumname($catalog, $primary_id);
                $q="UPDATE `".$catalog."` SET ";
                foreach($ctb_master_array as $key=>$val) {
                    $val = addslashes($val);
                    if(strtolower($val)=='null') $q.= "`$key` = NULL, ";
                    elseif(strtolower($val)=='now()') $q.= "`$key` = NOW(), ";
                    else $q.= "`$key`='".$val."', ";
                }
                $q = rtrim($q, ', ') . ' WHERE '.$where.';';
                $statement = $em->getConnection()->prepare($q);
                $statement->execute();

                if($catalog == 'product'){
                    $product_image = "'".str_replace(",", "','", $product_image)."'";
                    $sql = "UPDATE `product_image` SET `place_from`='M',`status`=1,`is_deleted`=0 WHERE product_id =".$primary_id." AND image_url IN ($product_image)";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();

                    $sql = "UPDATE `product_image` SET `is_deleted`=1 WHERE product_id =".$primary_id." AND image_url NOT IN ($product_image)";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();

                    $product_category_ids = "'".str_replace(",", "','", $product_category)."'";
                    $category_ids = explode(',',$product_category);

                    $sql = "DELETE FROM `product_category` WHERE product_id =".$primary_id." AND category_id NOT IN (".$product_category_ids.")";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();

                    if(!empty($category_ids[0])){
                        foreach($category_ids as $key => $cat_value){
                            $sql = "SELECT id FROM product_category WHERE product_id =".$primary_id." AND category_id =".$cat_value;
                            $statement = $em->getConnection()->prepare($sql);
                            $statement->execute();
                            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                            if(empty($result)){
                                $sql = "INSERT INTO `product_category`(`product_id`, `category_id`) VALUES (".$primary_id.",".$cat_value.")";
                                $statement = $em->getConnection()->prepare($sql);
                                $statement->execute();
                            }
                        }
                    }
                                        
                    $product_attribute = "'".str_replace(",", "','", $product_attribute)."'";
                    $sql = "SELECT GROUP_CONCAT(id) as ids FROM attribute WHERE ctb_ref_id IN(".$product_attribute.")";
                    $statement = $em->getConnection()->prepare($sql);
                    $statement->execute();
                    $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if(!empty($result)){
                        $attribute_ids = $result[0]['ids'];
                        if(!empty($attribute_ids)){
                            $sql = "UPDATE `product_attribute` SET `status`=1,`is_deleted`=0 WHERE product_id =".$primary_id." AND attribute_id IN ($attribute_ids)";
                            $statement = $em->getConnection()->prepare($sql);
                            $statement->execute();

                            $sql = "UPDATE `product_attribute` SET `is_deleted`=1 WHERE product_id =".$primary_id." AND attribute_id NOT IN ($attribute_ids)";
                            $statement = $em->getConnection()->prepare($sql);
                            $statement->execute();
                        }
                    }
                }

                $field_name = $ctb_master_array['name'];
                if($catalog == 'attribute_group'){
                    $field_name = $ctb_master_array['group_name'];
                }elseif($catalog == 'attribute'){
                    $field_name = $ctb_master_array['attribute_name'];
                }
                
                $log_message = $field_name . " ".$catalog." reset By " . $this->get('session')->get('loginAdminName');
                //End Activity Log Entry
                $log_new_data = $this->gettablewisecolumname($catalog,$primary_id);
                $this->storeLogs(1, 4, '', $primary_id, $log_message, $catalog, $log_old_data, $log_new_data);
                $is_reset = 1;
            }
        }
        echo $is_reset;
        exit;
    }
    // public function getProductSalePrice($ctb_ref_id='', $sale_price = 0, $msrp_price = 0){
    //     $return_data = array();
    //     $return_data['sale_price'] = 0;
    //     $return_data['msrp_price'] = 0;
    //     if(empty($ctb_ref_id)){
    //         return $return_data;
    //     }
    //     $em = $this->getDoctrine()->getManager();
    //     $sql = "SELECT column_key, column_value FROM product_pricing WHERE ctb_ref_id =".$ctb_ref_id;
    //     $statement = $em->getConnection()->prepare($sql);
    //     $statement->execute();
    //     $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    //     if(empty($result)){
    //         return $return_data;
    //     }        
    //     echo '<pre>';
    //     print_r($result);
    //     exit;
    // }

    public function isMarkingAvailable($product_id){
        $em = $this->getDoctrine()->getManager();
        $sql = "SELECT pm.id FROM product_marking pm LEFT JOIN marking m ON m.id = pm.marking_id AND m.status = 1 AND m.is_deleted = 0 WHERE (CURRENT_DATE() BETWEEN start_date AND end_date OR showalways = 1) AND pm.status = 1 AND pm.is_deleted = 0 AND pm.product_id =" . $product_id;
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $markingData = $statement->fetchAll();
        if(!empty($markingData)){
            return true;
        }else{
            return false;
        }
    }

     public function getCollectionsData($param = array(), $otherParam = array())
    {
        $item_offset     = 0;
        $pageNo          = $param['pageNo'];
        $pageLimit       = $param['limit'];
        $GeneralService  = $this->get(GeneralService::class);
        $GeneralFunction = new GeneralFunctionController;
        $SiteData        = $otherParam['SiteData'];
        $SiteSetting     = $otherParam['SiteSetting'];
        $item_per_page = $SiteData['collection_listbox_style']['collection_item_per_page'];
        if (!empty($pageLimit)) {
            $item_limit = $pageLimit;
        } else {
            if (!empty($item_per_page)) {
                $item_limit = $item_per_page;
            } else {
                $item_limit = $SiteData['page_setting'];
            }
        }
        if (empty($pageNo)) {
            $pageNo = 1;
        } else {
            $item_offset = ($pageNo - 1) * $item_limit;
        }
        $pTot                = '';
        $linksPerPage        = 5;
        $midRange            = 3;
        $themename           =  $SiteData['themename'];//$SiteSetting['themename'];
        $returnCollectionData   = array();
        $repository          = $this->getDoctrine()->getRepository(ManufacturerCollection::class);
        $em = $this->getDoctrine()->getManager();
        $column              = $this->getColumnList();
        $currentUrl          = '';
        $frontLanguage       = $SiteData['commonVariable']['LangId'];
        $baseUrl             = $SiteData['commonVariable']['BaseUrl'];
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        
         /*$getCountCollectionData = $repository->createQueryBuilder('cp')
            ->select('count(cp.id)')
            ->where('cp.status = :status')
            ->andwhere('cp.isDeleted = :deleted')
            ->andwhere('cp.lang = :langId')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langId', $frontLanguage)
            ->getQuery()->getSingleScalarResult();
            
        $getCollectionData = $repository->createQueryBuilder('cp')
            ->select('cp.id,cp.name,cp.description,cp.slug,cp.media,cp.itemGroupCode,cp.placeFrom')
            ->where('cp.status = :status')
            ->andwhere('cp.isDeleted = :deleted')
            ->andwhere('cp.lang = :langId')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langId', $frontLanguage)
            ->orderBy('cp.id', 'ASC')
            ->setFirstResult($item_offset)->setMaxResults($item_limit)
            ->getQuery()->getResult();*/
        
        $getCountCollectionData = $repository->createQueryBuilder('mc')
            ->select('count(mc.id)')
            ->where('mc.status = :status')
            ->andwhere('mc.isDeleted = :deleted')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->getQuery()->getSingleScalarResult();
            
        $getCollectionData = $repository->createQueryBuilder('mc')
            ->select('mc.id,mcl.name,mcl.description,mc.slug,mc.media,mc.itemGroupCode,mc.placeFrom')
            ->innerJoin('CatalogueBundle:ManufacturerCollectionLang', 'mcl', 'WITH', 'mcl.collectionRefId = mc.ctbRefId')
            ->where('mc.status = :status')
            ->andwhere('mc.isDeleted = :deleted')
            ->andwhere('mcl.langRefId = :langRefId')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langRefId', $sessionLangRefId)
            ->orderBy('mc.id', 'ASC')
            ->setFirstResult($item_offset)->setMaxResults($item_limit)
            ->getQuery()->getResult();
        

        $pTot               = ceil($getCountCollectionData / $item_limit);
        if (!empty($getCollectionData)) {
           
                $currentUrl  = $baseUrl . 'collection';
            
        }

        $pagination_param   = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageNo, 'current_url' => $currentUrl, 'total_count' => $getCountCollectionData, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
        $collection_pagination = $this->generateCollectionPagination($pagination_param, $themename);
       
        $collectiongroupUrl = 'Yes';
         $collectionTemplate    = 'CatalogueBundle:' . $themename . ':collection/_collectionlist.html.twig';
         if (!$this->get('templating')->exists($collectionTemplate)) {
             $collectionTemplate = 'CatalogueBundle:default:collection/_collectionlist.html.twig';
         }
          
        
        $collectionHtml  = $this->renderView($collectionTemplate, 
            array('CollectionData' => $getCollectionData, 
                'SiteData' => $SiteData,
                'CollectiongroupUrl' => $collectiongroupUrl,
                'CommonVariable' => $SiteData['commonVariable'],
                'column' => $column, 
                'GeneralService' => $GeneralService));
        $returnCollectionData['collection_html']       = $collectionHtml;
        $returnCollectionData['collection_count']      = $getCountCollectionData;
        $returnCollectionData['collection_pagination'] = $collection_pagination;
        $returnCollectionData['collection_pagination_data'] = $pagination_param;
        return $returnCollectionData;
    }

    /*====START :: REN11 Function added for collection pagination functionality========*/
    public function getCollectionData($param = array(), $otherParam = array())
    {
        $item_offset     = 0;
        $pageNo          = $param['pageNo'];
        $pageLimit       = $param['limit'];
        if(array_key_exists("slug",$param)){
            $slug        = $param['slug'];
        }
        $subCategoryData = array();
        $collectionGroupData = array();
        $GeneralService  = $this->get(GeneralService::class);
        $GeneralFunction = new GeneralFunctionController;
        $SiteData        = $otherParam['SiteData'];
        $SiteSetting     = $otherParam['SiteSetting'];
        $item_per_page = $SiteData['collection_listbox_style']['collection_item_per_page'];
        if (!empty($pageLimit)) {
            $item_limit = $pageLimit;
        } else {
            if (!empty($item_per_page)) {
                $item_limit = $item_per_page;
            } else {
                $item_limit = $SiteData['page_setting'];
            }
        }
        if (empty($pageNo)) {
            $pageNo = 1;
        } else {
            $item_offset = ($pageNo - 1) * $item_limit;
        }
        $pTot                = '';
        $linksPerPage        = 5;
        $midRange            = 3;
        $themename           =  $SiteData['themename'];//$SiteSetting['themename'];
        $returnCollectionData   = array();
        $subCategoryData  = array();
        $repository          = $this->getDoctrine()->getRepository(ManufacturerCollection::class);
        $em = $this->getDoctrine()->getManager();
        $column              = $this->getColumnList();
        $currentUrl          = '';
        $frontLanguage       = $SiteData['commonVariable']['LangId'];
        $baseUrl             = $SiteData['commonVariable']['BaseUrl'];
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        if(!empty($slug)){

            $otherParam = array('GeneralService' => $GeneralService, 'SiteSetting' => $SiteSetting);
            $categoryDataBySlugParam = array('slugCode' => $slug, 'itemLimit' => $item_limit, 'frontLanguage' => $frontLanguage);
            $collectionCategoryData = $this->getCollectionDataBySlug($categoryDataBySlugParam, $otherParam);
            $collectionGroupData = $collectionCategoryData[0];
            if (!empty($collectionGroupData)) {
                $subCategoryDataParam = array('parentId' => $collectionGroupData['id'], 'categoryLimit' => $item_limit, 'frontLanguage' => $frontLanguage);
                $subCategoryData = $this->getSubCollectionData($subCategoryDataParam, $otherParam);
            }
            $collectionCategoryId = $collectionGroupData['id'];
            $collectionCatRefId = $collectionGroupData['ctbRefId'];
            /*$getCountCollectionData = $repository->createQueryBuilder('cp')
                                    ->select('count(cp.id)')
                                    ->where('cp.status = :status')
                                    ->andwhere('cp.isDeleted = :deleted')
                                    ->andwhere('cp.lang = :langId')
                                    ->andwhere('cp.collectionCategory = :collectionCategoryId')
                                    ->setParameter('status', 1)
                                    ->setParameter('deleted', 0)
                                    ->setParameter('langId', $frontLanguage)
                                    ->setParameter('collectionCategoryId', $collectionCategoryId)
                                    ->getQuery()->getSingleScalarResult();*
            
                $getCollectionData = $repository->createQueryBuilder('cp')
                                ->select('cp.id,cp.name,cp.description,cp.slug,cp.media,cp.itemGroupCode,cp.placeFrom,cc.slug as collectiongroup')
                                ->innerJoin('CatalogueBundle:ManufacturerCollectionCategory', 'cc', 'WITH', 'cc.id = cp.collectionCategory')
                                ->where('cp.status = :status')
                                ->andwhere('cp.isDeleted = :deleted')
                                ->andwhere('cp.lang = :langId')
                                ->andwhere('cp.collectionCategory = :collectionCategoryId')
                                ->setParameter('status', 1)
                                ->setParameter('deleted', 0)
                                ->setParameter('langId', $frontLanguage)
                                ->setParameter('collectionCategoryId', $collectionCategoryId)
                                ->orderBy('cp.id', 'ASC')
                                ->setFirstResult($item_offset)->setMaxResults($item_limit)
                                ->getQuery()->getResult();*/
            $getCountCollectionData = $repository->createQueryBuilder('mc')
                                    ->select('count(mc.id)')
                                    ->where('mc.status = :status')
                                    ->andwhere('mc.isDeleted = :deleted')
                                    ->andwhere('mc.collectionCatRefId = :collectionCatRefId')
                                    ->setParameter('status', 1)
                                    ->setParameter('deleted', 0)
                                    ->setParameter('collectionCatRefId', $collectionCatRefId)
                                    ->getQuery()->getSingleScalarResult();
            
            $getCollectionData = $repository->createQueryBuilder('mc')
                                ->select('mc.id,mcl.name,mcl.description,mc.slug,mc.media,mc.itemGroupCode,mc.placeFrom,mcc.slug as collectiongroup')
                                ->innerJoin('CatalogueBundle:ManufacturerCollectionLang', 'mcl', 'WITH', 'mcl.collectionRefId = mc.ctbRefId')
                                ->innerJoin('CatalogueBundle:ManufacturerCollectionCategory', 'mcc', 'WITH', 'mcc.ctbRefId = mc.collectionCatRefId')
                                ->where('mc.status = :status')
                                ->andwhere('mc.isDeleted = :deleted')
                                ->andwhere('mcl.langRefId = :langRefId')
                                ->andwhere('mc.collectionCatRefId = :collectionCatRefId')
                                ->setParameter('status', 1)
                                ->setParameter('deleted', 0)
                                ->setParameter('langRefId', $sessionLangRefId)
                                ->setParameter('collectionCatRefId', $collectionCatRefId)
                                ->orderBy('mcl.name', 'ASC')
                                ->setFirstResult($item_offset)->setMaxResults($item_limit)
                                ->getQuery()->getResult();

        }else {

            /*$getCountCollectionData = $em->createQueryBuilder()
            ->select('count(cc.id)')
            ->where('cc.status = :status')
            ->andwhere('cc.isDeleted = :deleted')
            ->andwhere('cc.lang = :langId')
            ->setParameter('status', 1)
            ->setParameter('deleted', 0)
            ->setParameter('langId', $frontLanguage)
            ->from('CatalogueBundle:ManufacturerCollectionCategory', 'cc')
            ->getQuery()->getSingleScalarResult();
            
             $getCollectionData = $em->createQueryBuilder()
                                ->select('a.slug,a.media,a.placeFrom,a.name,a.slug as collectiongroups')
                                ->from('CatalogueBundle:ManufacturerCollectionCategory', 'a')
                                ->where('a.status = :status')
                                ->andwhere('a.isDeleted = :deleted')
                                ->andwhere('a.lang = :langId')
                                ->setParameter('status', 1)
                                ->setParameter('deleted', 0)
                                ->setParameter('langId', $frontLanguage)
                                ->orderBy('a.id', 'ASC')
                                ->setFirstResult($item_offset)->setMaxResults($item_limit)
                                ->getQuery()
                                ->getResult();*/
            
            $getCountCollectionData = $em->createQueryBuilder()
                                        ->select('count(mcc.id)')
                                        ->where('mcc.status = :status')
                                        ->andwhere('mcc.isDeleted = :deleted')
                                        ->setParameter('status', 1)
                                        ->setParameter('deleted', 0)
                                        ->from('CatalogueBundle:ManufacturerCollectionCategory', 'mcc')
                                        ->getQuery()->getSingleScalarResult();
            
            $getCollectionData = $em->createQueryBuilder()
                                ->select('mcc.slug,mcc.media,mcc.placeFrom,mccl.name,mcc.slug as collectiongroups')
                                ->from('CatalogueBundle:ManufacturerCollectionCategory', 'mcc')
                                ->innerJoin('CatalogueBundle:ManufacturerCollectionCategoryLang', 'mccl', 'WITH', 'mccl.collectionCatRefId = mcc.ctbRefId')
                                ->where('mcc.status = :status')
                                ->andwhere('mcc.isDeleted = :deleted')
                                ->andwhere('mccl.langRefId = :langRefId')
                                ->setParameter('status', 1)
                                ->setParameter('deleted', 0)
                                ->setParameter('langRefId', $sessionLangRefId)
                                ->orderBy('mcc.id', 'ASC')
                                ->setFirstResult($item_offset)->setMaxResults($item_limit)
                                ->getQuery()
                                ->getResult();
        }

        $pTot               = ceil($getCountCollectionData / $item_limit);
        if (!empty($getCollectionData)) {
            if(!empty($slug)){
                $currentUrl  = $baseUrl . 'cl/'.$slug;
            }else {
                $currentUrl  = $baseUrl . 'collection';
            }
        }

        $pagination_param   = array('linksPerPage' => $linksPerPage, 'midRange' => $midRange, 'pTot' => $pTot, 'pageno' => $pageNo, 'current_url' => $currentUrl, 'total_count' => $getCountCollectionData, 'offset' => $item_offset, 'limit' => $item_limit, 'page_type' => '');
        $collection_pagination = $this->generateCollectionPagination($pagination_param, $themename);
        $collectiongroupUrl = 'No';
        if(!empty($slug)){
            $collectionTemplate    = 'CatalogueBundle:' . $themename . ':collection/_collectionlist.html.twig';
            if (!$this->get('templating')->exists($collectionTemplate)) {
            $collectionTemplate = 'CatalogueBundle:default:collection/_collectionlist.html.twig';
            }
            $collectiongroupUrl = 'Yes';
        }else{
            $collectionTemplate    = 'CatalogueBundle:' . $themename . ':collection/_collectiongrouplist.html.twig';
            if (!$this->get('templating')->exists($collectionTemplate)) {
            $collectionTemplate = 'CatalogueBundle:default:collection/_collectiongrouplist.html.twig';
            }
            $collectiongroupUrl = 'Yes';
        }
        
        /* $collectionTemplate    = 'CatalogueBundle:' . $themename . ':collection/_collectiongrouplist.html.twig';
         if (!$this->get('templating')->exists($collectionTemplate)) {
             $collectionTemplate = 'CatalogueBundle:default:collection/_collectiongrouplist.html.twig';
         }*/
          
        
        $collectionHtml  = $this->renderView($collectionTemplate, 
            array('CollectionData' => $getCollectionData, 
                'SiteData' => $SiteData,
                'CollectiongroupUrl' => $collectiongroupUrl,
                'CommonVariable' => $SiteData['commonVariable'],
                'collectionGroupData' => $collectionGroupData,
                'subCollectionData' => $subCategoryData,
                'column' => $column, 
                'GeneralService' => $GeneralService));
        $returnCollectionData['collection_html']       = $collectionHtml;
        $returnCollectionData['collection_count']      = $getCountCollectionData;
        $returnCollectionData['collection_pagination'] = $collection_pagination;
        $returnCollectionData['collection_pagination_data'] = $pagination_param;
        return $returnCollectionData;
    }

    public function generateShowCollectionItem($SiteData, $limit = '', $isShow = true)
    {
        $themename                   = $SiteData['themename'];
        $showItemData                = array();
        $showItemData['itemPerPage'] = $SiteData['collection_listbox_style']['collection_item_per_page'];

        $Template = 'CatalogueBundle:' . $themename . ':collection/_showitems.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:collection/_showitems.html.twig';
        }
        $html_showitem = $this->renderView($Template, array('showItemData' => $showItemData, 'limit' => $limit));
        return $html_showitem;
    }

    public function generateCollectionPagination($pagination_param, $themename)
    {
        $paginationData                = array();
        $paginationData['pLinks']      = $pLinks      = $pagination_param['linksPerPage'];
        $paginationData['pMids']       = $pMids       = $pagination_param['midRange'];
        $paginationData['pTot']        = $pTot        = $pagination_param['pTot'];
        $paginationData['pSel']        = $pSel        = $pagination_param['pageno'];
        $paginationData['url']         = $url         = $pagination_param['current_url'];
        $paginationData['total_count'] = $total_count = $pagination_param['total_count'];
        $paginationData['offset']      = $offset      = $pagination_param['offset'];
        $paginationData['limit']       = $limit       = $pagination_param['limit'];
        $Template = 'CatalogueBundle:' . $themename . ':collection/_pagination.html.twig';
        if (!$this->get('templating')->exists($Template)) {
            $Template = 'CatalogueBundle:default:collection/_pagination.html.twig';
        }
        $html_pagination = $this->renderView($Template, array('paginationData' => $paginationData));
        return $html_pagination;
    }

    public function getCollectionDataBySlug($param = array(), $otherParam = array())
    {
        $session = new Session;
        $GeneralService = $otherParam['GeneralService'];
        $SiteSetting = $otherParam['SiteSetting'];
        $slugCode = $param['slugCode'];
        $itemLimit = $param['itemLimit'];
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        $collection_category_join_array = array();
        $collection_category_join_array[0]['type'] = 'left';
        $collection_category_join_array[0]['join_from'] = 'mcc.ctbRefId';
        $collection_category_join_array[0]['join_to'] = 'mccl.collectionCatRefId';
        $collection_category_join_array[0]['join_allies'] = 'mccl';
        $collection_category_join_array[0]['join_class'] = 'CatalogueBundle:ManufacturerCollectionCategoryLang';
        $collection_category_join_array[0]['join_condition'] = "AND mccl.langRefId = '".$sessionLangRefId."' ";
        $collection_category_operator_array = array();
        //$CCdata = 'cc';
        $CCdata = 'mcc.id,mcc.ctbRefId,mcc.ctbMasterData,mcc.parentId,mcc.slug,mcc.media,mcc.placeFrom,'
        . 'mccl.name,mccl.description,mcc.showStyle,mcc.galleryId,'
        . 'mcc.categoryTemplate,mcc.ads,mcc.adsLink,mcc.headerCode,mcc.googleCategory';
        $groupby = 'mcc.id';
        $collection_category_condition_array = array('mcc.status' => 1, 'mcc.isDeleted' => 0, 'mcc.slug' => $slugCode);
        $collectionCategoryData = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:ManufacturerCollectionCategory", $allies = 'mcc', $collection_category_condition_array, $collection_category_operator_array, $CCdata, $groupby, $sortby = 'ASC', $orderby = 'mccl.name', $limit = $itemLimit, $offset = '', $collection_category_join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);         
        if(!empty($collectionCategoryData)){
            return $collectionCategoryData;
        }else{
            return false;
        }
    }

    public function getSubCollectionData($param = array(), $otherParam = array())
    {
        $session = new Session;
        $GeneralService = $otherParam['GeneralService'];
        $SiteSetting = $otherParam['SiteSetting'];
        $parentId = $param['parentId'];
        $categoryLimit = $param['categoryLimit'];

        $data = 'mcc.id,mcc.slug,mcc.media,mcc.placeFrom,mccl.name';
        $sessionLangRefId = $this->get('session')->get('front_lang_ref_id');
        $join_array = array();
        $join_array[0]['type'] = 'left';
        $join_array[0]['join_from'] = 'mcc.ctbRefId';
        $join_array[0]['join_to'] = 'mccl.collectionCatRefId';
        $join_array[0]['join_allies'] = 'mccl';
        $join_array[0]['join_class'] = 'CatalogueBundle:ManufacturerCollectionCategoryLang';
        $join_array[0]['join_condition'] = "AND mccl.langRefId = '".$sessionLangRefId."' ";
        $collection_category_operator_array = array();
        //$condition_array = array('c.parentId' => $parentId, 'c.status' => 1, 'c.isDeleted' => 0, 'c.lang'=> $session->get('front_lang_id'));
        $condition_array = array('mcc.parentId' => $parentId, 'mcc.status' => 1, 'mcc.isDeleted' => 0);
        $subcatdata = $GeneralService->selectDataByCondition($tableclass = "CatalogueBundle:ManufacturerCollectionCategory", $allies = 'mcc', $condition_array, $operator_array = array(), $data, $groupby = 'mcc.id', $sortby = 'ASC', $orderby = 'mcc.sortOrder', $limit = $categoryLimit, $offset = '0', $join_array, $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
        $subCategoryData = array();
        if (!empty($subcatdata)) {
            $subCategoryData = $subcatdata;
        }
        if(!empty($subCategoryData)){
            foreach($subCategoryData as $key => $category){
                $data = 'count(mcc.id) as subcategory_total';
                $condition_array = array('mcc.parentId' => $category['id'], 'mcc.status' => 1, 'mcc.isDeleted' => 0);
                $subcatdata2 = $GeneralService->selectDataByCondition($tableclass = 'CatalogueBundle:ManufacturerCollectionCategory', $allies = "mcc", $condition_array, $operator_array = array(), $data, $groupby = '', $sortby = '', $orderby = '', $limit = '', $offset = '', $join_array = array(), $isDqlQuery = false, $isSqlQuery = false, $isParameter = false, $returnArray = true);
                if(!empty($subcatdata2)){
                    $subCategoryData[$key]['subcategory_total'] = $subcatdata2[0]['subcategory_total'];
                }
                
            }
        }
        return array_values($subCategoryData);
    }

    /**
     * @Route("getcollectionfilterdata", name="getcollectionfilterdata")
     */
    public function getCollectionFilterData(Request $request)
    {
        $MyFrontService  = $this->get(MyFrontService::class);
        $GeneralService  = $this->get(GeneralService::class);
        $SiteSetting    = $GeneralService->getStoreMainConfig();
        $segments = explode('/',$_SERVER['REQUEST_URI']);
        $SiteData = $MyFrontService->getSiteData();
        $device_type = $SiteData['commonVariable']['DeviceType'];
        $pageLimit = $request->query->get('limit');
        $preview = $request->request->get('preview');
        if(!empty($preview) && $preview == 'preview'){
            $pageNo = 1;
        }else{
            $pageNo = $request->query->get('page');
        }
        $slug = $request->request->get('collectionCategorySlug') ;
        $collection_url = $request->request->get('collection_url') ;
        $em = $this->getDoctrine()->getManager();
        $themename = $SiteData['themename'];
        $showItemData = array();
        $showItemData['html'] = $this->generateShowCollectionItem($SiteData, $pageLimit, $isShow = true);
        $showItemData['value'] = $pageLimit;
        $otherParams = array('SiteData' => $SiteData, 'showItemData' => $showItemData,'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService);
        if(!empty($slug)){
            $params = array('pageNo' => $pageNo,'limit' => $pageLimit, 'slug' => $slug);
        }else {
            $params = array('pageNo' => $pageNo,'limit' => $pageLimit);

        }
        if(!empty($collection_url)){
            $collectionData = $this->getCollectionsData($params,$otherParams);
        }else{
            $collectionData = $this->getCollectionData($params,$otherParams);
        }
        
        $return_array['collectionData'] = $collectionData;
        $return_array['SiteData'] = $SiteData;
        $return_array['showItemData'] = $showItemData;
        echo json_encode($return_array);
        exit;
    }
    /*====END :: REN11 Function added for collection pagination functionality========*/

    public function getTotalCollectionCategoryCollectionCount($categoryRefId = NULL)
    {
        $count = 0;
        if ($categoryRefId != NULL) {
            $em = $this->getDoctrine()->getManager();
            //$sql = "SELECT cl.id from manufacturer_collection cl WHERE cl.collection_category_id=".$categoryId."  AND cl.status='1' AND cl.is_deleted='0' GROUP BY cl.id";
            $sql = "SELECT mc.id from manufacturer_collection mc "
                    . " WHERE mc.collection_cat_ref_id = '" . $categoryRefId . "'  AND "
                    . " mc.status='1' AND mc.is_deleted='0' GROUP BY mc.id";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if (!empty($result)) {
                $count = count($result);
            }
        }
        return $count;
    }
    
    public function clearcache(){
        $appDir = str_replace("app", "", $this->container->getParameter('kernel.root_dir'));
        if (!in_array(@$_SERVER['REMOTE_ADDR'], ['127.0.0.1', '::1'], true)) {
            exec("/usr/bin/php " . $appDir . "/bin/console cache:clear --no-warmup --env=prod");
            exec("/usr/bin/php " . $appDir . "/bin/console cache:clear --no-warmup --env=dev");
            exec("/usr/bin/php " . $appDir . "/bin/console cache:clear --no-warmup --env=test");
            exec("rm -rf " . $appDir . "var/cache/prod/");
            exec("rm -rf " . $appDir . "var/cache/dev/");
            exec("rm -rf " . $appDir . "var/cache/test/");
            exec("rm -rf " . $appDir . "var/logs/");
            unlink($appDir . "/var/logs/");
            unlink($appDir . "/var/cache/");
            rmdir($appDir . "/var/cache");
        } else {
            exec("rm -rf " . $appDir . "var/cache/prod/");
            exec("rm -rf " . $appDir . "var/cache/dev/");
            exec("rm -rf " . $appDir . "var/cache/test/");
            exec("rm -rf " . $appDir . "var/logs/");
        }
        return true;
    }

    
    public function getFinalPrice($product_id, $saleprice){
       
        $MyFrontService  = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $em = $this->getDoctrine()->getManager();
        $retail_price = $map_price = $promotion_price = $freight_price = null;
        $pricing = array();
        $time = @gmdate("Y-m-j H:i:s", time() + 3600*($SiteData['gmttime']));
        
        // get promotion price if available   
        $sql = "select pm.custom_price from product_marking pm inner join marking m on  m.id = pm.marking_id AND m.status = 1 AND m.is_deleted = 0 AND m.is_effect_price = 1 WHERE (('".$time."' BETWEEN pm.start_date  AND pm.end_date) OR pm.showalways = 1) AND pm.status = 1 AND pm.is_deleted = 0 AND pm.product_id = ".$product_id." ORDER BY pm.showalways ASC LIMIT 1";
      
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $promation_result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if(!empty($promation_result)){
           $promotion_price  = $promation_result[0]["custom_price"];
        }
 


        // get price from product_pricing table
        $sql = "select pp.column_key, pp.column_value from product_pricing pp where (pp.column_key = 'map_price' or  pp.column_key = 'retail_price') AND pp.product_id = ".$product_id;
        $statement = $em->getConnection()->prepare($sql);
        
        $statement->execute();
        $Price_result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        
        if(!empty($Price_result)){
            foreach ($Price_result as $key => $value) {
                if($value['column_key'] === 'retail_price' ){
                    $retail_price = $value['column_value'];;  
                }elseif($value['column_key'] === 'map_price'){
                     $map_price = $value['column_value'];;  
                }
            }
        }
        
        if($promotion_price > 0.00 && $promotion_price >= $map_price){
            $result['final_price'] = $promotion_price;   
        }elseif ($retail_price > 0.00 AND $retail_price >= $map_price) {
            $result['final_price'] = $retail_price;  
        }elseif ($saleprice >= $map_price){
             $result['final_price'] = $saleprice;  
        }else{
             $result['final_price'] = $map_price;     
        }
        return $result;
 
    }

    public function getPromotionProductList($param = array('orderby' => '', 'sort' => 'ASC', 'limit' => 0, 'commaseparated_id' => '', 'onlyparents' => false, 'lang_id' => ''))
    {
        $common_condition = '';
        $session          = new Session();
        $GeneralService   = $this->get(GeneralService::class);
        $front_lang_id    = $session->get('front_lang_id');
        $em               = $this->getDoctrine()->getManager();
        $where_condition  = 'pm.status = 1 AND pm.is_deleted = 0 AND p.status = 1 AND p.is_deleted = 0 AND pm.marking_id ='.$param['promotion_id'];
        if (!empty($param['lang_id'])) {
            //$where_condition .= " AND p.lang_id =" . $param['lang_id'];
            $lang_id = $param['lang_id'];
        } elseif (!empty($front_lang_id)) {
            //$where_condition .= " AND p.lang_id =" . $front_lang_id;
            $lang_id = $front_lang_id;
        }
        $langRefId = $GeneralService->getLangRefIdById($lang_id);
        $where_condition .= " AND pl.lang_ref_id = '".$langRefId."' ";  
        
        (!empty($param['orderby'])) ? $common_condition .= " p." . $param['orderby'] : $common_condition .= 'p.sort_order, pl.name, p.ctb_ref_id';
        $common_condition .= " " . $param['sort'];

        if ($param['limit']) {
            $common_condition .= " LIMIT " . $param['limit'];
        }
        $sql = "SELECT p.ctb_ref_id as slug,pl.name FROM product_marking pm 
                JOIN product p ON p.id = pm.product_id 
                JOIN product_lang as pl ON p.ctb_ref_id = pl.product_ref_id 
                WHERE $where_condition 
                ORDER BY $common_condition ";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        return $result;
    }

    // REN02 Start
    public function getWidgetContentBySlug($slug = '')
    {
        $MyFrontService  = $this->get(MyFrontService::class);
        $SiteData = $MyFrontService->getSiteData();
        $themename = $SiteData['themename'];
        $product_item_limit = $SiteData['category_listbox_style']['product_item_per_row_desktop'];

        $em = $this->getDoctrine()->getManager();
        $currentDate = date("Y-m-d H:i:s");
        $sql = "SELECT ws.commaseparated_id, m.name as marking_name FROM widget_setting ws LEFT JOIN marking m ON m.id = ws.widget_type_id  AND m.status = 1 AND m.is_deleted = 0 WHERE (('$currentDate' BETWEEN ws.from_date AND ws.to_date) OR ws.always_show = 1) AND ws.status = 1 AND ws.is_deleted = 0 AND ws.slug ='".$slug."'";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $widget_settings_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $product_html = '';
        if($widget_settings_data){
            $ctb_ref_id = $widget_settings_data[0]['commaseparated_id'];
            // $ids = explode(',', $ctb_ref_id);
            // $ids = array_slice($ids, 0, $product_item_limit);
            // $ctb_ref_id = implode(',', $ids);
            $ctb_ref_id = '"'.str_replace(',','","',$ctb_ref_id).'"';
            $sql = "SELECT GROUP_CONCAT(p.id) as ids FROM product p INNER JOIN product_marking pm ON pm.product_id = p.id WHERE p.status = 1 AND p.is_deleted = 0 AND p.ctb_ref_id IN ($ctb_ref_id) AND (('$currentDate' BETWEEN pm.start_date AND pm.end_date) OR pm.showalways = 1) AND pm.status = 1 AND pm.is_deleted = 0";
            $statement = $em->getConnection()->prepare($sql);
            $statement->execute();
            $product_data = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            if(!empty($product_data[0]['ids'])){
                $productFilterParam = array('categoryId' => '', 'commaSeparatedCategoryId' => '', 'searchKeyword' => '', 'promotionId' => '', 'ecircularId' => '', 'productCommaValue' => $product_data[0]['ids']);
                $productData = $this->getProductData($productFilterParam);
                $Template = 'ContentcmsBundle:' . $themename . ':_homepagepromotion.html.twig';
                if (!$this->get('templating')->exists($Template)) {
                    $Template = 'ContentcmsBundle:default:_homepagepromotion.html.twig';
                }
                $product_html = $this->renderView($Template, array('productData' => $productData, 'promotion_name' => $widget_settings_data[0]['marking_name']));
            }
        }
        return $product_html;
    }

    function checkZipcodeExistShippingZone(){
        $em = $this->getDoctrine()->getManager();
        //$where_condition = ' ws.status = 1 AND ws.is_deleted = 0 AND ws.widget_area_id IN (' . $widgetAreaId . ') '; // this is widget area id for Category left
        $sql = "SELECT count(szz.shipping_zone_id) as ship_zip_count FROM shipping_zone_zipcode szz join shipping_zone sz on sz.id=szz.shipping_zone_id AND sz.status=1 AND sz.is_deleted=0";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $isShipZipExist = $statement->fetch();
        if($isShipZipExist['ship_zip_count'] > 0){
             return 1;
        }
        $sql = "SELECT count(txz.id) as ship_tax_count FROM tax_zipcode txz join tax_rates txr on txr.id=txz.taxrates_id and txr.is_deleted=0 join tax tx on tx.id=txz.tax_id AND tx.status=1 AND tx.is_deleted=0";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $isTaxZipExist = $statement->fetch();

        if($isTaxZipExist['ship_tax_count']>0){
            return 1;
        }
        return 0;
    }

    function setChekcoutServiceSession(){
        $session = new Session();
        $CheckoutService = $session->get('CheckoutService');
        // SET DATA INTO CHECKLIST SERVICE : REN02
        $checkoutData = array();
        //REN02
        $coShippingOptionId   = $CheckoutService->getShippingOptionId();
        $coShippingMethodId   = $CheckoutService->getShippingMethodId();
        $coShippingMethodName = $CheckoutService->getShippingMethodName();
        $coShipZip            = $CheckoutService->getShipZip();
        $coShipCity           = $CheckoutService->getShipCity();
        $coShipState          = $CheckoutService->getShipState();
        $coShipCountry        = $CheckoutService->getShipCountry();
        if (!empty($this->shippingChargesArray)) {
            if (empty($coShippingMethodId) && empty($coShippingOptionId)) {
                $checkoutData['shippingMethodId']   = $this->shippingChargesArray[0]['shipping_method_id'];
                $checkoutData['shippingMethodName'] = $this->shippingChargesArray[0]['shipping_method_name'];
                $checkoutData['shippingMethodSlug'] = $this->shippingChargesArray[0]['shipping_method_slug'];
                $checkoutData['shippingLabel']      = $this->shippingChargesArray[0]['shipping_label'];
                $checkoutData['shippingCharge']     = $this->shippingChargesArray[0]['shipping_charge'];
                $checkoutData['shippingOptionId']   = $this->shippingChargesArray[0]['shipping_options_id'];
            } else if (!empty($coShippingMethodId) && !empty($coShippingOptionId)) {
                $flag_localshipping = false;
                foreach ($this->shippingChargesArray as $shipKey => $shipValue) {
                    if (($shipValue['shipping_method_id'] == $coShippingMethodId) && ($shipValue['shipping_options_id'] == $coShippingOptionId)) {
                        $flag_localshipping             = true;
                        $checkoutData['shippingCharge'] = $shipValue['shipping_charge'];
                        $this->updateCheckoutData($checkoutData);
                    }
                }
                if ($flag_localshipping == false) {
                    $checkoutData['shippingMethodId']   = $this->shippingChargesArray[0]['shipping_method_id'];
                    $checkoutData['shippingMethodName'] = $this->shippingChargesArray[0]['shipping_method_name'];
                    $checkoutData['shippingMethodSlug'] = $this->shippingChargesArray[0]['shipping_method_slug'];
                    $checkoutData['shippingLabel']      = $this->shippingChargesArray[0]['shipping_label'];
                    $checkoutData['shippingCharge']     = $this->shippingChargesArray[0]['shipping_charge'];
                    $checkoutData['shippingOptionId']   = $this->shippingChargesArray[0]['shipping_options_id'];
                }
            }
            $this->updateCheckoutData($checkoutData);
        } else {
            $checkoutData['shippingMethodId']   = "";
            $checkoutData['shippingMethodName'] = "";
            $checkoutData['shippingMethodSlug'] = "";
            $checkoutData['shippingLabel']      = "";
            $checkoutData['shippingCharge']     = 0;
            $checkoutData['shippingOptionId']   = "";
            $this->updateCheckoutData($checkoutData);
        }
    }

    /*----------START :: Zone wise Shipping Option Method display functions-----------*/
    function checkShippingZonesExists($coShipZip,$coShipCity,$coShipState,$coShipCountry){
        $em = $this->getDoctrine()->getManager();
        $shipping_id_arr = array();
        $shipping_zip_id_arr = array();
        $shipping_city_id_arr = array();
        $shipping_state_id = array();
        $shipping_country_id_arr = array();
        if(!empty($coShipZip)){
            //check zone exists or not at Zipcode level
            $shipping_zip_id_arr = $this->checkShipZipZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry);
            // if(!empty($shipping_id_arr)){
            //     return array_unique($shipping_id_arr);
            // }
        }
        if(!empty($coShipCity)){
            //check zone exists or not at City level
            $shipping_city_id_arr = $this->checkShipCityZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry);
            // if(!empty($shipping_id_arr)){
            //     return array_unique($shipping_id_arr);
            // }
        }
        if(!empty($coShipState)){
            //check zone exists or not at State level
            $shipping_state_id_arr = $this->checkShipStateZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry);
            // if(!empty($shipping_id_arr)){
            //     return array_unique($shipping_id_arr);
            // }
        }
        if(!empty($coShipCountry)){
            //check zone exists or not at Country level
            $shipping_country_id_arr = $this->checkShipCountryZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry);
            // if(!empty($shipping_id_arr)){
            //     return array_unique($shipping_id_arr);
            // }
        }
        $shipping_id_arr = array_merge($shipping_zip_id_arr,$shipping_city_id_arr,$shipping_state_id_arr,$shipping_country_id_arr);
        return array_unique($shipping_id_arr);
    }

    //Function check if id exists or not with exists zone for zipcode
    function CheckZoneZipExists($ship_zone_id){
        $em = $this->getDoctrine()->getManager();
        $select_zip_zone = "SELECT szz.zipcode FROM shipping_zone_zipcode szz WHERE szz.shipping_zone_id = ".$ship_zone_id;
        $statement = $em->getConnection()->prepare($select_zip_zone);
        $statement->execute();
        $all_zipcode_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if($all_zipcode_zones){
            return false;
        }else{
            return true;
        }
    }

    //Function check if id exists or not with exists zone for city
    function CheckZoneCityExists($ship_zone_id){
        $em = $this->getDoctrine()->getManager();
        $select_city_zone = "SELECT szc.city FROM shipping_zone_city szc WHERE szc.shipping_zone_id = ".$ship_zone_id;
        $statement = $em->getConnection()->prepare($select_city_zone);
        $statement->execute();
        $all_city_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if($all_city_zones){
            return false;
        }else{
            return true;
        }
    }

    //Function check if id exists or not with exists zone for state
    function CheckZoneStateExists($ship_zone_id){
        $em = $this->getDoctrine()->getManager();
        $select_state_zone = "SELECT szs.state_id FROM shipping_zone_state szs WHERE szs.shipping_zone_id = ".$ship_zone_id;
        $statement = $em->getConnection()->prepare($select_state_zone);
        $statement->execute();
        $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        if($all_state_zones){
            return false;
        }else{
            return true;
        }
    }

    //Function to check Zone exists or not at Zip level
    function checkShipZipZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry){
        $em = $this->getDoctrine()->getManager();
        $shipping_id_arr = array();
        $select_zipcode_zone = "SELECT szz.shipping_zone_id FROM `shipping_zone_zipcode` szz INNER JOIN shipping_zone sz ON sz.id=szz.shipping_zone_id WHERE szz.zipcode = '" . $coShipZip . "' AND sz.status = 1 AND sz.is_deleted = 0";
        $statement = $em->getConnection()->prepare($select_zipcode_zone);
        $statement->execute();
        $all_zip_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);    
        if ($all_zip_zones) { //Check zipcode exists or not
            foreach ($all_zip_zones as $zipValue) {
                $stateCheck = true; //Set flag value to determine if need to search at state level directly
                $countryCheck = true; //Set flag value to determine if need to search at country level directly
                $select_city_zone = "SELECT szc.city FROM `shipping_zone_city` szc  WHERE szc.shipping_zone_id =".$zipValue['shipping_zone_id'];
                $statement = $em->getConnection()->prepare($select_city_zone);
                $statement->execute();
                $all_city_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                if($all_city_zones){ //Check city for zipcode exists or not if exists then check at City level
                    foreach ($all_city_zones as $cityValue) {
                        if(strtolower(trim($coShipCity)) == strtolower($cityValue['city'])){//Check input city and db city match or not, if match then check at State level
                            $select_state_zone = "SELECT szs.state_id FROM `shipping_zone_state` szs  WHERE szs.shipping_zone_id =".$zipValue['shipping_zone_id'];
                            $statement = $em->getConnection()->prepare($select_state_zone);
                            $statement->execute();
                            $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                            if($all_state_zones){
                                $stateCheck = false;
                                foreach ($all_state_zones as $stateValue) {
                                    if($coShipState == $stateValue['state_id']){//Check input state and db state match or not, if match then check at Country level
                                        $select_country_zone = "SELECT sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$zipValue['shipping_zone_id'];
                                        $statement = $em->getConnection()->prepare($select_country_zone);
                                        $statement->execute();
                                        $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                                        if($all_country_zones){
                                            $countryCheck = false;
                                            foreach ($all_country_zones as $countryValue) {
                                                if($coShipCountry == $countryValue['country_id']){//Check input country and db country match or not, if match then save id
                                                    $shipping_id_arr[] = $zipValue['shipping_zone_id'];
                                                }else{
                                                    $countryCheck = false;
                                                }
                                            }
                                        }
                                    }else{
                                        $countryCheck = false;
                                        $stateCheck = false;
                                    }
                                }
                            }else{
                                $stateCheck = false;
                                $countryCheck = true;
                            }                               
                        }else{
                            $stateCheck = false;
                            $countryCheck = false;
                        }
                    }
                }else{
                    $stateCheck = true;
                    $countryCheck = true;
                }
                if($stateCheck == true){ //If state flag true then need to check zipcode,state combination
                    $select_state_zone = "SELECT szs.state_id FROM `shipping_zone_state` szs  WHERE szs.shipping_zone_id =".$zipValue['shipping_zone_id'];
                    $statement = $em->getConnection()->prepare($select_state_zone);
                    $statement->execute();
                    $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if($all_state_zones){
                        foreach ($all_state_zones as $stateValue) {
                            if($coShipState == $stateValue['state_id']){
                                $select_country_zone = "SELECT sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$zipValue['shipping_zone_id'];
                                $statement = $em->getConnection()->prepare($select_country_zone);
                                $statement->execute();
                                $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                                if($all_country_zones){
                                    $countryCheck = false;
                                    foreach ($all_country_zones as $countryValue) {
                                        if($coShipCountry == $countryValue['country_id']){
                                            $shipping_id_arr[] = $zipValue['shipping_zone_id'];
                                        }else{
                                            $countryCheck = false;
                                        }
                                    }
                                }else{
                                    $countryCheck = true;
                                }
                            }else{
                                $countryCheck = false;
                            }
                        }
                    }else{
                        $countryCheck = true;
                    }
                }

                if($countryCheck == true){//If state flag true then need to check zipcode,country combination
                    $select_country_zone = "SELECT sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$zipValue['shipping_zone_id'];
                    $statement = $em->getConnection()->prepare($select_country_zone);
                    $statement->execute();
                    $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if($all_country_zones){
                        foreach ($all_country_zones as $countryValue) {
                            if($coShipCountry == $countryValue['country_id']){
                                $shipping_id_arr[] = $zipValue['shipping_zone_id'];
                            }
                        }
                    }
                } 
            }
            if($shipping_id_arr){
                return array_unique($shipping_id_arr);
            }
        }
        return $shipping_id_arr;
    }

    //Function to check Zone exists or not at City level
    function checkShipCityZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry){
        $em = $this->getDoctrine()->getManager();
        $shipping_id_arr = array();
        $select_city_zone = "SELECT szc.shipping_zone_id FROM `shipping_zone_city` szc INNER JOIN shipping_zone sz ON sz.id=szc.shipping_zone_id WHERE szc.city = '" . $coShipCity . "' AND sz.status = 1 AND sz.is_deleted = 0";
        $statement = $em->getConnection()->prepare($select_city_zone);
        $statement->execute();
        $all_city_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);    
        if ($all_city_zones) {//Check city exists or not
            foreach ($all_city_zones as $cityValue) {
                //$stateCheck = true;
                $countryCheck = true;//Set flag value to determine if need to search at country level directly
                $zipZonExists = $this->CheckZoneZipExists($cityValue['shipping_zone_id']);
                if($zipZonExists == false){
                    continue;
                }
                $select_state_zone = "SELECT szs.state_id FROM `shipping_zone_state` szs  WHERE szs.shipping_zone_id =".$cityValue['shipping_zone_id'];
                $statement = $em->getConnection()->prepare($select_state_zone);
                $statement->execute();
                $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                if($all_state_zones){
                    //$stateCheck = false;
                    foreach ($all_state_zones as $stateValue) {
                        if($coShipState == $stateValue['state_id']){
                            $select_country_zone = "SELECT sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$cityValue['shipping_zone_id'];
                            $statement = $em->getConnection()->prepare($select_country_zone);
                            $statement->execute();
                            $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                            if($all_country_zones){
                                $countryCheck = false;
                                foreach ($all_country_zones as $countryValue) {
                                    if($coShipCountry == $countryValue['country_id']){
                                        $shipping_id_arr[] = $cityValue['shipping_zone_id'];
                                    }else{
                                        $countryCheck = false;
                                    }
                                }
                            }else{
                                $countryCheck = true;
                            }
                        }else{
                            $countryCheck = false;
                        }
                    }
                }else{
                    $countryCheck = true;
                }
                if($countryCheck == true){
                    $select_country_zone = "SELECT sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$cityValue['shipping_zone_id'];
                    $statement = $em->getConnection()->prepare($select_country_zone);
                    $statement->execute();
                    $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                    if($all_country_zones){
                        foreach ($all_country_zones as $countryValue) {
                            if($coShipCountry == $countryValue['country_id']){
                                $shipping_id_arr[] = $cityValue['shipping_zone_id'];
                            }
                        }
                    }
                }
            }
            if($shipping_id_arr){
                return array_unique($shipping_id_arr);
            }
        }
        return $shipping_id_arr;
    } 

    //Function to check Zone exists or not at State level
    function checkShipStateZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry){
        $em = $this->getDoctrine()->getManager();
        $shipping_id_arr = array();
        $select_state_zone = "SELECT szs.shipping_zone_id FROM `shipping_zone_state` szs INNER JOIN shipping_zone sz ON sz.id=szs.shipping_zone_id WHERE szs.state_id = ".$coShipState." AND sz.status = 1 AND sz.is_deleted = 0";
        $statement = $em->getConnection()->prepare($select_state_zone);
        $statement->execute();
        $all_state_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);    
        if ($all_state_zones) {
            foreach ($all_state_zones as $stateValue) {
                $zipZonExists = $this->CheckZoneZipExists($stateValue['shipping_zone_id']);
                $cityZonExists = $this->CheckZoneCityExists($stateValue['shipping_zone_id']);
                if($zipZonExists == false || $cityZonExists == false){
                    continue;
                }
                $select_country_zone = "SELECT sz.id,sz.country_id FROM `shipping_zone` sz  WHERE sz.id =".$stateValue['shipping_zone_id'];
                $statement = $em->getConnection()->prepare($select_country_zone);
                $statement->execute();
                $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
                if($all_country_zones){
                    foreach ($all_country_zones as $countryValue) {
                        if($coShipCountry == $countryValue['country_id']){
                            $shipping_id_arr[] = $stateValue['shipping_zone_id'];
                        }
                    }
                }
            }
            if($shipping_id_arr){
                return array_unique($shipping_id_arr);
            }
        }
        return $shipping_id_arr;
    }

    //Function to check Zone exists or not at Country level
    function checkShipCountryZoneExists($coShipZip,$coShipCity,$coShipState,$coShipCountry){
        $em = $this->getDoctrine()->getManager();
        $shipping_id_arr = array();
        $select_country_zone = "SELECT sz.id,sz.country_id FROM `shipping_zone` sz  WHERE sz.country_id = ".$coShipCountry;
        $statement = $em->getConnection()->prepare($select_country_zone);
        $statement->execute();
        $all_country_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);    
        if ($all_country_zones) {
            foreach ($all_country_zones as $countryValue) {
                $zipZonExists = $this->CheckZoneZipExists($countryValue['id']);
                $stateZonExists = $this->CheckZoneCityExists($countryValue['id']);
                $cityZonExists = $this->CheckZoneStateExists($countryValue['id']);
                if($zipZonExists == false || $cityZonExists == false || $stateZonExists == false){
                    continue;
                }
                if($coShipCountry == $countryValue['country_id']){
                    $shipping_id_arr[] = $countryValue['id'];
                }
            }
            if($shipping_id_arr){
                return array_unique($shipping_id_arr);
            }
        }
        return $shipping_id_arr;
    }
    /*----------END :: Zone wise Shipping Option Method display functions-----------*/
    public function getQuestionsListByLang($frontLangId, $defLangId, $questionId = '') {
        $GeneralFunction = new GeneralFunctionController;
        $qnsData = [];
        $fields = "q.id, COALESCE(ql.questions, ql1.questions) AS questions";
        $where = "q.status = 1 AND q.is_deleted = 0";
        if(!empty($questionId)){
            $fields = "q.id, COALESCE(ql.questions, ql1.questions) AS questions, q.to_email_id, q.cc_email_id, q.bcc_email_id";
            $where = "q.status = 1 AND q.is_deleted = 0 AND q.id IN ($questionId)";
        }
        $query = "SELECT $fields FROM questionnaire q 
                  LEFT JOIN questionnaire_lang ql ON q.id = ql.question_id AND ql.lang_id = $frontLangId AND ql.questions != ''
                  INNER JOIN questionnaire_lang ql1 ON q.id = ql1.question_id AND ql1.lang_id = $defLangId AND ql1.questions != ''
                  WHERE $where 
                  ORDER BY q.sort_order ASC";
        $em = $this->getDoctrine()->getManager();
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $qnsData = $statement->fetchAll();
        return $qnsData;
    }
    public function getQuestionsFaqsListByLang($frontLangId, $defLangId, $questionId) {
        $faqsData = [];
        if(!empty($questionId)){
            $GeneralFunction = new GeneralFunctionController;
            $query = "select f.id, fl.question,fl.answer 
                        from faqs f 
                        left join faqs_lang fl on fl.faq_ref_id = f.uu_id 
                        left join questionnaire_faq q on f.uu_id = q.faq_ref_id 
                        left join questionnaire_lang ql on ql.question_ref_id = q.question_ref_id 
                        where q.question_id = $questionId and ql.lang_ref_id = '$frontLangId' AND f.status = 1 AND f.is_deleted = 0 
                      ORDER BY f.sort_order ASC";
            $em = $this->getDoctrine()->getManager();
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $faqsData = $statement->fetchAll();
        }
        return $faqsData;
    }
    public function getQuestionsAdditionalForm($questionId) {
        $formData = [];
        if(!empty($questionId)){
            $GeneralFunction = new GeneralFunctionController;
            $query = "SELECT additional_fields FROM questionnaire WHERE id = $questionId AND status = 1 AND is_deleted = 0";
            $em = $this->getDoctrine()->getManager();
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $formData = $statement->fetchAll();
            $formData = $formData[0]['additional_fields'];
        }
        return $formData;
    }
    public function getQuestionsTemplateByLang($frontLangId, $defLangId, $questionId, $type = 'Customer') {
        $GeneralFunction = new GeneralFunctionController;
        $tmpData = [];
        $query = "SELECT q.id, COALESCE(et.email_template_body, et1.email_template_body) AS email_template FROM questionnaire q 
                  LEFT JOIN questionnaire_email_template_lang et ON q.id = et.question_id AND et.lang_id = $frontLangId AND et.email_template_body != '' AND et.template_for = '$type'
                  INNER JOIN questionnaire_email_template_lang et1 ON q.id = et1.question_id AND et1.lang_id = $defLangId AND et1.email_template_body != '' AND et.template_for = '$type'
                  WHERE q.id = $questionId AND q.status = 1 AND q.is_deleted = 0 
                  ORDER BY q.sort_order ASC";
        $em = $this->getDoctrine()->getManager();
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $tmpData = $statement->fetchAll();
        return $tmpData;
    }
    public function getUsStateAdditionalForm() {
        $formData = [];
        //if(!empty($questionId)){
            $GeneralFunction = new GeneralFunctionController;
            $query = "SELECT id, state_name AS name FROM state WHERE status = 1 AND is_deleted = 0 AND country_id = 21 ORDER BY state_name ASC";
            $em = $this->getDoctrine()->getManager();
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $formData = $statement->fetchAll();
        //}
        return $formData;
    }
    public function getUsCanadaAdditionalForm() {
        $formData = [];
        //if(!empty($questionId)){
            $GeneralFunction = new GeneralFunctionController;
            $query = "SELECT id, country_name AS name FROM country WHERE status = 1 AND is_deleted = 0 AND id IN(4,21) ORDER BY country_name ASC";
            $em = $this->getDoctrine()->getManager();
            $statement = $em->getConnection()->prepare($query);
            $statement->execute();
            $formData = $statement->fetchAll();
        //}
        return $formData;
    }
    public function getTableData($fields = "id,name", $table = '', $where = '', $orderby = 'id ASC'){
        $result = [];
        $em     = $this->getDoctrine()->getManager();
        $sql    = "SELECT $fields FROM $table WHERE is_deleted='0' AND status=1 $where ORDER BY $orderby";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        return $result;
    }
    public function getTemplateListByLang($tempId, $langId = 1) {
        $GeneralFunction = new GeneralFunctionController;
        $tempArr = array();
        $query = "SELECT id, name FROM email_template 
                    WHERE lang_id = $langId 
                    AND status = 1
                    AND is_deleted = 0 ORDER BY id ASC";

        if ($tempId != NULL) {
            $query .= " AND id IN ($tempId)";
        }
        $em = $this->getDoctrine()->getManager();
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $tempData = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        if (!empty($tempData)) {
            foreach ($tempData as $key => $value) {
                $tempArr[] = array(
                    'id' => $value['id'],
                    'name' => $value['name']
                );
            }
        }
        return $tempArr;
    }
    public function getFormTemplateByLang($frontLangId, $defLangId, $formId, $type = 'Customer') {
        $GeneralFunction = new GeneralFunctionController;
        $tmpData = [];
        $query = "SELECT q.id, COALESCE(et.email_template_body, et1.email_template_body) AS email_template FROM forms q 
                  LEFT JOIN form_email_template_lang et ON q.id = et.form_id AND et.lang_id = $frontLangId AND et.email_template_body != '' AND et.template_for = '$type'
                  INNER JOIN form_email_template_lang et1 ON q.id = et1.form_id AND et1.lang_id = $defLangId AND et1.email_template_body != '' AND et.template_for = '$type'
                  WHERE q.id = $formId AND q.status = 1 AND q.is_deleted = 0 
                  ORDER BY q.id ASC";
        $em = $this->getDoctrine()->getManager();
        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        $tmpData = $statement->fetchAll();
        return $tmpData;
    }
    public function getDynamicTableData($fields = "id,name", $table = '', $where = '1=1', $orderby = 'id ASC'){
        $result = [];
        $em     = $this->getDoctrine()->getManager();
        $sql    = "SELECT $fields FROM $table WHERE $where ORDER BY $orderby";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll();
        return $result;
    }

    /**
     *  @Route("/form-migrate",name="admin_form_migrate")
     */
    public function formMigrate(Request $request){
        $em     = $this->getDoctrine()->getManager();
        $sql    = "SELECT id,uu_id,sort_code FROM forms WHERE 1=1";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $form_result = $statement->fetchAll();
        if(!empty($form_result)){
            foreach($form_result as $form){
                if(empty($form['uu_id'])){
                    $uuid = uniqid('frm_');
                    $sql1 = "UPDATE forms SET uu_id = '".$uuid."' WHERE id = ".$form['id'];
                    $statement = $em->getConnection()->prepare($sql1);
                    $statement->execute();
                    $form['uu_id'] = $uuid;
                }
                $table_name = strtolower(str_replace('-','_', str_replace(array('[', ']'), '', $form['sort_code'])));
                //$sql= "select GROUP_CONCAT(COLUMN_NAME) as table_column_name from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='$table_name' AND TABLE_SCHEMA = '".$this->getParameter('database_name')."' AND COLUMN_NAME NOT IN ('id', 'status', 'is_deleted')";;
                $sql= "select GROUP_CONCAT(COLUMN_NAME) as table_column_name from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='$table_name' AND TABLE_SCHEMA = '".$this->getParameter('database_name')."' AND COLUMN_NAME NOT IN ('id', 'status', 'is_deleted')";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $column_result = $statement->fetchAll();
                if(!empty($column_result)){
                    $table_columns = $column_result[0]['table_column_name'];
                    if(!empty($table_columns)){
                        $table_columns_json = json_encode(explode(',', $table_columns));
                
                        $sql = "SELECT $table_columns FROM $table_name";
                        $statement = $em->getConnection()->prepare($sql);
                        $statement->execute();
                        $form_data_result = $statement->fetchAll();
                        if(!empty($form_data_result)){
                            foreach($form_data_result as $key => $data){
                                $created_date = $data['created_date'];
                                $updated_date = $data['updated_date'];
                                unset($data['created_date']);
                                unset($data['updated_date']);
                                $sql    = "INSERT INTO `form_value_details`(`form_id`, `form_ref_id`, `form_field_list`, `form_field_value`, `created_date`, `updated_date`) VALUES ('".$form['id']."','".$form['uu_id']."','".$table_columns_json."','".addslashes(json_encode($data))."','".$created_date."','".$updated_date."')";
                                $statement = $em->getConnection()->prepare($sql);
                                $statement->execute();
                                echo $key.'<br>';
                            }
                        }
                    }
                }
            }
        }
        echo 'done';
        exit;
    }

    public function setOrderSalesPerson($order_id = '',$sales_persion_id = ''){
        if(is_numeric($sales_persion_id) && $sales_persion_id > 0){
            $em = $this->getDoctrine()->getManager();
            $sc_query = "INSERT INTO sales_commission (order_id, user_id, is_default, created_date) VALUES (?, ?, ?, ?)";
            $sc_statement = $em->getConnection()->prepare($sc_query);
            $sc_statement->execute(array($order_id, $sales_persion_id, 1, date('Y-m-d H:i:s')));
        }
    }

    public function getGoogleTranslateCodeHtml($widgetTypeData, $themename){
        $html = '';
        $session       = new Session();
        if (!empty($widgetTypeData)) {
            $GeneralService = $this->get(GeneralService::class);                        
            $googleTranslateCode = $GeneralService->getModuleIdbySlug('google-translate-code');
            if(isset($googleTranslateCode) && !empty($googleTranslateCode)){
                $activeLangs = $GeneralService->getActiveStoreLang();
                $activeLangCode = array_column($activeLangs, 'code');
                if (!in_array('en', $activeLangCode)) {
                    array_push($activeLangCode, 'en');
                }
                $sessionLang = $session->get('front_lang_code');
                $html .= '<div class="clearfix"></div>
                <div id="google_translate_element"></div>';
                $html .= "<script type='text/javascript'>
                    function googleTranslateElementInit() {
                        new google.translate.TranslateElement({pageLanguage: '".$sessionLang."', includedLanguages: 'ar,zh,en,fr,ja,de,ms,nl,ru,es,th'}, 'google_translate_element');
                    }
                </script>
                <script type='text/javascript' src='//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit'></script>";
            }
        }
        return $html;
    }
    public function getCartShippingData($extra_data)
    {
        $em                         = $this->getDoctrine()->getManager();
        $session                    = new session();
        $CheckoutService            = $session->get('CheckoutService');
        $this->shippingChargesArray = array();
        $GeneralService             = $extra_data['GeneralService'];
        $ShoppingCart               = $extra_data['ShoppingCart'];
        $shipperAddress             = $extra_data['shipperAddress'];
        $SiteSetting                = $extra_data['SiteSetting'];
        $shippingSetting            = json_decode($SiteSetting['shippingSetting'], true);
        $shipping_calculate_base_on = $shippingSetting['shipping_calculate_base_on'];
        //REN02
        $coShippingOptionId   = $CheckoutService->getShippingOptionId();
        $coShippingMethodId   = $CheckoutService->getShippingMethodId();
        $coShippingMethodName = $CheckoutService->getShippingMethodName();
        $coShippingMethodSlug = $CheckoutService->getShippingMethodSlug();
        if ($shipping_calculate_base_on == 'billing_address') {
            $coShipZip     = $CheckoutService->getBilZip();
            $coShipCity    = $CheckoutService->getBilCity();
            $coShipState   = $CheckoutService->getBilState();
            $coShipCountry = $CheckoutService->getBilCountry();
        } else {
            $coShipZip     = $CheckoutService->getShipZip();
            $coShipCity    = $CheckoutService->getShipCity();
            $coShipState   = $CheckoutService->getShipState();
            $coShipCountry = $CheckoutService->getShipCountry();
        }
      
        $FoundShippingOption                = array();
        $zoneFoundArray                     = array(0);
        $methodFoundArray                   = array(0);
        $shipping_zone_ids_exists           = array();
        $returnShippingHtml['ShippingHtml'] = $returnShippingHtml['InstallmentShippingHtml'] = '';
        $returnedHtml                       = '';
        // $select_zipcode_zone                = "SELECT szm.*,m.slug,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id  FROM `shipping_zone` sz             
        //     INNER JOIN shipping_zone_zipcode szz ON sz.id = szz.shipping_zone_id AND (szz.zipcode = '" . $coShipZip . "')
        //     INNER JOIN  shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city LIKE '%" . trim($coShipCity) . "%')
        //     INNER JOIN shipping_zone_state szs ON sz.id = szs.shipping_zone_id AND (szs.state_id = '" . $coShipState . "')
        //     INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
        //     INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
        //     INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.country_id = '" . $coShipCountry . "' AND sz.is_deleted=0 and sz.status=1 GROUP BY szm.id";
           
        // //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
        // $statement = $em->getConnection()->prepare($select_zipcode_zone);
        // $statement->execute();
        // $all_zip_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        //INNER JOIN shipping_zone_city szc ON sz.id = szc.shipping_zone_id AND (szc.city_id = $city_id) //REMOVECITY
        $shipping_zone_ids_exists = $this->checkShippingZonesExists($coShipZip,$coShipCity,$coShipState,$coShipCountry); //Function to Check zone wise entry exsists or not
        if($shipping_zone_ids_exists){
            $selected_zone = "SELECT szm.*,m.slug,sm.id as sm_shipping_method_id,m.module_name as module_name,m.id as module_id FROM `shipping_zone` sz             
             INNER JOIN shipping_zone_method szm on sz.id=szm.shipping_zone_id AND szm.is_enabled=1 AND szm.is_deleted=0
             INNER JOIN shipping_method sm ON szm.method_id = sm.id AND sm.is_deleted = '0' AND sm.status='1'
             INNER JOIN module m ON sm.module_id = m.id AND m.is_deleted = '0' AND m.status = '1' WHERE sz.is_deleted=0 and sz.status=1 AND sz.id in (".implode(',',$shipping_zone_ids_exists).") GROUP BY szm.id";
            $statement = $em->getConnection()->prepare($selected_zone);
            $statement->execute();
            $all_shipping_zones = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            $shipping_method_id_arr = array();
            $method_id = array();
            if ($all_shipping_zones) {
                foreach ($all_shipping_zones as $key => $value) {
                    if (!empty($value['options_data'])) {
                        $mOptions              = json_decode($value['options_data']);
                        $sm_shipping_method_id = $value['sm_shipping_method_id'];
                        $module_name           = $value['module_name'];
                        $module_id             = $value['module_id'];
                        $shipping_id_arr[] = $value['shipping_zone_id'];
                        $method_id[] = $value['method_id'];
                        $extra_data            = array('ShoppingCart' => $ShoppingCart, 'SiteSetting' => $SiteSetting, 'GeneralService' => $GeneralService, 'shipperAddress' => $shipperAddress, 'sm_shipping_method_id' => $sm_shipping_method_id);
                        $returnedHtml          = $this->returnShippingHTML($ShoppingCart, $value['slug'], json_decode($value['options_data']), $extra_data);
                        //Made changes for display installment in checkout page -REN11--START
                        // $returnShippingHtml['ShippingHtml'] .= $returnedHtml['shipping_html'];
                        // $returnShippingHtml['InstallmentShippingHtml'] .= $returnedHtml['installment_shipping_html'];
                        //Made changes for display installment in checkout page -REN11--END
                        $FoundShippingOption[] = array('html' => $returnedHtml, 'method_id' => $value['method_id'],'method_name'=>$module_name);
                        // if (!empty($returnedHtml)) {
                        //     array_push($methodFoundArray, $value['method_id']);
                        // }
                    }
                }
            }
        }
        return $FoundShippingOption;
    }

    /** 
     * Get Only Numbers From The Given String.
     * 
     * @return string Only numbers from the given string.
    */
    public function getOnlyNumbers(string $str){
        return preg_replace('/[^0-9]/', '', $str);
    }

    public function setOrderSalesPersonCommission($orderId,$sales_person)
    {
        $em = $this->getDoctrine()->getManager();
        $datetime = new \DateTime('now');
        $sql1 = "DELETE FROM SystemBundle:SalesCommission s WHERE s.order = '".$orderId."'";
        $query = $em->createQuery($sql1)->execute();
        $json['code'] = 0;
        if (!empty($sales_person)) {
            try{
                $salescommission = new SalesCommission();
                $salescommission->setOrder($orderId);
                $salescommission->setUser($sales_person['id']);
                $salescommission->setPercentage(trim($sales_person['percentage']));
                $salescommission->setEffortPercentage(trim($sales_person['effort_percentage']));
                $salescommission->setAmount((float)trim($sales_person['amount']));
                $salescommission->setCreatedDate($datetime);
                $em->persist($salescommission);
                $em->flush($salescommission);
                unset($salescommission);
            }catch(Exception $e){
                $json['code'] = 0;
            }
            $json['code'] = 1;   
        }
        return $json;
    }

    public function getpaymentlist($PaymentSlug){
        $payment = array(
            'paymaya'
            ,'molpay'
            ,'sslcommerz'
            ,'baiduri'
            ,'paymentez'
            ,'payu' 
            ,'toss'
            ,'credomatic'
            ,'cybersource'
            ,'webpay'
            ,'cardpoint'
            ,'openpay'
            ,'afterpay'
            ,'bbva'
            ,'paypalstandard'
            ,'openpayu'
            ,'jenga'
            ,'alphabank'
            ,'payulatam'
            ,'powertranz'
            ,'maybank-payment'
        );
        if(in_array($PaymentSlug, $payment)){
            return true;
        }
        return false;
    }

    /* Address Display As per last order */

    public function getAvailAddrLastOrderByCustomer($customerId = '')
    {
        $em = $this->getDoctrine()->getManager();
        $sql       = "SELECT * FROM orders o WHERE  o.is_deleted='0' AND o.status='1' AND o.customer_id= '" . $customerId . "' order by o.id desc ";
                $statement = $em->getConnection()->prepare($sql);
                $statement->execute();
                $result = $statement->fetch();
        return $result;
    }

       /**
     * Get data from Catalog Platform
     * Note : Used for Reset Data from Listing
     * @param string $url
     * @param array $headerParams
     * @return array
     */
    function getresetoneData($productRefId,$catalog_type) {
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting = $GeneralService->getStoreMainConfig();
       
        $em = $this->getDoctrine()->getManager();
       
        $apiAccessData = $em->getRepository('SystemBundle:ApiAccess')->find(1);
        $store_id = $apiAccessData->getCtbRefId();
        $access_key = $apiAccessData->getAccessKey();
        $headerParams = array('accesskey:' . $access_key);
        
        $url  = 'serviceResetCatalog.php?store_id=' . $store_id. '&ctb_ref_id=' . $productRefId. '&catalog_type='.$catalog_type;
       
        if (!empty($SiteSetting) && !empty($SiteSetting['otherapiSetting'])) {
            $otherapiSetting = json_decode($SiteSetting['otherapiSetting']);
            if (!empty($otherapiSetting) && !empty($otherapiSetting->ctbApiUrl)) {
                $this->base_url = $otherapiSetting->ctbApiUrl;
            }
        }
        $ch = curl_init();
        $request_url = $this->base_url . $url;
        curl_setopt($ch, CURLOPT_URL, $request_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);

        if (!empty($headerParams)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headerParams);
        } else {
            curl_setopt($ch, CURLOPT_HEADER, false);
        }

        $output = curl_exec($ch);
        curl_close($ch);
        
        return $output;
    }

    /*
        To remove Cache of the S3 for the particular file(Remove the Cachecc of s3 from APIMasterController)
        @Params(Array): Folder Key(Path With File Name started from  the awsDirroot)
        @Container
        @return boolean
    */
    public function removeCacheOfAWS($csspath,$container="")
    {
        if($container!=''){
            $this->container=$container;
        }
         $awsservices = $this->get(AmazonS3Service::class); 
        return $this->callCloudAPI($awsservices,$csspath);
 
    }
    //BOF- Added by Manoj giri to clear cache from cloud.
    private function callCloudAPI($awsinfo,$csspath){
       $zoneId    = $awsinfo->zoneId;
       $apiKey    = $awsinfo->apiKey;
       $email     = $awsinfo->email;
       $cloudUrl  = $awsinfo->cloudUrl;
       $bucketpath= $bucketpath;
       //$file = 'https://s3.amazonaws.com/'.$csspath;
       $file = 'https://cdn.rencdn.com/'.$csspath;
       try {
            $head = [];
            $head[] = 'Content-Type: application/json';
            $head[] = "X-Auth-Email: $email";
            $head[] = "X-Auth-Key: $apiKey";
            $head[] = 'cache-control: no-cache';
            $url = $cloudUrl.$zoneId."/purge_cache";
            $purge = ['files' => [$file]];
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_setopt($ch, CURLOPT_HTTPHEADER, $head);
            curl_setopt($ch, CURLOPT_VERBOSE, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($purge));
            $result = curl_exec($ch);
            if (curl_errno($ch)) {
                echo curl_error($ch);
            }
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            if($httpCode==200){
                return true;
            }else{
                return false;
            }
        } catch (Exception $e) {
            print($e);
        }
    }
    //EOF- clear cache from cloud.


    protected function flushmemcached(){
        $em = $this->getDoctrine()->getManager();
        $sql = "SELECT * FROM memcached";
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $result = $statement->fetchAll(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $tempArr = [];
        $Language = $em->getRepository(Language::class)->findBy(array('status' => 1, 'isDeleted' => 0));
            
        if (!empty($result)) {
            foreach ($result as $key => $value) {
                $keyvalue = $this->container->getParameter('database_name').$value['variablesuffix'];
                $tempArr[] = $keyvalue;
                foreach ($Language as $key => $val) {
                    $keyvalue = $this->container->getParameter('database_name')."_".$val->getId().$value['variablesuffix'];
                    $tempArr[] = $keyvalue;
                }
            }

        }
        $memcached = new \Memcached();
        $memcached->addServer($this->Server, 11211);
        $memcached->deleteMulti($tempArr, 0);
        return;
    }

    /**
     * Add prefix "in/" for Instore Product 
     * While create Slug for Instore Product
     * @param string $haystack
     * @param array $needle
     * @return Slug value with once prefix "in/"
     */
    function instorePreFixCheckAndAddOnceInSlug( $haystack, $needle ) {
        $length = strlen( $needle );
        $checkstatus=substr( $haystack, 0, $length ) === $needle;
        $updatedSlugVal="";
        if($checkstatus==1){
            $explodedData= explode("in/",$haystack);
            $slugLastVal=end($explodedData);
            $updatedSlugVal='in/'.$slugLastVal; 
        }else{
            $updatedSlugVal='in/'.$haystack; 
        }
        return $updatedSlugVal;
    }

    /* IF an email template has an OVERRIDE with email addresses for the To, From, CC and BCC then used it to replace email addresses */
    public function assignEmailAddress($EmailTemplate,$emailDetails){
        $ctb_master_data = $EmailTemplate->getCtbMasterData();
        $ctb_master_data = str_replace("\n", "", str_replace("\r", "", $ctb_master_data));
        $ctb_master_data = json_decode($ctb_master_data, true);
        $ccbccEmailid    = array();
        $email_array     = array();
        $from_email =(isset($ctb_master_data['from_email']) && !empty($ctb_master_data['from_email'])) ? $ctb_master_data['from_email']:$emailDetails['from_email'];
        $from_email_name =(isset($ctb_master_data['from_email_name']) && !empty($ctb_master_data['from_email_name'])) ? $ctb_master_data['from_email_name']:$emailDetails['from_email_name'];
        $toemail_field =(isset($ctb_master_data['toemail_field']) && !empty($ctb_master_data['toemail_field'])) ? $ctb_master_data['toemail_field']:$emailDetails['toEmail'];
        if(isset($ctb_master_data['cc_emailid']) && !empty($ctb_master_data['cc_emailid'])){
            $ccbccEmailid['cc'] = $ctb_master_data['cc_emailid'];                    
        }
        if(isset($ctb_master_data['bcc_emailid']) && !empty($ctb_master_data['bcc_emailid'])){
            $ccbccEmailid['bcc'] = $ctb_master_data['bcc_emailid'];                    
        }
        $email_array = array('toemail_field'=>$toemail_field,'fromEmail'=>$from_email,'ccbccEmailid'=>$ccbccEmailid,'from_email_name'=>$from_email_name);
        return $email_array;
    }

    //Assign Email Address To preppare sending functionality for RenARK - Created By Kalpesh On 03-01-2024
    public function appAssignEmailAddress($EmailTemplate,$emailDetails,$container="")
    {
        if($container!=''){$this->container=$container;}
        return $this->assignEmailAddress($EmailTemplate,$emailDetails); 
    }

    //Email sending functionality for RenARK - Created By Kalpesh On 03-01-2024
    public function appSendEmail($toData, $emailData, $fromData, $ccbccData = array(), $attachments = array(),$container=""){
        if($container!=''){$this->container=$container;}
        return $this->sendEmail($toData, $emailData, $fromData, $ccbccData = array(), $attachments = array());
    }

    public function getModuleStatusBySlug($slug) {
        $em = $this->getDoctrine()->getManager();
        $module = $em->getRepository(Module::class)->findOneBy(['slug' => $slug, 'isDeleted' => 0]);
        if (!empty($module)) {
            return $module->getStatus();
        }
        return false;
    }

    /**
     * Get data from Catalog Platform
     * Note : Used for to Create Dealer As Retailer in PIM
     * @param string $url
     * @param array $headerParams
     * @return array
     */
    function dealerAsRetailerAction($dealerArr) {
        $GeneralService = $this->get(GeneralService::class);
        $SiteSetting = $GeneralService->getStoreMainConfig();
       
        $em = $this->getDoctrine()->getManager();
       
        $apiAccessData = $em->getRepository('SystemBundle:ApiAccess')->find(1);
        $store_id = $apiAccessData->getCtbRefId();
        $access_key = $apiAccessData->getAccessKey();
        $headerParams = array('accesskey:' . $access_key);
        
        if($dealerArr['action'] == 'delete'){
            $url  = 'serviceDealerAction.php?store_id=' . $store_id. '&ctb_ref_id='.$dealerArr['ctb_ref_id'].'&action='.$dealerArr['action'];
        }else{
            $url  = 'serviceDealerAction.php?store_id=' . $store_id. '&first_name='.$dealerArr['first_name'].'&last_name='.$dealerArr['last_name'].'&email_id='.$dealerArr['email_id'].'&phone='.$dealerArr['phone'].'&address='.$dealerArr['address'].'&zipcode='.$dealerArr['zipcode'].'&status='.$dealerArr['status'].'&ctb_ref_id='.$dealerArr['ctb_ref_id'].'&action='.$dealerArr['action'];
        }
        
        if (!empty($SiteSetting) && !empty($SiteSetting['otherapiSetting'])) {
            $otherapiSetting = json_decode($SiteSetting['otherapiSetting']);
            if (!empty($otherapiSetting) && !empty($otherapiSetting->ctbApiUrl)) {
                $this->base_url = $otherapiSetting->ctbApiUrl;
            }
        }
        $ch = curl_init();
        $request_url = $this->base_url . $url;
        curl_setopt($ch, CURLOPT_URL, $request_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);

        if (!empty($headerParams)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headerParams);
        } else {
            curl_setopt($ch, CURLOPT_HEADER, false);
        }

        $output = curl_exec($ch);
        curl_close($ch);
        return $output;
    }
} 
